{"ast":null,"code":"var _jsxFileName = \"E:\\\\react-material\\\\front-end\\\\src\\\\views\\\\Account\\\\components\\\\AccountProfile\\\\AccountProfile.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport moment from 'moment';\nimport { withStyles } from '@material-ui/styles';\nimport { Card, CardActions, CardContent, Avatar, Typography, Divider, Button, LinearProgress } from '@material-ui/core';\nimport { URI } from './../../../../constants/types';\nimport styles from './styles';\nimport { LoadingButton } from './../../../../components';\n\nclass AccountProfile extends Component {\n  constructor(props) {\n    super(props);\n\n    this.profileComplete = (user, isAuth) => {\n      if (isAuth) {\n        let complete = 0;\n\n        if (user.firstName) {\n          complete += 20;\n        }\n\n        if (user.lastName) {\n          complete += 20;\n        }\n\n        if (user.sdt) {\n          complete += 20;\n        }\n\n        if (user.city) {\n          complete += 20;\n        }\n\n        if (user.avatar) {\n          complete += 20;\n        }\n\n        return complete;\n      } else {\n        return 0;\n      }\n    };\n\n    this.handleRemoveAvatar = user => {\n      this.setState({\n        isLoadingButtonRemove: true\n      });\n      this.props.removePicture(user._id);\n    };\n\n    this.handleChange = (e, user) => {\n      let file = this.state.avatar;\n      file = e.target.files[0];\n      console.log(file);\n\n      if (file) {\n        this.setState({\n          isLoadingButtonUpload: true\n        });\n        this.props.uploadPicture(file, user._id);\n      }\n    };\n\n    this.state = {\n      avatar: '',\n      isLoadingButtonUpload: false,\n      isLoadingButtonRemove: false,\n      showErrorFile: false\n    };\n  }\n\n  componentDidUpdate(preProps, preState) {\n    if (preProps.file !== this.props.file) {\n      this.props.getInfoUser(this.props.user._id);\n    }\n\n    if (preProps.user !== this.props.user) {\n      this.setState({\n        isLoadingButtonUpload: false,\n        isLoadingButtonRemove: false,\n        showErrorFile: false,\n        avatar: ''\n      });\n    }\n\n    if (preProps.errors !== this.props.errors) {\n      this.setState({\n        isLoadingButtonUpload: false,\n        isLoadingButtonRemove: false,\n        showErrorFile: true,\n        avatar: ''\n      });\n    }\n  }\n\n  render() {\n    const _this$props = this.props,\n          className = _this$props.className,\n          user = _this$props.user,\n          isAuth = _this$props.isAuth,\n          classes = _this$props.classes,\n          errors = _this$props.errors;\n    const _this$state = this.state,\n          isLoadingButtonUpload = _this$state.isLoadingButtonUpload,\n          showErrorFile = _this$state.showErrorFile,\n          isLoadingButtonRemove = _this$state.isLoadingButtonRemove;\n    return React.createElement(Card, {\n      className: clsx(classes.root, className),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(CardContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.details,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      gutterBottom: true,\n      variant: \"h2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"\".concat(user.firstName, \" \").concat(user.lastName)), React.createElement(Typography, {\n      className: classes.locationText,\n      color: \"textSecondary\",\n      variant: \"body1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, user.city, \", \", user.country), React.createElement(Typography, {\n      className: classes.dateText,\n      color: \"textSecondary\",\n      variant: \"body1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, moment().format('hh:mm A'), \" (\", 'GTM-7', \")\")), React.createElement(Avatar, {\n      className: classes.avatar,\n      src: user.avatar ? \"\".concat(URI, \"/getAvatar/\").concat(user.avatar) : \"//www.gravatar.com/avatar/f8aef9003205946523250a062b54bbb6?s=200&r=pg&d=mm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: classes.progress,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      variant: \"body1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"Profile Completeness: \".concat(this.profileComplete(user, isAuth), \"%\")), React.createElement(LinearProgress, {\n      value: this.profileComplete(user, isAuth),\n      variant: \"determinate\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: classes.showError,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, showErrorFile ? React.createElement(Typography, {\n      variant: \"subtitle2\",\n      color: \"secondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, errors.status) : null)), React.createElement(Divider, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }), React.createElement(CardActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      accept: \"image/*\" //className={classes.input}\n      ,\n      id: \"text-button-file\",\n      multiple: true,\n      type: \"file\",\n      onChange: e => this.handleChange(e, user),\n      disabled: isLoadingButtonUpload ? true : false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }), React.createElement(Button, {\n      component: \"span\",\n      className: classes.uploadButton,\n      color: \"primary\",\n      variant: \"text\",\n      disabled: isLoadingButtonUpload ? true : false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, isLoadingButtonUpload && React.createElement(LoadingButton, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }), \"Upload avatar\"), React.createElement(Button, {\n      variant: \"text\",\n      onClick: () => this.handleRemoveAvatar(user),\n      disabled: isLoadingButtonRemove ? true : false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, isLoadingButtonRemove && React.createElement(LoadingButton, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }), \"Remove avatar\")));\n  }\n\n}\n\nAccountProfile.propTypes = {\n  className: PropTypes.string,\n  auth: PropTypes.object,\n  uploadPicture: PropTypes.func,\n  file: PropTypes.string,\n  errors: PropTypes.object\n};\nexport default withStyles(styles)(AccountProfile);","map":{"version":3,"sources":["E:\\react-material\\front-end\\src\\views\\Account\\components\\AccountProfile\\AccountProfile.js"],"names":["React","Component","PropTypes","clsx","moment","withStyles","Card","CardActions","CardContent","Avatar","Typography","Divider","Button","LinearProgress","URI","styles","LoadingButton","AccountProfile","constructor","props","profileComplete","user","isAuth","complete","firstName","lastName","sdt","city","avatar","handleRemoveAvatar","setState","isLoadingButtonRemove","removePicture","_id","handleChange","e","file","state","target","files","console","log","isLoadingButtonUpload","uploadPicture","showErrorFile","componentDidUpdate","preProps","preState","getInfoUser","errors","render","className","classes","root","details","locationText","country","dateText","format","progress","showError","status","uploadButton","propTypes","string","auth","object","func"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport moment from 'moment';\nimport { withStyles } from '@material-ui/styles';\nimport {\n    Card,\n    CardActions,\n    CardContent,\n    Avatar,\n    Typography,\n    Divider,\n    Button,\n    LinearProgress\n} from '@material-ui/core';\nimport { URI } from './../../../../constants/types';\nimport styles from './styles';\nimport { LoadingButton } from './../../../../components';\n\nclass AccountProfile extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            avatar: '',\n            isLoadingButtonUpload: false,\n            isLoadingButtonRemove: false,\n            showErrorFile: false\n        };\n    }\n    profileComplete = (user, isAuth) => {\n        if (isAuth) {\n            let complete = 0;\n            if (user.firstName) {\n                complete += 20;\n            }\n            if (user.lastName) {\n                complete += 20;\n            }\n            if (user.sdt) {\n                complete += 20;\n            }\n            if (user.city) {\n                complete += 20;\n            }\n            if (user.avatar) {\n                complete += 20;\n            }\n            return complete;\n        } else {\n            return 0;\n        }\n    };\n    handleRemoveAvatar = (user) => {\n        this.setState({\n            isLoadingButtonRemove: true\n        });\n        this.props.removePicture(user._id);\n    }\n    handleChange = (e, user) => {\n        let file = this.state.avatar;\n        file = e.target.files[0];\n        console.log(file);\n        if (file) {\n            this.setState({\n                isLoadingButtonUpload: true\n            });\n            this.props.uploadPicture(file, user._id);\n            \n        }\n    };\n    componentDidUpdate(preProps, preState)\n    {\n        if(preProps.file !== this.props.file)\n        {\n            this.props.getInfoUser(this.props.user._id);\n        }\n        if (preProps.user !== this.props.user) {\n            this.setState({\n                isLoadingButtonUpload: false,\n                isLoadingButtonRemove: false,\n                showErrorFile: false,\n                avatar: ''\n            });\n        }\n        if (preProps.errors !== this.props.errors) {\n            this.setState({\n                isLoadingButtonUpload: false,\n                isLoadingButtonRemove: false,\n                showErrorFile: true,\n                avatar: ''\n            });\n        }\n    }\n    render() {\n        const { className, user, isAuth, classes, errors } = this.props;\n        const { isLoadingButtonUpload, showErrorFile, isLoadingButtonRemove } = this.state;\n        return (\n            <Card className={clsx(classes.root, className)}>\n                <CardContent>\n                    <div className={classes.details}>\n                        <div>\n                            <Typography gutterBottom variant=\"h2\">\n                                {`${user.firstName} ${user.lastName}`}\n                            </Typography>\n                            <Typography\n                                className={classes.locationText}\n                                color=\"textSecondary\"\n                                variant=\"body1\"\n                            >\n                                {user.city}, {user.country}\n                            </Typography>\n                            <Typography\n                                className={classes.dateText}\n                                color=\"textSecondary\"\n                                variant=\"body1\"\n                            >\n                                {moment().format('hh:mm A')} ({'GTM-7'})\n                            </Typography>\n                        </div>\n                        <Avatar\n                            className={classes.avatar}\n                            src={\n                                user.avatar\n                                    ? `${URI}/getAvatar/${user.avatar}`\n                                    : `//www.gravatar.com/avatar/f8aef9003205946523250a062b54bbb6?s=200&r=pg&d=mm`\n                            }\n                        />\n                    </div>\n                    <div className={classes.progress}>\n                        <Typography variant=\"body1\">\n                            {`Profile Completeness: ${this.profileComplete(\n                                user,\n                                isAuth\n                            )}%`}\n                        </Typography>\n                        <LinearProgress\n                            value={this.profileComplete(user, isAuth)}\n                            variant=\"determinate\"\n                        />\n                    </div>\n                    <div className={classes.showError}>\n                        { \n                            showErrorFile \n                            ? <Typography variant=\"subtitle2\" color=\"secondary\">{errors.status}</Typography>\n                            : null\n                        }\n                    </div>\n                </CardContent>\n                <Divider />\n                <CardActions>\n                    <input\n                        accept=\"image/*\"\n                        //className={classes.input}\n                        id=\"text-button-file\"\n                        multiple\n                        type=\"file\"\n                        onChange={e => this.handleChange(e, user)}\n                        disabled={isLoadingButtonUpload ? true : false}\n                    />\n                    \n                        <Button\n                            component=\"span\"\n                            className={classes.uploadButton}\n                            color=\"primary\"\n                            variant=\"text\"\n                            disabled={isLoadingButtonUpload ? true : false}\n                        >\n                            {isLoadingButtonUpload && <LoadingButton />}\n                            Upload avatar\n                        </Button>\n                    \n                    <Button \n                        variant=\"text\" \n                        onClick={() => this.handleRemoveAvatar(user)}\n                        disabled={isLoadingButtonRemove ? true : false}\n                    >\n                        {isLoadingButtonRemove && <LoadingButton />}\n                        Remove avatar\n                    </Button>\n                </CardActions>\n            </Card>\n        );\n    }\n}\n\nAccountProfile.propTypes = {\n    className: PropTypes.string,\n    auth: PropTypes.object,\n    uploadPicture: PropTypes.func,\n    file: PropTypes.string,\n    errors: PropTypes.object\n};\n\nexport default withStyles(styles)(AccountProfile);\n"]},"metadata":{},"sourceType":"module"}