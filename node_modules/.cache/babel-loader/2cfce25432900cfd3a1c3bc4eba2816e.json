{"ast":null,"code":"import _slicedToArray from \"E:\\\\react-material\\\\front-end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"E:\\\\react-material\\\\front-end\\\\src\\\\views\\\\PresencesDetail\\\\components\\\\PresencesTable\\\\PresencesTable.js\";\nimport React, { useState, useEffect } from 'react';\nimport clsx from 'clsx';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { withStyles } from '@material-ui/styles';\nimport { Card, CardActions, CardContent, Checkbox, Table, TableBody, TableCell, TableHead, TableRow, Typography, TablePagination } from '@material-ui/core';\nimport CheckIcon from '@material-ui/icons/Check';\nimport ToolbarTable from './component/ToolbarTable/ToolbarTable';\nimport styles from './styles';\n\nconst PresencesTable = props => {\n  const className = props.className,\n        classes = props.classes,\n        presenceDetailClass = props.presenceDetailClass;\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        selectedUsers = _useState2[0],\n        setSelectedUsers = _useState2[1];\n\n  const _useState3 = useState(5),\n        _useState4 = _slicedToArray(_useState3, 2),\n        rowsPerPage = _useState4[0],\n        setRowsPerPage = _useState4[1];\n\n  const _useState5 = useState(0),\n        _useState6 = _slicedToArray(_useState5, 2),\n        page = _useState6[0],\n        setPage = _useState6[1];\n\n  const checkDateList = presenceDetailClass.checkDateList,\n        classById = presenceDetailClass.classById;\n\n  const handleSelectAll = event => {\n    let selectedUsers;\n\n    if (event.target.checked) {\n      selectedUsers = classById.dssv.map(sv => sv._id);\n    } else {\n      selectedUsers = [];\n    }\n\n    setSelectedUsers(selectedUsers);\n  };\n\n  const handleSelectOne = (event, id) => {\n    const selectedIndex = selectedUsers.indexOf(id);\n    let newSelectedUsers = [];\n\n    if (selectedIndex === -1) {\n      newSelectedUsers = newSelectedUsers.concat(selectedUsers, id);\n    } else if (selectedIndex === 0) {\n      newSelectedUsers = newSelectedUsers.concat(selectedUsers.slice(1));\n    } else if (selectedIndex === selectedUsers.length - 1) {\n      newSelectedUsers = newSelectedUsers.concat(selectedUsers.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelectedUsers = newSelectedUsers.concat(selectedUsers.slice(0, selectedIndex), selectedUsers.slice(selectedIndex + 1));\n    }\n\n    setSelectedUsers(newSelectedUsers);\n  };\n\n  const handlePageChange = (event, page) => {\n    setPage(page);\n  };\n\n  const handleRowsPerPageChange = event => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  return React.createElement(Card, {\n    className: clsx(classes.root, className),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(ToolbarTable, {\n    selectedUsers: selectedUsers //deleteUsers={deleteUsers}\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }), React.createElement(CardContent, {\n    className: classes.content,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(PerfectScrollbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.inner,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(Table, {\n    size: \"small\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(TableHead, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(TableRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(TableCell, {\n    rowSpan: 2,\n    padding: \"checkbox\",\n    className: classes.borderTable,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(Checkbox, {\n    checked: classById.dssv && selectedUsers.length === classById.dssv.length,\n    color: \"primary\",\n    indeterminate: selectedUsers.length > 0 && selectedUsers.length < classById.dssv.length,\n    onChange: handleSelectAll,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  })), React.createElement(TableCell, {\n    rowSpan: 2,\n    align: \"center\",\n    className: classes.borderTable,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, \"Member code\"), React.createElement(TableCell, {\n    rowSpan: 2,\n    className: classes.borderTable,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, \"Name\"), React.createElement(TableCell, {\n    rowSpan: 2,\n    align: \"center\",\n    className: classes.borderTable,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, \"Birth date\"), React.createElement(TableCell, {\n    rowSpan: 2,\n    align: \"center\",\n    className: classes.borderTable,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, \"Gender\"), checkDateList && React.createElement(TableCell, {\n    className: classes.borderTable,\n    colSpan: checkDateList.dateList && checkDateList.dateList.length,\n    align: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, \"Check date\")), checkDateList && React.createElement(TableRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, checkDateList.dateList && checkDateList.dateList.map(date => React.createElement(TableCell, {\n    key: date._id,\n    align: \"center\",\n    className: classes.borderTable,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, date.date)))), React.createElement(TableBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, classById.dssv && classById.dssv.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(sv => React.createElement(TableRow, {\n    key: sv._id,\n    className: classes.tableRow,\n    hover: true,\n    selected: selectedUsers.indexOf(sv._id) !== -1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }, React.createElement(TableCell, {\n    padding: \"checkbox\",\n    className: classes.borderTable,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, React.createElement(Checkbox, {\n    checked: selectedUsers.indexOf(sv._id) !== -1,\n    color: \"primary\",\n    onChange: event => handleSelectOne(event, sv._id),\n    value: \"true\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  })), React.createElement(TableCell, {\n    align: \"center\",\n    className: classes.borderTable,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"body1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }, sv.maSV)), React.createElement(TableCell, {\n    className: classes.borderTable,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196\n    },\n    __self: this\n  }, sv.tenSV), React.createElement(TableCell, {\n    align: \"center\",\n    className: classes.borderTable,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201\n    },\n    __self: this\n  }, sv.ngaysinh), React.createElement(TableCell, {\n    align: \"center\",\n    className: classes.borderTable,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207\n    },\n    __self: this\n  }, sv.gioitinh), checkDateList && checkDateList.dateList.map(date => {\n    if (!sv.checkDate.some(x => x === date.date)) {\n      return React.createElement(TableCell, {\n        key: date._id,\n        align: \"center\",\n        className: classes.borderTable,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      });\n    }\n\n    return sv.checkDate.map((kd, index) => {\n      if (date.date === kd) {\n        //console.log(kd)\n        return React.createElement(TableCell, {\n          key: index,\n          align: \"center\",\n          className: classes.borderTable,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 237\n          },\n          __self: this\n        }, React.createElement(CheckIcon, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 246\n          },\n          __self: this\n        }));\n      }\n\n      return null;\n    });\n  })))))))), React.createElement(CardActions, {\n    className: classes.actions,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262\n    },\n    __self: this\n  }, React.createElement(TablePagination, {\n    component: \"div\",\n    count: classById.dssv ? classById.dssv.length : 0,\n    onChangePage: handlePageChange,\n    onChangeRowsPerPage: handleRowsPerPageChange,\n    page: page,\n    rowsPerPage: rowsPerPage,\n    rowsPerPageOptions: [],\n    backIconButtonProps: {\n      'aria-label': 'previous page'\n    },\n    nextIconButtonProps: {\n      'aria-label': 'next page'\n    },\n    labelRowsPerPage: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263\n    },\n    __self: this\n  })));\n};\n\nexport default withStyles(styles)(PresencesTable);","map":{"version":3,"sources":["E:\\react-material\\front-end\\src\\views\\PresencesDetail\\components\\PresencesTable\\PresencesTable.js"],"names":["React","useState","useEffect","clsx","PerfectScrollbar","withStyles","Card","CardActions","CardContent","Checkbox","Table","TableBody","TableCell","TableHead","TableRow","Typography","TablePagination","CheckIcon","ToolbarTable","styles","PresencesTable","props","className","classes","presenceDetailClass","selectedUsers","setSelectedUsers","rowsPerPage","setRowsPerPage","page","setPage","checkDateList","classById","handleSelectAll","event","target","checked","dssv","map","sv","_id","handleSelectOne","id","selectedIndex","indexOf","newSelectedUsers","concat","slice","length","handlePageChange","handleRowsPerPageChange","value","root","content","inner","borderTable","dateList","date","tableRow","maSV","tenSV","ngaysinh","gioitinh","checkDate","some","x","kd","index","actions"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,gBAAP,MAA6B,yBAA7B;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,SACIC,IADJ,EAEIC,WAFJ,EAGIC,WAHJ,EAIIC,QAJJ,EAKIC,KALJ,EAMIC,SANJ,EAOIC,SAPJ,EAQIC,SARJ,EASIC,QATJ,EAUIC,UAVJ,EAWIC,eAXJ,QAYO,mBAZP;AAaA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAOC,YAAP,MAAyB,uCAAzB;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AAEA,MAAMC,cAAc,GAAGC,KAAK,IAAI;AAAA,QACpBC,SADoB,GACwBD,KADxB,CACpBC,SADoB;AAAA,QACTC,OADS,GACwBF,KADxB,CACTE,OADS;AAAA,QACAC,mBADA,GACwBH,KADxB,CACAG,mBADA;;AAAA,oBAEcvB,QAAQ,CAAC,EAAD,CAFtB;AAAA;AAAA,QAErBwB,aAFqB;AAAA,QAENC,gBAFM;;AAAA,qBAGUzB,QAAQ,CAAC,CAAD,CAHlB;AAAA;AAAA,QAGrB0B,WAHqB;AAAA,QAGRC,cAHQ;;AAAA,qBAIJ3B,QAAQ,CAAC,CAAD,CAJJ;AAAA;AAAA,QAIrB4B,IAJqB;AAAA,QAIfC,OAJe;;AAAA,QAKpBC,aALoB,GAKSP,mBALT,CAKpBO,aALoB;AAAA,QAKLC,SALK,GAKSR,mBALT,CAKLQ,SALK;;AAO5B,QAAMC,eAAe,GAAGC,KAAK,IAAI;AAC7B,QAAIT,aAAJ;;AACA,QAAIS,KAAK,CAACC,MAAN,CAAaC,OAAjB,EAA0B;AACtBX,MAAAA,aAAa,GAAGO,SAAS,CAACK,IAAV,CAAeC,GAAf,CAAmBC,EAAE,IAAIA,EAAE,CAACC,GAA5B,CAAhB;AACH,KAFD,MAEO;AACHf,MAAAA,aAAa,GAAG,EAAhB;AACH;;AACDC,IAAAA,gBAAgB,CAACD,aAAD,CAAhB;AACH,GARD;;AASA,QAAMgB,eAAe,GAAG,CAACP,KAAD,EAAQQ,EAAR,KAAe;AACnC,UAAMC,aAAa,GAAGlB,aAAa,CAACmB,OAAd,CAAsBF,EAAtB,CAAtB;AACA,QAAIG,gBAAgB,GAAG,EAAvB;;AACA,QAAIF,aAAa,KAAK,CAAC,CAAvB,EAA0B;AACtBE,MAAAA,gBAAgB,GAAGA,gBAAgB,CAACC,MAAjB,CAAwBrB,aAAxB,EAAuCiB,EAAvC,CAAnB;AACH,KAFD,MAEO,IAAIC,aAAa,KAAK,CAAtB,EAAyB;AAC5BE,MAAAA,gBAAgB,GAAGA,gBAAgB,CAACC,MAAjB,CAAwBrB,aAAa,CAACsB,KAAd,CAAoB,CAApB,CAAxB,CAAnB;AACH,KAFM,MAEA,IAAIJ,aAAa,KAAKlB,aAAa,CAACuB,MAAd,GAAuB,CAA7C,EAAgD;AACnDH,MAAAA,gBAAgB,GAAGA,gBAAgB,CAACC,MAAjB,CACfrB,aAAa,CAACsB,KAAd,CAAoB,CAApB,EAAuB,CAAC,CAAxB,CADe,CAAnB;AAGH,KAJM,MAIA,IAAIJ,aAAa,GAAG,CAApB,EAAuB;AAC1BE,MAAAA,gBAAgB,GAAGA,gBAAgB,CAACC,MAAjB,CACfrB,aAAa,CAACsB,KAAd,CAAoB,CAApB,EAAuBJ,aAAvB,CADe,EAEflB,aAAa,CAACsB,KAAd,CAAoBJ,aAAa,GAAG,CAApC,CAFe,CAAnB;AAIH;;AACDjB,IAAAA,gBAAgB,CAACmB,gBAAD,CAAhB;AACH,GAlBD;;AAmBA,QAAMI,gBAAgB,GAAG,CAACf,KAAD,EAAQL,IAAR,KAAiB;AACtCC,IAAAA,OAAO,CAACD,IAAD,CAAP;AACH,GAFD;;AAGA,QAAMqB,uBAAuB,GAAGhB,KAAK,IAAI;AACrCN,IAAAA,cAAc,CAAC,CAACM,KAAK,CAACC,MAAN,CAAagB,KAAf,CAAd;AACArB,IAAAA,OAAO,CAAC,CAAD,CAAP;AACH,GAHD;;AAKA,SACI,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAE3B,IAAI,CAACoB,OAAO,CAAC6B,IAAT,EAAe9B,SAAf,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,YAAD;AACI,IAAA,aAAa,EAAEG,aADnB,CAEI;AAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAKI,oBAAC,WAAD;AAAa,IAAA,SAAS,EAAEF,OAAO,CAAC8B,OAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAE9B,OAAO,CAAC+B,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,SAAD;AACI,IAAA,OAAO,EAAE,CADb;AAEI,IAAA,OAAO,EAAC,UAFZ;AAGI,IAAA,SAAS,EAAE/B,OAAO,CAACgC,WAHvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKI,oBAAC,QAAD;AACI,IAAA,OAAO,EACHvB,SAAS,CAACK,IAAV,IACAZ,aAAa,CAACuB,MAAd,KACAhB,SAAS,CAACK,IAAV,CAAeW,MAJvB;AAMI,IAAA,KAAK,EAAC,SANV;AAOI,IAAA,aAAa,EACTvB,aAAa,CAACuB,MAAd,GAAuB,CAAvB,IACAvB,aAAa,CAACuB,MAAd,GACAhB,SAAS,CAACK,IAAV,CAAeW,MAVvB;AAYI,IAAA,QAAQ,EAAEf,eAZd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALJ,CADJ,EAqBI,oBAAC,SAAD;AACI,IAAA,OAAO,EAAE,CADb;AAEI,IAAA,KAAK,EAAC,QAFV;AAGI,IAAA,SAAS,EAAEV,OAAO,CAACgC,WAHvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBArBJ,EA4BI,oBAAC,SAAD;AACI,IAAA,OAAO,EAAE,CADb;AAEI,IAAA,SAAS,EAAEhC,OAAO,CAACgC,WAFvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YA5BJ,EAkCI,oBAAC,SAAD;AACI,IAAA,OAAO,EAAE,CADb;AAEI,IAAA,KAAK,EAAC,QAFV;AAGI,IAAA,SAAS,EAAEhC,OAAO,CAACgC,WAHvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAlCJ,EAyCI,oBAAC,SAAD;AACI,IAAA,OAAO,EAAE,CADb;AAEI,IAAA,KAAK,EAAC,QAFV;AAGI,IAAA,SAAS,EAAEhC,OAAO,CAACgC,WAHvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAzCJ,EAgDKxB,aAAa,IACV,oBAAC,SAAD;AACI,IAAA,SAAS,EAAER,OAAO,CAACgC,WADvB;AAEI,IAAA,OAAO,EACHxB,aAAa,CAACyB,QAAd,IACAzB,aAAa,CAACyB,QAAd,CAAuBR,MAJ/B;AAMI,IAAA,KAAK,EAAC,QANV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAjDR,CADJ,EA8DKjB,aAAa,IACV,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKA,aAAa,CAACyB,QAAd,IACGzB,aAAa,CAACyB,QAAd,CAAuBlB,GAAvB,CAA2BmB,IAAI,IAC3B,oBAAC,SAAD;AACI,IAAA,GAAG,EAAEA,IAAI,CAACjB,GADd;AAEI,IAAA,KAAK,EAAC,QAFV;AAGI,IAAA,SAAS,EACLjB,OAAO,CAACgC,WAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOKE,IAAI,CAACA,IAPV,CADJ,CAFR,CA/DR,CADJ,EAgFI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKzB,SAAS,CAACK,IAAV,IACGL,SAAS,CAACK,IAAV,CAAeU,KAAf,CACIlB,IAAI,GAAGF,WADX,EAEIE,IAAI,GAAGF,WAAP,GAAqBA,WAFzB,EAICW,GAJD,CAIKC,EAAE,IACH,oBAAC,QAAD;AACI,IAAA,GAAG,EAAEA,EAAE,CAACC,GADZ;AAEI,IAAA,SAAS,EAAEjB,OAAO,CAACmC,QAFvB;AAGI,IAAA,KAAK,MAHT;AAII,IAAA,QAAQ,EACJjC,aAAa,CAACmB,OAAd,CACIL,EAAE,CAACC,GADP,MAEM,CAAC,CAPf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAUI,oBAAC,SAAD;AACI,IAAA,OAAO,EAAC,UADZ;AAEI,IAAA,SAAS,EAAEjB,OAAO,CAACgC,WAFvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAII,oBAAC,QAAD;AACI,IAAA,OAAO,EACH9B,aAAa,CAACmB,OAAd,CACIL,EAAE,CAACC,GADP,MAEM,CAAC,CAJf;AAMI,IAAA,KAAK,EAAC,SANV;AAOI,IAAA,QAAQ,EAAEN,KAAK,IACXO,eAAe,CAACP,KAAD,EAAQK,EAAE,CAACC,GAAX,CARvB;AAUI,IAAA,KAAK,EAAC,MAVV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,CAVJ,EA2BI,oBAAC,SAAD;AACI,IAAA,KAAK,EAAC,QADV;AAEI,IAAA,SAAS,EAAEjB,OAAO,CAACgC,WAFvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAII,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAC,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKhB,EAAE,CAACoB,IADR,CAJJ,CA3BJ,EAmCI,oBAAC,SAAD;AACI,IAAA,SAAS,EAAEpC,OAAO,CAACgC,WADvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGKhB,EAAE,CAACqB,KAHR,CAnCJ,EAwCI,oBAAC,SAAD;AACI,IAAA,KAAK,EAAC,QADV;AAEI,IAAA,SAAS,EAAErC,OAAO,CAACgC,WAFvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIKhB,EAAE,CAACsB,QAJR,CAxCJ,EA8CI,oBAAC,SAAD;AACI,IAAA,KAAK,EAAC,QADV;AAEI,IAAA,SAAS,EAAEtC,OAAO,CAACgC,WAFvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIKhB,EAAE,CAACuB,QAJR,CA9CJ,EAoDK/B,aAAa,IAAIA,aAAa,CAACyB,QAAd,CAAuBlB,GAAvB,CACdmB,IAAI,IAAI;AACJ,QACI,CAAClB,EAAE,CAACwB,SAAH,CAAaC,IAAb,CACGC,CAAC,IAAIA,CAAC,KAAKR,IAAI,CAACA,IADnB,CADL,EAIE;AACE,aACI,oBAAC,SAAD;AACI,QAAA,GAAG,EAAEA,IAAI,CAACjB,GADd;AAEI,QAAA,KAAK,EAAC,QAFV;AAGI,QAAA,SAAS,EACLjB,OAAO,CAACgC,WAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AASH;;AACD,WAAOhB,EAAE,CAACwB,SAAH,CAAazB,GAAb,CACH,CAAC4B,EAAD,EAAKC,KAAL,KAAe;AACX,UACIV,IAAI,CAACA,IAAL,KAAcS,EADlB,EAEE;AACE;AACA,eACI,oBAAC,SAAD;AACI,UAAA,GAAG,EACCC,KAFR;AAII,UAAA,KAAK,EAAC,QAJV;AAKI,UAAA,SAAS,EACL5C,OAAO,CAACgC,WANhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WASI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UATJ,CADJ;AAaH;;AACD,aAAO,IAAP;AACH,KArBE,CAAP;AAuBH,GAxCa,CApDtB,CALJ,CAFR,CAhFJ,CADJ,CADJ,CADJ,CALJ,EAoMI,oBAAC,WAAD;AAAa,IAAA,SAAS,EAAEhC,OAAO,CAAC6C,OAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,eAAD;AACI,IAAA,SAAS,EAAC,KADd;AAEI,IAAA,KAAK,EAAEpC,SAAS,CAACK,IAAV,GAAiBL,SAAS,CAACK,IAAV,CAAeW,MAAhC,GAAyC,CAFpD;AAGI,IAAA,YAAY,EAAEC,gBAHlB;AAII,IAAA,mBAAmB,EAAEC,uBAJzB;AAKI,IAAA,IAAI,EAAErB,IALV;AAMI,IAAA,WAAW,EAAEF,WANjB;AAOI,IAAA,kBAAkB,EAAE,EAPxB;AAQI,IAAA,mBAAmB,EAAE;AACjB,oBAAc;AADG,KARzB;AAWI,IAAA,mBAAmB,EAAE;AACjB,oBAAc;AADG,KAXzB;AAcI,IAAA,gBAAgB,EAAC,EAdrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CApMJ,CADJ;AAyNH,CApQD;;AAqQA,eAAetB,UAAU,CAACc,MAAD,CAAV,CAAmBC,cAAnB,CAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport clsx from 'clsx';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { withStyles } from '@material-ui/styles';\r\nimport {\r\n    Card,\r\n    CardActions,\r\n    CardContent,\r\n    Checkbox,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableHead,\r\n    TableRow,\r\n    Typography,\r\n    TablePagination\r\n} from '@material-ui/core';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport ToolbarTable from './component/ToolbarTable/ToolbarTable';\r\nimport styles from './styles';\r\n\r\nconst PresencesTable = props => {\r\n    const { className, classes, presenceDetailClass } = props;\r\n    const [selectedUsers, setSelectedUsers] = useState([]);\r\n    const [rowsPerPage, setRowsPerPage] = useState(5);\r\n    const [page, setPage] = useState(0);\r\n    const { checkDateList, classById } = presenceDetailClass;\r\n\r\n    const handleSelectAll = event => {\r\n        let selectedUsers;\r\n        if (event.target.checked) {\r\n            selectedUsers = classById.dssv.map(sv => sv._id);\r\n        } else {\r\n            selectedUsers = [];\r\n        }\r\n        setSelectedUsers(selectedUsers);\r\n    };\r\n    const handleSelectOne = (event, id) => {\r\n        const selectedIndex = selectedUsers.indexOf(id);\r\n        let newSelectedUsers = [];\r\n        if (selectedIndex === -1) {\r\n            newSelectedUsers = newSelectedUsers.concat(selectedUsers, id);\r\n        } else if (selectedIndex === 0) {\r\n            newSelectedUsers = newSelectedUsers.concat(selectedUsers.slice(1));\r\n        } else if (selectedIndex === selectedUsers.length - 1) {\r\n            newSelectedUsers = newSelectedUsers.concat(\r\n                selectedUsers.slice(0, -1)\r\n            );\r\n        } else if (selectedIndex > 0) {\r\n            newSelectedUsers = newSelectedUsers.concat(\r\n                selectedUsers.slice(0, selectedIndex),\r\n                selectedUsers.slice(selectedIndex + 1)\r\n            );\r\n        }\r\n        setSelectedUsers(newSelectedUsers);\r\n    };\r\n    const handlePageChange = (event, page) => {\r\n        setPage(page);\r\n    };\r\n    const handleRowsPerPageChange = event => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n\r\n    return (\r\n        <Card className={clsx(classes.root, className)}>\r\n            <ToolbarTable\r\n                selectedUsers={selectedUsers}\r\n                //deleteUsers={deleteUsers}\r\n            />\r\n            <CardContent className={classes.content}>\r\n                <PerfectScrollbar>\r\n                    <div className={classes.inner}>\r\n                        <Table size=\"small\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell\r\n                                        rowSpan={2}\r\n                                        padding=\"checkbox\"\r\n                                        className={classes.borderTable}\r\n                                    >\r\n                                        <Checkbox\r\n                                            checked={\r\n                                                classById.dssv &&\r\n                                                selectedUsers.length ===\r\n                                                classById.dssv.length\r\n                                            }\r\n                                            color=\"primary\"\r\n                                            indeterminate={\r\n                                                selectedUsers.length > 0 &&\r\n                                                selectedUsers.length <\r\n                                                classById.dssv.length\r\n                                            }\r\n                                            onChange={handleSelectAll}\r\n                                        />\r\n                                    </TableCell>\r\n                                    <TableCell\r\n                                        rowSpan={2}\r\n                                        align=\"center\"\r\n                                        className={classes.borderTable}\r\n                                    >\r\n                                        Member code\r\n                                    </TableCell>\r\n                                    <TableCell\r\n                                        rowSpan={2}\r\n                                        className={classes.borderTable}\r\n                                    >\r\n                                        Name\r\n                                    </TableCell>\r\n                                    <TableCell\r\n                                        rowSpan={2}\r\n                                        align=\"center\"\r\n                                        className={classes.borderTable}\r\n                                    >\r\n                                        Birth date\r\n                                    </TableCell>\r\n                                    <TableCell\r\n                                        rowSpan={2}\r\n                                        align=\"center\"\r\n                                        className={classes.borderTable}\r\n                                    >\r\n                                        Gender\r\n                                    </TableCell>\r\n                                    {checkDateList && (\r\n                                        <TableCell\r\n                                            className={classes.borderTable}\r\n                                            colSpan={\r\n                                                checkDateList.dateList &&\r\n                                                checkDateList.dateList.length\r\n                                            }\r\n                                            align=\"center\"\r\n                                        >\r\n                                            Check date\r\n                                        </TableCell>\r\n                                    )}\r\n                                </TableRow>\r\n                                {checkDateList && (\r\n                                    <TableRow>\r\n                                        {checkDateList.dateList &&\r\n                                            checkDateList.dateList.map(date => (\r\n                                                <TableCell\r\n                                                    key={date._id}\r\n                                                    align=\"center\"\r\n                                                    className={\r\n                                                        classes.borderTable\r\n                                                    }\r\n                                                >\r\n                                                    {date.date}\r\n                                                </TableCell>\r\n                                            ))}\r\n                                    </TableRow>\r\n                                )}\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {classById.dssv &&\r\n                                    classById.dssv.slice(\r\n                                        page * rowsPerPage,\r\n                                        page * rowsPerPage + rowsPerPage\r\n                                    )\r\n                                    .map(sv => (\r\n                                        <TableRow\r\n                                            key={sv._id}\r\n                                            className={classes.tableRow}\r\n                                            hover\r\n                                            selected={\r\n                                                selectedUsers.indexOf(\r\n                                                    sv._id\r\n                                                ) !== -1\r\n                                            }\r\n                                        >\r\n                                            <TableCell\r\n                                                padding=\"checkbox\"\r\n                                                className={classes.borderTable}\r\n                                            >\r\n                                                <Checkbox\r\n                                                    checked={\r\n                                                        selectedUsers.indexOf(\r\n                                                            sv._id\r\n                                                        ) !== -1\r\n                                                    }\r\n                                                    color=\"primary\"\r\n                                                    onChange={event =>\r\n                                                        handleSelectOne(event, sv._id)\r\n                                                    }\r\n                                                    value=\"true\"\r\n                                                />\r\n                                            </TableCell>\r\n                                            <TableCell\r\n                                                align=\"center\"\r\n                                                className={classes.borderTable}\r\n                                            >\r\n                                                <Typography variant=\"body1\">\r\n                                                    {sv.maSV}\r\n                                                </Typography>\r\n                                            </TableCell>\r\n                                            <TableCell\r\n                                                className={classes.borderTable}\r\n                                            >\r\n                                                {sv.tenSV}\r\n                                            </TableCell>\r\n                                            <TableCell\r\n                                                align=\"center\"\r\n                                                className={classes.borderTable}\r\n                                            >\r\n                                                {sv.ngaysinh}\r\n                                            </TableCell>\r\n                                            <TableCell\r\n                                                align=\"center\"\r\n                                                className={classes.borderTable}\r\n                                            >\r\n                                                {sv.gioitinh}\r\n                                            </TableCell>\r\n                                            {checkDateList && checkDateList.dateList.map(\r\n                                                date => {\r\n                                                    if (\r\n                                                        !sv.checkDate.some(\r\n                                                            x => x === date.date\r\n                                                        )\r\n                                                    ) {\r\n                                                        return (\r\n                                                            <TableCell\r\n                                                                key={date._id}\r\n                                                                align=\"center\"\r\n                                                                className={\r\n                                                                    classes.borderTable\r\n                                                                }\r\n                                                            ></TableCell>\r\n                                                        );\r\n                                                    }\r\n                                                    return sv.checkDate.map(\r\n                                                        (kd, index) => {\r\n                                                            if (\r\n                                                                date.date === kd\r\n                                                            ) {\r\n                                                                //console.log(kd)\r\n                                                                return (\r\n                                                                    <TableCell\r\n                                                                        key={\r\n                                                                            index\r\n                                                                        }\r\n                                                                        align=\"center\"\r\n                                                                        className={\r\n                                                                            classes.borderTable\r\n                                                                        }\r\n                                                                    >\r\n                                                                        <CheckIcon />\r\n                                                                    </TableCell>\r\n                                                                );\r\n                                                            }\r\n                                                            return null;\r\n                                                        }\r\n                                                    );\r\n                                                }\r\n                                            )}\r\n                                        </TableRow>\r\n                                    ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </div>\r\n                </PerfectScrollbar>\r\n            </CardContent>\r\n            <CardActions className={classes.actions}>\r\n                <TablePagination\r\n                    component=\"div\"\r\n                    count={classById.dssv ? classById.dssv.length : 0}\r\n                    onChangePage={handlePageChange}\r\n                    onChangeRowsPerPage={handleRowsPerPageChange}\r\n                    page={page}\r\n                    rowsPerPage={rowsPerPage}\r\n                    rowsPerPageOptions={[]}\r\n                    backIconButtonProps={{\r\n                        'aria-label': 'previous page'\r\n                    }}\r\n                    nextIconButtonProps={{\r\n                        'aria-label': 'next page'\r\n                    }}\r\n                    labelRowsPerPage=\"\"\r\n                />\r\n            </CardActions>\r\n        </Card>\r\n    );\r\n};\r\nexport default withStyles(styles)(PresencesTable);\r\n"]},"metadata":{},"sourceType":"module"}