{"ast":null,"code":"import excel from 'exceljs';\nexport default (data => {\n  const workbook = new excel.Workbook();\n  workbook.creator = 'Me';\n  workbook.lastModifiedBy = 'Me';\n  workbook.created = new Date();\n  workbook.modified = new Date();\n  var sheet1 = workbook.addWorksheet('Sheet1');\n  sheet1.mergeCells('C1', 'J2');\n  sheet1.getCell('C1').value = 'List member presence';\n  sheet1.getCell('C1').alignment = {\n    vertical: 'middle',\n    horizontal: 'center'\n  };\n  sheet1.getCell('C1').font = {\n    name: 'Comic Sans MS',\n    family: 4,\n    size: 16,\n    underline: true,\n    bold: true\n  };\n  sheet1.columns = [{\n    header: 'Ma sinh vien',\n    key: 'maSV',\n    width: 20\n  }, {\n    header: 'Ten sinh vien',\n    key: 'tenSV',\n    width: 30\n  }, {\n    header: 'Ngay sinh',\n    key: 'ngaysinh',\n    width: 20\n  }, {\n    header: 'Gioi tinh',\n    key: 'gioitinh',\n    width: 10\n  }];\n  data.forEach(sv => {\n    sheet1.addRow({\n      maSV: sv.maSV,\n      tenSV: sv.tenSV,\n      ngaysinh: sv.ngaysinh,\n      gioitinh: sv.gioitinh\n    });\n  });\n  workbook.xlsx.writeBuffer().then(function (data) {\n    const blob = new Blob([data], {\n      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n    });\n    const url = window.URL.createObjectURL(blob);\n    const anchor = document.createElement('a');\n    anchor.href = url;\n    anchor.download = 'download.xlsx';\n    anchor.click();\n    window.URL.revokeObjectURL(url);\n  });\n});","map":{"version":3,"sources":["E:\\react-material\\front-end\\src\\helpers\\exportToExcel.js"],"names":["excel","data","workbook","Workbook","creator","lastModifiedBy","created","Date","modified","sheet1","addWorksheet","mergeCells","getCell","value","alignment","vertical","horizontal","font","name","family","size","underline","bold","columns","header","key","width","forEach","sv","addRow","maSV","tenSV","ngaysinh","gioitinh","xlsx","writeBuffer","then","blob","Blob","type","url","window","URL","createObjectURL","anchor","document","createElement","href","download","click","revokeObjectURL"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,SAAlB;AAEA,gBAAeC,IAAI,IAAI;AACnB,QAAMC,QAAQ,GAAG,IAAIF,KAAK,CAACG,QAAV,EAAjB;AACAD,EAAAA,QAAQ,CAACE,OAAT,GAAmB,IAAnB;AACAF,EAAAA,QAAQ,CAACG,cAAT,GAA0B,IAA1B;AACAH,EAAAA,QAAQ,CAACI,OAAT,GAAmB,IAAIC,IAAJ,EAAnB;AACAL,EAAAA,QAAQ,CAACM,QAAT,GAAoB,IAAID,IAAJ,EAApB;AAEA,MAAIE,MAAM,GAAGP,QAAQ,CAACQ,YAAT,CAAsB,QAAtB,CAAb;AACAD,EAAAA,MAAM,CAACE,UAAP,CAAkB,IAAlB,EAAwB,IAAxB;AACAF,EAAAA,MAAM,CAACG,OAAP,CAAe,IAAf,EAAqBC,KAArB,GAA6B,sBAA7B;AACAJ,EAAAA,MAAM,CAACG,OAAP,CAAe,IAAf,EAAqBE,SAArB,GAAiC;AAC7BC,IAAAA,QAAQ,EAAE,QADmB;AAE7BC,IAAAA,UAAU,EAAE;AAFiB,GAAjC;AAIAP,EAAAA,MAAM,CAACG,OAAP,CAAe,IAAf,EAAqBK,IAArB,GAA4B;AACxBC,IAAAA,IAAI,EAAE,eADkB;AAExBC,IAAAA,MAAM,EAAE,CAFgB;AAGxBC,IAAAA,IAAI,EAAE,EAHkB;AAIxBC,IAAAA,SAAS,EAAE,IAJa;AAKxBC,IAAAA,IAAI,EAAE;AALkB,GAA5B;AAQAb,EAAAA,MAAM,CAACc,OAAP,GAAiB,CACb;AAAEC,IAAAA,MAAM,EAAE,cAAV;AAA0BC,IAAAA,GAAG,EAAE,MAA/B;AAAuCC,IAAAA,KAAK,EAAE;AAA9C,GADa,EAEb;AAAEF,IAAAA,MAAM,EAAE,eAAV;AAA2BC,IAAAA,GAAG,EAAE,OAAhC;AAAyCC,IAAAA,KAAK,EAAE;AAAhD,GAFa,EAGb;AAAEF,IAAAA,MAAM,EAAE,WAAV;AAAuBC,IAAAA,GAAG,EAAE,UAA5B;AAAwCC,IAAAA,KAAK,EAAE;AAA/C,GAHa,EAIb;AAAEF,IAAAA,MAAM,EAAE,WAAV;AAAuBC,IAAAA,GAAG,EAAE,UAA5B;AAAwCC,IAAAA,KAAK,EAAE;AAA/C,GAJa,CAAjB;AAOAzB,EAAAA,IAAI,CAAC0B,OAAL,CAAaC,EAAE,IAAI;AACfnB,IAAAA,MAAM,CAACoB,MAAP,CAAc;AACVC,MAAAA,IAAI,EAAEF,EAAE,CAACE,IADC;AAEVC,MAAAA,KAAK,EAAEH,EAAE,CAACG,KAFA;AAGVC,MAAAA,QAAQ,EAAEJ,EAAE,CAACI,QAHH;AAIVC,MAAAA,QAAQ,EAAEL,EAAE,CAACK;AAJH,KAAd;AAMH,GAPD;AASA/B,EAAAA,QAAQ,CAACgC,IAAT,CAAcC,WAAd,GAA4BC,IAA5B,CAAiC,UAASnC,IAAT,EAAe;AAC5C,UAAMoC,IAAI,GAAG,IAAIC,IAAJ,CAAS,CAACrC,IAAD,CAAT,EAAiB;AAC1BsC,MAAAA,IAAI,EACA;AAFsB,KAAjB,CAAb;AAIA,UAAMC,GAAG,GAAGC,MAAM,CAACC,GAAP,CAAWC,eAAX,CAA2BN,IAA3B,CAAZ;AACA,UAAMO,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,GAAvB,CAAf;AACAF,IAAAA,MAAM,CAACG,IAAP,GAAcP,GAAd;AACAI,IAAAA,MAAM,CAACI,QAAP,GAAkB,eAAlB;AACAJ,IAAAA,MAAM,CAACK,KAAP;AACAR,IAAAA,MAAM,CAACC,GAAP,CAAWQ,eAAX,CAA2BV,GAA3B;AACH,GAXD;AAYH,CAlDD","sourcesContent":["import excel from 'exceljs';\r\n\r\nexport default data => {\r\n    const workbook = new excel.Workbook();\r\n    workbook.creator = 'Me';\r\n    workbook.lastModifiedBy = 'Me';\r\n    workbook.created = new Date();\r\n    workbook.modified = new Date();\r\n\r\n    var sheet1 = workbook.addWorksheet('Sheet1');\r\n    sheet1.mergeCells('C1', 'J2');\r\n    sheet1.getCell('C1').value = 'List member presence';\r\n    sheet1.getCell('C1').alignment = {\r\n        vertical: 'middle',\r\n        horizontal: 'center'\r\n    };\r\n    sheet1.getCell('C1').font = {\r\n        name: 'Comic Sans MS',\r\n        family: 4,\r\n        size: 16,\r\n        underline: true,\r\n        bold: true\r\n    };\r\n\r\n    sheet1.columns = [\r\n        { header: 'Ma sinh vien' ,key: 'maSV', width: 20 },\r\n        { header: 'Ten sinh vien', key: 'tenSV', width: 30 },\r\n        { header: 'Ngay sinh', key: 'ngaysinh', width: 20 },\r\n        { header: 'Gioi tinh', key: 'gioitinh', width: 10 }\r\n    ];\r\n\r\n    data.forEach(sv => {\r\n        sheet1.addRow({\r\n            maSV: sv.maSV,\r\n            tenSV: sv.tenSV,\r\n            ngaysinh: sv.ngaysinh,\r\n            gioitinh: sv.gioitinh\r\n        });\r\n    });\r\n\r\n    workbook.xlsx.writeBuffer().then(function(data) {\r\n        const blob = new Blob([data], {\r\n            type:\r\n                'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\r\n        });\r\n        const url = window.URL.createObjectURL(blob);\r\n        const anchor = document.createElement('a');\r\n        anchor.href = url;\r\n        anchor.download = 'download.xlsx';\r\n        anchor.click();\r\n        window.URL.revokeObjectURL(url);\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}