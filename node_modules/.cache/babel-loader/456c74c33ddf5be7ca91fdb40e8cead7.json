{"ast":null,"code":"var _jsxFileName = \"E:\\\\react-material\\\\front-end\\\\src\\\\views\\\\UserList\\\\components\\\\UsersTable\\\\UsersTable.js\";\nimport React, { Component } from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { withStyles } from '@material-ui/styles';\nimport { Card, CardActions, CardContent, Avatar, Checkbox, Table, TableBody, TableCell, TableHead, TableRow, Typography, TablePagination } from '@material-ui/core';\nimport { getInitials } from 'helpers';\nimport { ToolbarTable } from './components';\nimport styles from './styles';\n\nclass UsersTable extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSelectAll = event => {\n      const users = this.props.users;\n      let selectedUsers;\n\n      if (event.target.checked) {\n        selectedUsers = users.map(user => user._id);\n      } else {\n        selectedUsers = [];\n      }\n\n      this.setState({\n        selectedUsers: selectedUsers\n      });\n      console.log(selectedUsers);\n    };\n\n    this.handleSelectOne = (event, id) => {\n      const selectedIndex = this.state.selectedUsers.indexOf(id);\n      let newSelectedUsers = [];\n\n      if (selectedIndex === -1) {\n        newSelectedUsers = newSelectedUsers.concat(this.state.selectedUsers, id);\n      } else if (selectedIndex === 0) {\n        newSelectedUsers = newSelectedUsers.concat(this.state.selectedUsers.slice(1));\n      } else if (selectedIndex === this.state.selectedUsers.length - 1) {\n        newSelectedUsers = newSelectedUsers.concat(this.state.selectedUsers.slice(0, -1));\n      } else if (selectedIndex > 0) {\n        newSelectedUsers = newSelectedUsers.concat(this.state.selectedUsers.slice(0, selectedIndex), this.state.selectedUsers.slice(selectedIndex + 1));\n      }\n\n      this.setState({\n        selectedUsers: newSelectedUsers\n      });\n    };\n\n    this.handlePageChange = (event, page) => {\n      this.setState({\n        page: page\n      });\n    };\n\n    this.handleRowsPerPageChange = event => {\n      this.setState({\n        rowsPerPage: +event.target.value,\n        page: 0\n      });\n    };\n\n    this.state = {\n      selectedUsers: [],\n      rowsPerPage: this.props.users.length,\n      page: 0\n    };\n  }\n\n  render() {\n    const _this$props = this.props,\n          className = _this$props.className,\n          users = _this$props.users,\n          classes = _this$props.classes,\n          deleteUsers = _this$props.deleteUsers,\n          setShowStatusUsers = _this$props.setShowStatusUsers;\n    const _this$state = this.state,\n          selectedUsers = _this$state.selectedUsers,\n          page = _this$state.page,\n          rowsPerPage = _this$state.rowsPerPage;\n    let all = [1, users.length];\n    return React.createElement(Card, {\n      className: clsx(classes.root, className),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(CardContent, {\n      className: classes.content,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(PerfectScrollbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(ToolbarTable, {\n      numSelected: selectedUsers.length,\n      deleteUsers: deleteUsers,\n      selectedUsers: selectedUsers,\n      setShowStatusUsers: setShowStatusUsers,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: classes.inner,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(Table, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(TableHead, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(TableRow, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(TableCell, {\n      padding: \"checkbox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(Checkbox, {\n      checked: selectedUsers.length === users.length,\n      color: \"primary\",\n      indeterminate: selectedUsers.length > 0 && selectedUsers.length < users.length,\n      onChange: this.handleSelectAll,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    })), React.createElement(TableCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, \"Name\"), React.createElement(TableCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, \"M\\xE3 user\"), React.createElement(TableCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \"Email\"), React.createElement(TableCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, \"Phone\"), React.createElement(TableCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, \"Registration date\"))), React.createElement(TableBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, users.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(user => React.createElement(TableRow, {\n      className: classes.tableRow,\n      hover: true,\n      key: user._id,\n      selected: selectedUsers.indexOf(user._id) !== -1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(TableCell, {\n      padding: \"checkbox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(Checkbox, {\n      checked: selectedUsers.indexOf(user._id) !== -1,\n      color: \"primary\",\n      onChange: event => this.handleSelectOne(event, user._id),\n      value: \"true\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    })), React.createElement(TableCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.nameContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(Avatar, {\n      className: classes.avatar,\n      src: user.avatar ? user.avatar : \"//www.gravatar.com/avatar/f8aef9003205946523250a062b54bbb6?s=200&r=pg&d=mm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, getInitials(user.name)), React.createElement(Typography, {\n      variant: \"body1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, user.name))), React.createElement(TableCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, user.maGV), React.createElement(TableCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, user.email), React.createElement(TableCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, user.sdt), React.createElement(TableCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, moment(user.ngaydangki).format(\"DD/MM/YYYY\"))))))))), users.length === 0 ? React.createElement(Typography, {\n      variant: \"subtitle2\",\n      style: {\n        textAlign: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, \"Ch\\u01B0a c\\xF3 danh s\\xE1ch user\") : React.createElement(CardActions, {\n      className: classes.actions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, React.createElement(TablePagination, {\n      component: \"div\",\n      count: users.length,\n      onChangePage: this.handlePageChange,\n      onChangeRowsPerPage: this.handleRowsPerPageChange,\n      page: page,\n      rowsPerPage: rowsPerPage,\n      rowsPerPageOptions: all,\n      backIconButtonProps: {\n        'aria-label': 'previous page'\n      },\n      nextIconButtonProps: {\n        'aria-label': 'next page'\n      },\n      labelRowsPerPage: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    })));\n  }\n\n}\n\nUsersTable.propTypes = {\n  className: PropTypes.string,\n  users: PropTypes.array.isRequired\n};\nexport default withStyles(styles)(UsersTable);","map":{"version":3,"sources":["E:\\react-material\\front-end\\src\\views\\UserList\\components\\UsersTable\\UsersTable.js"],"names":["React","Component","clsx","PropTypes","moment","PerfectScrollbar","withStyles","Card","CardActions","CardContent","Avatar","Checkbox","Table","TableBody","TableCell","TableHead","TableRow","Typography","TablePagination","getInitials","ToolbarTable","styles","UsersTable","constructor","props","handleSelectAll","event","users","selectedUsers","target","checked","map","user","_id","setState","console","log","handleSelectOne","id","selectedIndex","state","indexOf","newSelectedUsers","concat","slice","length","handlePageChange","page","handleRowsPerPageChange","rowsPerPage","value","render","className","classes","deleteUsers","setShowStatusUsers","all","root","content","inner","tableRow","nameContainer","avatar","name","maGV","email","sdt","ngaydangki","format","textAlign","actions","propTypes","string","array","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { withStyles } from '@material-ui/styles';\nimport {\n    Card,\n    CardActions,\n    CardContent,\n    Avatar,\n    Checkbox,\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableRow,\n    Typography,\n    TablePagination\n} from '@material-ui/core';\n\nimport { getInitials } from 'helpers';\nimport { ToolbarTable } from './components';\nimport styles from './styles';\n\nclass UsersTable extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedUsers: [],\n            rowsPerPage: this.props.users.length,\n            page: 0\n        };\n    }\n    handleSelectAll = event => {\n        const { users } = this.props;\n        let selectedUsers;\n        if (event.target.checked) {\n            selectedUsers = users.map(user => user._id);\n        } else {\n            selectedUsers = [];\n        }\n        this.setState({\n            selectedUsers: selectedUsers\n        });\n        console.log(selectedUsers);\n    };\n    handleSelectOne = (event, id) => {\n        const selectedIndex = this.state.selectedUsers.indexOf(id);\n        let newSelectedUsers = [];\n\n        if (selectedIndex === -1) {\n            newSelectedUsers = newSelectedUsers.concat(\n                this.state.selectedUsers,\n                id\n            );\n        } else if (selectedIndex === 0) {\n            newSelectedUsers = newSelectedUsers.concat(\n                this.state.selectedUsers.slice(1)\n            );\n        } else if (selectedIndex === this.state.selectedUsers.length - 1) {\n            newSelectedUsers = newSelectedUsers.concat(\n                this.state.selectedUsers.slice(0, -1)\n            );\n        } else if (selectedIndex > 0) {\n            newSelectedUsers = newSelectedUsers.concat(\n                this.state.selectedUsers.slice(0, selectedIndex),\n                this.state.selectedUsers.slice(selectedIndex + 1)\n            );\n        }\n        this.setState({\n            selectedUsers: newSelectedUsers\n        });\n    };\n    // componentDidUpdate(preProps) {\n    //     if(preProps.users.length !== this.props.users)\n    //     {\n    //         this.setState({\n    //             selectedUsers: []\n    //         })\n    //     }\n    // }\n\n    handlePageChange = (event, page) => {\n        this.setState({\n            page: page\n        });\n    };\n    handleRowsPerPageChange = event => {\n        this.setState({\n            rowsPerPage: +event.target.value,\n            page: 0\n        });\n    };\n    render() {\n        const {\n            className,\n            users,\n            classes,\n            deleteUsers,\n            setShowStatusUsers\n        } = this.props;\n        const { selectedUsers, page, rowsPerPage } = this.state;\n        let all = [1, users.length];\n        return (\n            <Card className={clsx(classes.root, className)}>\n                <CardContent className={classes.content}>\n                    <PerfectScrollbar>\n                        <ToolbarTable\n                            numSelected={selectedUsers.length}\n                            deleteUsers={deleteUsers}\n                            selectedUsers={selectedUsers}\n                            setShowStatusUsers={setShowStatusUsers}\n                        />\n                        <div className={classes.inner}>\n                            <Table>\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell padding=\"checkbox\">\n                                            <Checkbox\n                                                checked={\n                                                    selectedUsers.length ===\n                                                    users.length\n                                                }\n                                                color=\"primary\"\n                                                indeterminate={\n                                                    selectedUsers.length > 0 &&\n                                                    selectedUsers.length <\n                                                        users.length\n                                                }\n                                                onChange={this.handleSelectAll}\n                                            />\n                                        </TableCell>\n                                        <TableCell>Name</TableCell>\n                                        <TableCell>Mã user</TableCell>\n                                        <TableCell>Email</TableCell>\n                                        <TableCell>Phone</TableCell>\n                                        <TableCell>Registration date</TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {users\n                                        .slice(\n                                            page * rowsPerPage,\n                                            page * rowsPerPage + rowsPerPage\n                                        )\n                                        .map(user => (\n                                            <TableRow\n                                                className={classes.tableRow}\n                                                hover\n                                                key={user._id}\n                                                selected={\n                                                    selectedUsers.indexOf(\n                                                        user._id\n                                                    ) !== -1\n                                                }\n                                            >\n                                                <TableCell padding=\"checkbox\">\n                                                    <Checkbox\n                                                        checked={\n                                                            selectedUsers.indexOf(\n                                                                user._id\n                                                            ) !== -1\n                                                        }\n                                                        color=\"primary\"\n                                                        onChange={event =>\n                                                            this.handleSelectOne(\n                                                                event,\n                                                                user._id\n                                                            )\n                                                        }\n                                                        value=\"true\"\n                                                    />\n                                                </TableCell>\n                                                <TableCell>\n                                                    <div\n                                                        className={\n                                                            classes.nameContainer\n                                                        }\n                                                    >\n                                                        <Avatar\n                                                            className={\n                                                                classes.avatar\n                                                            }\n                                                            src={\n                                                                user.avatar\n                                                                    ? user.avatar\n                                                                    : `//www.gravatar.com/avatar/f8aef9003205946523250a062b54bbb6?s=200&r=pg&d=mm`\n                                                            }\n                                                        >\n                                                            {getInitials(\n                                                                user.name\n                                                            )}\n                                                        </Avatar>\n                                                        <Typography variant=\"body1\">\n                                                            {user.name}\n                                                        </Typography>\n                                                    </div>\n                                                </TableCell>\n                                                <TableCell>\n                                                    {user.maGV}\n                                                </TableCell>\n                                                <TableCell>\n                                                    {user.email}\n                                                </TableCell>\n                                                <TableCell>\n                                                    {user.sdt}\n                                                </TableCell>\n                                                <TableCell>\n                                                    {moment(user.ngaydangki).format(\"DD/MM/YYYY\")}\n                                                </TableCell>\n                                            </TableRow>\n                                        ))}\n                                </TableBody>\n                            </Table>\n                        </div>\n                    </PerfectScrollbar>\n                </CardContent>\n                {users.length === 0 ? (\n                    <Typography\n                        variant=\"subtitle2\"\n                        style={{ textAlign: 'center' }}\n                    >\n                        Chưa có danh sách user\n                    </Typography>\n                ) : (\n                    <CardActions className={classes.actions}>\n                        <TablePagination\n                            component=\"div\"\n                            count={users.length}\n                            onChangePage={this.handlePageChange}\n                            onChangeRowsPerPage={this.handleRowsPerPageChange}\n                            page={page}\n                            rowsPerPage={rowsPerPage}\n                            rowsPerPageOptions={all}\n                            backIconButtonProps={{\n                                'aria-label': 'previous page'\n                            }}\n                            nextIconButtonProps={{\n                                'aria-label': 'next page'\n                            }}\n                            labelRowsPerPage=\"\"\n                        />\n                    </CardActions>\n                )}\n            </Card>\n        );\n    }\n}\n\nUsersTable.propTypes = {\n    className: PropTypes.string,\n    users: PropTypes.array.isRequired\n};\n\nexport default withStyles(styles)(UsersTable);\n"]},"metadata":{},"sourceType":"module"}