{"ast":null,"code":"import _slicedToArray from \"E:\\\\react-material\\\\front-end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"E:\\\\react-material\\\\front-end\\\\src\\\\layouts\\\\Main\\\\Main.js\";\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport jwt_decode from 'jwt-decode';\nimport { withStyles, useTheme } from '@material-ui/styles';\nimport { useMediaQuery } from '@material-ui/core';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { Sidebar, Topbar, Footer } from './components';\nimport { getInfoAccount } from './../../actions/account';\nimport { logout } from './../../actions/authentication';\nimport { closeNotify } from './../../actions/notify';\nimport styles from './styles';\n\nconst Main = props => {\n  const children = props.children,\n        logout = props.logout,\n        classes = props.classes,\n        history = props.history,\n        getInfoAccount = props.getInfoAccount,\n        account = props.account,\n        auth = props.auth,\n        showNotify = props.showNotify,\n        closeNotify = props.closeNotify;\n  useEffect(() => {\n    if (localStorage.jwtToken) {\n      const decode = jwt_decode(localStorage.jwtToken);\n      const currentTime = Date.now() / 1000;\n\n      if (decode.exp < currentTime) {\n        logout(history);\n      }\n    }\n\n    if (!localStorage.jwtToken) {\n      history.push('/sign-in');\n    }\n  });\n  useEffect(() => {\n    if (localStorage.jwtToken) {\n      const decode = jwt_decode(localStorage.jwtToken);\n      getInfoAccount(decode._id);\n    }\n  }, [getInfoAccount]);\n  const theme = useTheme();\n  const isDesktop = useMediaQuery(theme.breakpoints.up('lg'), {\n    defaultMatches: true\n  });\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        openSidebar = _useState2[0],\n        setOpenSidebar = _useState2[1];\n\n  const handleSidebarOpen = () => {\n    setOpenSidebar(true);\n  };\n\n  const handleSidebarClose = () => {\n    setOpenSidebar(false);\n  };\n\n  const setCloseNotify = () => {\n    closeNotify();\n  };\n\n  const shouldOpenSidebar = isDesktop ? true : openSidebar;\n  return React.createElement(\"div\", {\n    className: clsx({\n      [classes.root]: true,\n      [classes.shiftContent]: isDesktop\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(Notifies, {\n    variant: auth.isSuccess ? 'success' : 'error',\n    message: auth.message,\n    openNotify: auth.isSuccess === null ? false : showNotify,\n    setCloseNotify: setCloseNotify,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }), React.createElement(Topbar, {\n    onSidebarOpen: handleSidebarOpen,\n    logout: logout,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }), React.createElement(Sidebar, {\n    onClose: handleSidebarClose,\n    open: shouldOpenSidebar,\n    variant: isDesktop ? 'persistent' : 'temporary',\n    logout: logout,\n    account: account,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }), React.createElement(\"main\", {\n    className: classes.content,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, children, React.createElement(Footer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  })));\n};\n\nMain.propTypes = {\n  children: PropTypes.node,\n  logout: PropTypes.func\n};\n\nconst mapStateToProps = state => ({\n  account: state.account,\n  auth: state.auth,\n  showNotify: state.showNotify.isShow\n});\n\nexport default connect(mapStateToProps, {\n  logout,\n  getInfoAccount,\n  closeNotify\n})(withRouter(withStyles(styles)(Main)));","map":{"version":3,"sources":["E:\\react-material\\front-end\\src\\layouts\\Main\\Main.js"],"names":["React","useState","useEffect","PropTypes","clsx","jwt_decode","withStyles","useTheme","useMediaQuery","connect","withRouter","Sidebar","Topbar","Footer","getInfoAccount","logout","closeNotify","styles","Main","props","children","classes","history","account","auth","showNotify","localStorage","jwtToken","decode","currentTime","Date","now","exp","push","_id","theme","isDesktop","breakpoints","up","defaultMatches","openSidebar","setOpenSidebar","handleSidebarOpen","handleSidebarClose","setCloseNotify","shouldOpenSidebar","root","shiftContent","isSuccess","message","content","propTypes","node","func","mapStateToProps","state","isShow"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport jwt_decode from 'jwt-decode';\nimport { withStyles, useTheme } from '@material-ui/styles';\nimport { useMediaQuery } from '@material-ui/core';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport { Sidebar, Topbar, Footer } from './components';\nimport { getInfoAccount } from './../../actions/account';\nimport { logout } from './../../actions/authentication';\nimport { closeNotify } from './../../actions/notify';\nimport styles from './styles';\n\nconst Main = props => {\n    const {\n        children,\n        logout,\n        classes,\n        history,\n        getInfoAccount,\n        account,\n        auth,\n        showNotify,\n        closeNotify\n    } = props;\n\n    useEffect(() => {\n        if (localStorage.jwtToken) {\n            const decode = jwt_decode(localStorage.jwtToken);\n            const currentTime = Date.now() / 1000;\n            if (decode.exp < currentTime) {\n                logout(history);\n            }\n        }\n        if (!localStorage.jwtToken) {\n            history.push('/sign-in');\n        }\n    });\n    useEffect(() => {\n        if (localStorage.jwtToken) {\n            const decode = jwt_decode(localStorage.jwtToken);\n            getInfoAccount(decode._id);\n        }\n    }, [getInfoAccount]);\n\n    const theme = useTheme();\n    const isDesktop = useMediaQuery(theme.breakpoints.up('lg'), {\n        defaultMatches: true\n    });\n\n    const [openSidebar, setOpenSidebar] = useState(false);\n\n    const handleSidebarOpen = () => {\n        setOpenSidebar(true);\n    };\n\n    const handleSidebarClose = () => {\n        setOpenSidebar(false);\n    };\n\n    const setCloseNotify = () => {\n        closeNotify();\n    };\n\n    const shouldOpenSidebar = isDesktop ? true : openSidebar;\n    return (\n        <div\n            className={clsx({\n                [classes.root]: true,\n                [classes.shiftContent]: isDesktop\n            })}\n        >\n            <Notifies\n                variant={auth.isSuccess ? 'success' : 'error'}\n                message={auth.message}\n                openNotify={auth.isSuccess === null ? false : showNotify}\n                setCloseNotify={setCloseNotify}\n            />\n            <Topbar onSidebarOpen={handleSidebarOpen} logout={logout} />\n            <Sidebar\n                onClose={handleSidebarClose}\n                open={shouldOpenSidebar}\n                variant={isDesktop ? 'persistent' : 'temporary'}\n                logout={logout}\n                account={account}\n            />\n            <main className={classes.content}>\n                {children}\n                <Footer />\n            </main>\n        </div>\n    );\n};\n\nMain.propTypes = {\n    children: PropTypes.node,\n    logout: PropTypes.func\n};\nconst mapStateToProps = state => ({\n    account: state.account,\n    auth: state.auth,\n    showNotify: state.showNotify.isShow\n});\nexport default connect(\n    mapStateToProps,\n    { logout, getInfoAccount, closeNotify }\n)(withRouter(withStyles(styles)(Main)));\n"]},"metadata":{},"sourceType":"module"}