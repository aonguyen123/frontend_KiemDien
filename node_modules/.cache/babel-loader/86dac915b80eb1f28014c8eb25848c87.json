{"ast":null,"code":"var _jsxFileName = \"E:\\\\react-material\\\\front-end\\\\src\\\\views\\\\UserList\\\\components\\\\UsersTable\\\\UsersTable.js\";\nimport React, { Component } from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { withStyles } from '@material-ui/styles';\nimport { Card, CardActions, CardContent, Avatar, Checkbox, Table, TableBody, TableCell, TableHead, TableRow, Typography, TablePagination } from '@material-ui/core';\nimport { getInitials } from 'helpers';\nimport { ToolbarTable } from './components';\nimport { LoadingCenter, StatusBullet } from 'components';\nimport { URI } from './../../../../constants/types';\nimport styles from './styles';\nconst statusColors = {\n  1: 'success',\n  2: 'info',\n  0: 'danger'\n};\n\nclass UsersTable extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSelectAll = event => {\n      const users = this.props.users;\n      let selectedUsers;\n\n      if (event.target.checked) {\n        selectedUsers = users.map(user => user._id);\n      } else {\n        selectedUsers = [];\n      }\n\n      this.setState({\n        selectedUsers: selectedUsers\n      });\n    };\n\n    this.handleSelectOne = (event, id) => {\n      const selectedIndex = this.state.selectedUsers.indexOf(id);\n      let newSelectedUsers = [];\n\n      if (selectedIndex === -1) {\n        newSelectedUsers = newSelectedUsers.concat(this.state.selectedUsers, id);\n      } else if (selectedIndex === 0) {\n        newSelectedUsers = newSelectedUsers.concat(this.state.selectedUsers.slice(1));\n      } else if (selectedIndex === this.state.selectedUsers.length - 1) {\n        newSelectedUsers = newSelectedUsers.concat(this.state.selectedUsers.slice(0, -1));\n      } else if (selectedIndex > 0) {\n        newSelectedUsers = newSelectedUsers.concat(this.state.selectedUsers.slice(0, selectedIndex), this.state.selectedUsers.slice(selectedIndex + 1));\n      }\n\n      this.setState({\n        selectedUsers: newSelectedUsers\n      });\n    };\n\n    this.loadingTable = () => {\n      this.setState({\n        loadingTable: true\n      });\n    };\n\n    this.handlePageChange = (event, page) => {\n      this.setState({\n        page: page\n      });\n    };\n\n    this.handleRowsPerPageChange = event => {\n      this.setState({\n        rowsPerPage: +event.target.value,\n        page: 0\n      });\n    };\n\n    this.state = {\n      selectedUsers: [],\n      rowsPerPage: 5,\n      page: 0,\n      loadingTable: false\n    };\n  }\n\n  componentDidUpdate(preProps) {\n    if (preProps.users.length !== this.props.users.length) {\n      this.setState({\n        selectedUsers: [],\n        loadingTable: false\n      });\n    }\n  }\n\n  render() {\n    const _this$props = this.props,\n          className = _this$props.className,\n          users = _this$props.users,\n          classes = _this$props.classes,\n          deleteUsers = _this$props.deleteUsers;\n    const _this$state = this.state,\n          selectedUsers = _this$state.selectedUsers,\n          page = _this$state.page,\n          rowsPerPage = _this$state.rowsPerPage,\n          loadingTable = _this$state.loadingTable;\n\n    if (loadingTable) {\n      return React.createElement(LoadingCenter, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(Card, {\n      className: clsx(classes.root, className),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(CardContent, {\n      className: classes.content,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(PerfectScrollbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(ToolbarTable, {\n      numSelected: selectedUsers.length,\n      deleteUsers: deleteUsers,\n      selectedUsers: selectedUsers,\n      loadingTable: () => this.loadingTable(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: classes.inner,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(Table, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(TableHead, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(TableRow, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(TableCell, {\n      padding: \"checkbox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(Checkbox, {\n      checked: selectedUsers.length === users.length,\n      color: \"primary\",\n      indeterminate: selectedUsers.length > 0 && selectedUsers.length < users.length,\n      onChange: this.handleSelectAll,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    })), React.createElement(TableCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"Name\"), React.createElement(TableCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"Email\"), React.createElement(TableCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"Phone\"), React.createElement(TableCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \"Gender\"), React.createElement(TableCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, \"Status\"), React.createElement(TableCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, \"Registration date\"))), React.createElement(TableBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, users.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(user => React.createElement(TableRow, {\n      className: classes.tableRow,\n      hover: true,\n      key: user._id,\n      selected: selectedUsers.indexOf(user._id) !== -1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, React.createElement(TableCell, {\n      padding: \"checkbox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, React.createElement(Checkbox, {\n      checked: selectedUsers.indexOf(user._id) !== -1,\n      color: \"primary\",\n      onChange: event => this.handleSelectOne(event, user._id),\n      value: \"true\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    })), React.createElement(TableCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.nameContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, React.createElement(Avatar, {\n      className: classes.avatar,\n      src: user.avatar ? \"\".concat(URI, \"/getAvatar/\").concat(user.avatar) : \"//www.gravatar.com/avatar/f8aef9003205946523250a062b54bbb6?s=200&r=pg&d=mm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, getInitials(user.name)), React.createElement(Typography, {\n      variant: \"body1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, user.name))), React.createElement(TableCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, user.email), React.createElement(TableCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, user.sdt), React.createElement(TableCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, user.gioitinh ? \"Nam\" : \"N\\u1EEF\"), React.createElement(TableCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.statusContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, React.createElement(StatusBullet, {\n      className: classes.status,\n      color: statusColors[user.status],\n      size: \"sm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }), user.status === 1 ? 'Completed' : user.status === 2 ? 'Missing' : 'Incomplete')), React.createElement(TableCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, user.ngaydangki)))))))), users.length === 0 ? React.createElement(Typography, {\n      variant: \"subtitle2\",\n      style: {\n        textAlign: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }, \"User not found\") : React.createElement(CardActions, {\n      className: classes.actions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, React.createElement(TablePagination, {\n      component: \"div\",\n      count: users.length,\n      onChangePage: this.handlePageChange,\n      onChangeRowsPerPage: this.handleRowsPerPageChange,\n      page: page,\n      rowsPerPage: rowsPerPage,\n      rowsPerPageOptions: [],\n      backIconButtonProps: {\n        'aria-label': 'previous page'\n      },\n      nextIconButtonProps: {\n        'aria-label': 'next page'\n      },\n      labelRowsPerPage: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    })));\n  }\n\n}\n\nUsersTable.propTypes = {\n  className: PropTypes.string,\n  users: PropTypes.array.isRequired\n};\nexport default withStyles(styles)(UsersTable);","map":{"version":3,"sources":["E:\\react-material\\front-end\\src\\views\\UserList\\components\\UsersTable\\UsersTable.js"],"names":["React","Component","clsx","PropTypes","PerfectScrollbar","withStyles","Card","CardActions","CardContent","Avatar","Checkbox","Table","TableBody","TableCell","TableHead","TableRow","Typography","TablePagination","getInitials","ToolbarTable","LoadingCenter","StatusBullet","URI","styles","statusColors","UsersTable","constructor","props","handleSelectAll","event","users","selectedUsers","target","checked","map","user","_id","setState","handleSelectOne","id","selectedIndex","state","indexOf","newSelectedUsers","concat","slice","length","loadingTable","handlePageChange","page","handleRowsPerPageChange","rowsPerPage","value","componentDidUpdate","preProps","render","className","classes","deleteUsers","root","content","inner","tableRow","nameContainer","avatar","name","email","sdt","gioitinh","statusContainer","status","ngaydangki","textAlign","actions","propTypes","string","array","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { withStyles } from '@material-ui/styles';\nimport {\n    Card,\n    CardActions,\n    CardContent,\n    Avatar,\n    Checkbox,\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableRow,\n    Typography,\n    TablePagination\n} from '@material-ui/core';\n\nimport { getInitials } from 'helpers';\nimport { ToolbarTable } from './components';\nimport { LoadingCenter, StatusBullet } from 'components';\nimport { URI } from './../../../../constants/types';\nimport styles from './styles';\n\nconst statusColors = {\n    1: 'success',\n    2: 'info',\n    0: 'danger'\n};\nclass UsersTable extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedUsers: [],\n            rowsPerPage: 5,\n            page: 0,\n            loadingTable: false\n        };\n    }\n    handleSelectAll = event => {\n        const { users } = this.props;\n        let selectedUsers;\n        if (event.target.checked) {\n            selectedUsers = users.map(user => user._id);\n        } else {\n            selectedUsers = [];\n        }\n        this.setState({\n            selectedUsers: selectedUsers\n        });\n    };\n    handleSelectOne = (event, id) => {\n        const selectedIndex = this.state.selectedUsers.indexOf(id);\n        let newSelectedUsers = [];\n\n        if (selectedIndex === -1) {\n            newSelectedUsers = newSelectedUsers.concat(\n                this.state.selectedUsers,\n                id\n            );\n        } else if (selectedIndex === 0) {\n            newSelectedUsers = newSelectedUsers.concat(\n                this.state.selectedUsers.slice(1)\n            );\n        } else if (selectedIndex === this.state.selectedUsers.length - 1) {\n            newSelectedUsers = newSelectedUsers.concat(\n                this.state.selectedUsers.slice(0, -1)\n            );\n        } else if (selectedIndex > 0) {\n            newSelectedUsers = newSelectedUsers.concat(\n                this.state.selectedUsers.slice(0, selectedIndex),\n                this.state.selectedUsers.slice(selectedIndex + 1)\n            );\n        }\n        this.setState({\n            selectedUsers: newSelectedUsers\n        });\n    };\n    loadingTable = () => {\n        this.setState({\n            loadingTable: true\n        });\n    };\n    handlePageChange = (event, page) => {\n        this.setState({\n            page: page\n        });\n    };\n    componentDidUpdate(preProps) {\n        if (preProps.users.length !== this.props.users.length) {\n            this.setState({\n                selectedUsers: [],\n                loadingTable: false\n            });\n        }\n    }\n    handleRowsPerPageChange = event => {\n        this.setState({\n            rowsPerPage: +event.target.value,\n            page: 0\n        });\n    };\n    render() {\n        const { className, users, classes, deleteUsers } = this.props;\n        const { selectedUsers, page, rowsPerPage, loadingTable } = this.state;\n        if (loadingTable) {\n            return <LoadingCenter />;\n        }\n        return (\n            <Card className={clsx(classes.root, className)}>\n                <CardContent className={classes.content}>\n                    <PerfectScrollbar>\n                        <ToolbarTable\n                            numSelected={selectedUsers.length}\n                            deleteUsers={deleteUsers}\n                            selectedUsers={selectedUsers}\n                            loadingTable={() => this.loadingTable()}\n                        />\n                        <div className={classes.inner}>\n                            <Table>\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell padding=\"checkbox\">\n                                            <Checkbox\n                                                checked={\n                                                    selectedUsers.length ===\n                                                    users.length\n                                                }\n                                                color=\"primary\"\n                                                indeterminate={\n                                                    selectedUsers.length > 0 &&\n                                                    selectedUsers.length <\n                                                        users.length\n                                                }\n                                                onChange={this.handleSelectAll}\n                                            />\n                                        </TableCell>\n                                        <TableCell>Name</TableCell>\n                                        <TableCell>Email</TableCell>\n                                        <TableCell>Phone</TableCell>\n                                        <TableCell>Gender</TableCell>\n                                        <TableCell>Status</TableCell>\n                                        <TableCell>Registration date</TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {users\n                                        .slice(\n                                            page * rowsPerPage,\n                                            page * rowsPerPage + rowsPerPage\n                                        )\n                                        .map(user => (\n                                            <TableRow\n                                                className={classes.tableRow}\n                                                hover\n                                                key={user._id}\n                                                selected={\n                                                    selectedUsers.indexOf(\n                                                        user._id\n                                                    ) !== -1\n                                                }\n                                            >\n                                                <TableCell padding=\"checkbox\">\n                                                    <Checkbox\n                                                        checked={\n                                                            selectedUsers.indexOf(\n                                                                user._id\n                                                            ) !== -1\n                                                        }\n                                                        color=\"primary\"\n                                                        onChange={event =>\n                                                            this.handleSelectOne(\n                                                                event,\n                                                                user._id\n                                                            )\n                                                        }\n                                                        value=\"true\"\n                                                    />\n                                                </TableCell>\n                                                <TableCell>\n                                                    <div\n                                                        className={\n                                                            classes.nameContainer\n                                                        }\n                                                    >\n                                                        <Avatar\n                                                            className={\n                                                                classes.avatar\n                                                            }\n                                                            src={\n                                                                user.avatar\n                                                                    ? `${URI}/getAvatar/${user.avatar}`\n                                                                    : `//www.gravatar.com/avatar/f8aef9003205946523250a062b54bbb6?s=200&r=pg&d=mm`\n                                                            }\n                                                        >\n                                                            {getInitials(\n                                                                user.name\n                                                            )}\n                                                        </Avatar>\n                                                        <Typography variant=\"body1\">\n                                                            {user.name}\n                                                        </Typography>\n                                                    </div>\n                                                </TableCell>\n                                                <TableCell>\n                                                    {user.email}\n                                                </TableCell>\n                                                <TableCell>\n                                                    {user.sdt}\n                                                </TableCell>\n                                                <TableCell>\n                                                    {user.gioitinh\n                                                        ? `Nam`\n                                                        : `Nữ`}\n                                                </TableCell>\n                                                <TableCell>\n                                                    <div\n                                                        className={classes.statusContainer}\n                                                    >\n                                                        <StatusBullet \n                                                            className={classes.status}\n                                                            color={statusColors[user.status]}  \n                                                            size=\"sm\"\n                                                        />\n                                                        {user.status === 1 ? 'Completed' : user.status === 2 ? 'Missing' : 'Incomplete'}\n                                                    </div>\n                                                </TableCell>\n                                                <TableCell>\n                                                    {user.ngaydangki}\n                                                </TableCell>\n                                            </TableRow>\n                                        ))}\n                                </TableBody>\n                            </Table>\n                        </div>\n                    </PerfectScrollbar>\n                </CardContent>\n                {users.length === 0 ? (\n                    <Typography\n                        variant=\"subtitle2\"\n                        style={{ textAlign: 'center' }}\n                    >\n                        User not found\n                    </Typography>\n                ) : (\n                    <CardActions className={classes.actions}>\n                        <TablePagination\n                            component=\"div\"\n                            count={users.length}\n                            onChangePage={this.handlePageChange}\n                            onChangeRowsPerPage={this.handleRowsPerPageChange}\n                            page={page}\n                            rowsPerPage={rowsPerPage}\n                            rowsPerPageOptions={[]}\n                            backIconButtonProps={{\n                                'aria-label': 'previous page'\n                            }}\n                            nextIconButtonProps={{\n                                'aria-label': 'next page'\n                            }}\n                            labelRowsPerPage=\"\"\n                        />\n                    </CardActions>\n                )}\n            </Card>\n        );\n    }\n}\n\nUsersTable.propTypes = {\n    className: PropTypes.string,\n    users: PropTypes.array.isRequired\n};\n\nexport default withStyles(styles)(UsersTable);\n"]},"metadata":{},"sourceType":"module"}