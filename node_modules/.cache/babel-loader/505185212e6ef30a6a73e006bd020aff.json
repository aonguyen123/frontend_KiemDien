{"ast":null,"code":"import _slicedToArray from \"E:\\\\react-material\\\\front-end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"E:\\\\react-material\\\\front-end\\\\src\\\\views\\\\PresencesDetail\\\\components\\\\PresencesTable\\\\PresencesTable.js\";\nimport React, { useState, useEffect } from 'react';\nimport clsx from 'clsx';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { withStyles } from '@material-ui/styles';\nimport { Card, CardActions, CardContent, Checkbox, Table, TableBody, TableCell, TableHead, TableRow, Typography, TablePagination } from '@material-ui/core';\nimport CheckIcon from '@material-ui/icons/Check';\nimport ToolbarTable from './component/ToolbarTable/ToolbarTable';\nimport styles from './styles';\n\nconst PresencesTable = props => {\n  const className = props.className,\n        classes = props.classes,\n        presenceDetailClass = props.presenceDetailClass,\n        deleteClassMemberById = props.deleteClassMemberById;\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        selectedMember = _useState2[0],\n        setSelectedMember = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        selectedMssv = _useState4[0],\n        setSelectedMssv = _useState4[1];\n\n  const _useState5 = useState(5),\n        _useState6 = _slicedToArray(_useState5, 2),\n        rowsPerPage = _useState6[0],\n        setRowsPerPage = _useState6[1];\n\n  const _useState7 = useState(0),\n        _useState8 = _slicedToArray(_useState7, 2),\n        page = _useState8[0],\n        setPage = _useState8[1];\n\n  const checkDateList = presenceDetailClass.checkDateList,\n        classById = presenceDetailClass.classById;\n\n  const handleSelectAll = event => {\n    let selectedMember;\n    let selectedMssv;\n\n    if (event.target.checked) {\n      selectedMember = classById.dssv.map(sv => sv._id);\n      selectedMssv = classById.dssv.map(sv => sv.maSV);\n    } else {\n      selectedMember = [];\n      selectedMssv = [];\n    }\n\n    setSelectedMember(selectedMember);\n    setSelectedMssv(selectedMssv);\n  };\n\n  const handleSelectOne = (event, id, maSV) => {\n    const selectedIndex = selectedMember.indexOf(id);\n    const selectedIndexMssv = selectedMssv.indexOf(maSV);\n    let newSelectedMember = [];\n    let newSelectedMssv = [];\n\n    if (selectedIndex === -1) {\n      newSelectedMember = newSelectedMember.concat(selectedMember, id);\n      newSelectedMssv = newSelectedMssv.concat(selectedMssv, maSV);\n    } else if (selectedIndex === 0 && selectedIndexMssv === 0) {\n      newSelectedMember = newSelectedMember.concat(selectedMember.slice(1));\n      newSelectedMssv = newSelectedMssv.concat(selectedMssv.slice(1));\n    } else if (selectedIndex === selectedMember.length - 1 && selectedIndexMssv === selectedMssv.length - 1) {\n      newSelectedMember = newSelectedMember.concat(selectedMember.slice(0, -1));\n      newSelectedMssv = newSelectedMssv.concat(selectedMssv.slice(0, -1));\n    } else if (selectedIndex > 0 && selectedIndexMssv > 0) {\n      newSelectedMember = newSelectedMember.concat(selectedMember.slice(0, selectedIndex), selectedMember.slice(selectedIndex + 1));\n      newSelectedMssv = newSelectedMssv.concat(selectedMssv.slice(0, selectedIndexMssv), selectedMssv.slice(selectedIndexMssv + 1));\n    }\n\n    setSelectedMember(newSelectedMember);\n    setSelectedMssv(newSelectedMssv);\n  };\n\n  const handlePageChange = (event, page) => {\n    setPage(page);\n  };\n\n  const handleRowsPerPageChange = event => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  return React.createElement(Card, {\n    className: clsx(classes.root, className),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(ToolbarTable, {\n    selectedMember: selectedMember,\n    selectedMssv: selectedMssv,\n    deleteClassMemberById: deleteClassMemberById,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }), React.createElement(CardContent, {\n    className: classes.content,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, React.createElement(PerfectScrollbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.inner,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, React.createElement(Table, {\n    size: \"small\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(TableHead, {\n    style: {\n      borderTop: '1px solid #e0e0e0'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(TableRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(TableCell, {\n    rowSpan: 2,\n    padding: \"checkbox\",\n    className: classes.borderTable,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, React.createElement(Checkbox, {\n    checked: classById.dssv && selectedMember.length === classById.dssv.length,\n    color: \"primary\",\n    indeterminate: selectedMember.length > 0 && selectedMember.length < classById.dssv.length,\n    onChange: handleSelectAll,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  })), React.createElement(TableCell, {\n    rowSpan: 2,\n    align: \"center\",\n    className: classes.borderTable,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, \"Member code\"), React.createElement(TableCell, {\n    rowSpan: 2,\n    className: classes.borderTable,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, \"Name\"), React.createElement(TableCell, {\n    rowSpan: 2,\n    align: \"center\",\n    className: classes.borderTable,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, \"Birth date\"), React.createElement(TableCell, {\n    rowSpan: 2,\n    align: \"center\",\n    className: classes.borderTable,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, \"Gender\"), checkDateList && React.createElement(TableCell, {\n    className: classes.borderTable,\n    colSpan: checkDateList.dateList && checkDateList.dateList.length,\n    align: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, \"Check date\")), checkDateList && React.createElement(TableRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, checkDateList.dateList && checkDateList.dateList.map(date => React.createElement(TableCell, {\n    key: date._id,\n    align: \"center\",\n    className: classes.borderTable,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }, date.date)))), React.createElement(TableBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }, classById.dssv && classById.dssv.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(sv => React.createElement(TableRow, {\n    key: sv._id,\n    className: classes.tableRow,\n    hover: true,\n    selected: selectedMember.indexOf(sv._id) !== -1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }, React.createElement(TableCell, {\n    padding: \"checkbox\",\n    className: classes.borderTable,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }, React.createElement(Checkbox, {\n    checked: selectedMember.indexOf(sv._id) !== -1,\n    color: \"primary\",\n    onChange: event => handleSelectOne(event, sv._id, sv.maSV),\n    value: \"true\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197\n    },\n    __self: this\n  })), React.createElement(TableCell, {\n    align: \"center\",\n    className: classes.borderTable,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"body1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214\n    },\n    __self: this\n  }, sv.maSV)), React.createElement(TableCell, {\n    className: classes.borderTable,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218\n    },\n    __self: this\n  }, sv.tenSV), React.createElement(TableCell, {\n    align: \"center\",\n    className: classes.borderTable,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223\n    },\n    __self: this\n  }, sv.ngaysinh), React.createElement(TableCell, {\n    align: \"center\",\n    className: classes.borderTable,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229\n    },\n    __self: this\n  }, sv.gioitinh), checkDateList && checkDateList.dateList.map(date => {\n    if (!sv.checkDate.some(x => x === date.date)) {\n      return React.createElement(TableCell, {\n        key: date._id,\n        align: \"center\",\n        className: classes.borderTable,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      });\n    }\n\n    return sv.checkDate.map((kd, index) => {\n      if (date.date === kd) {\n        //console.log(kd)\n        return React.createElement(TableCell, {\n          key: index,\n          align: \"center\",\n          className: classes.borderTable,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 259\n          },\n          __self: this\n        }, React.createElement(CheckIcon, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 268\n          },\n          __self: this\n        }));\n      }\n\n      return null;\n    });\n  })))))))), React.createElement(CardActions, {\n    className: classes.actions,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284\n    },\n    __self: this\n  }, React.createElement(TablePagination, {\n    component: \"div\",\n    count: classById.dssv ? classById.dssv.length : 0,\n    onChangePage: handlePageChange,\n    onChangeRowsPerPage: handleRowsPerPageChange,\n    page: page,\n    rowsPerPage: rowsPerPage,\n    rowsPerPageOptions: [],\n    backIconButtonProps: {\n      'aria-label': 'previous page'\n    },\n    nextIconButtonProps: {\n      'aria-label': 'next page'\n    },\n    labelRowsPerPage: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285\n    },\n    __self: this\n  })));\n};\n\nexport default withStyles(styles)(PresencesTable);","map":{"version":3,"sources":["E:\\react-material\\front-end\\src\\views\\PresencesDetail\\components\\PresencesTable\\PresencesTable.js"],"names":["React","useState","useEffect","clsx","PerfectScrollbar","withStyles","Card","CardActions","CardContent","Checkbox","Table","TableBody","TableCell","TableHead","TableRow","Typography","TablePagination","CheckIcon","ToolbarTable","styles","PresencesTable","props","className","classes","presenceDetailClass","deleteClassMemberById","selectedMember","setSelectedMember","selectedMssv","setSelectedMssv","rowsPerPage","setRowsPerPage","page","setPage","checkDateList","classById","handleSelectAll","event","target","checked","dssv","map","sv","_id","maSV","handleSelectOne","id","selectedIndex","indexOf","selectedIndexMssv","newSelectedMember","newSelectedMssv","concat","slice","length","handlePageChange","handleRowsPerPageChange","value","root","content","inner","borderTop","borderTable","dateList","date","tableRow","tenSV","ngaysinh","gioitinh","checkDate","some","x","kd","index","actions"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport clsx from 'clsx';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { withStyles } from '@material-ui/styles';\r\nimport {\r\n    Card,\r\n    CardActions,\r\n    CardContent,\r\n    Checkbox,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableHead,\r\n    TableRow,\r\n    Typography,\r\n    TablePagination\r\n} from '@material-ui/core';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport ToolbarTable from './component/ToolbarTable/ToolbarTable';\r\nimport styles from './styles';\r\n\r\nconst PresencesTable = props => {\r\n    const { className, classes, presenceDetailClass, deleteClassMemberById } = props;\r\n    const [selectedMember, setSelectedMember] = useState([]);\r\n    const [selectedMssv, setSelectedMssv] = useState([]);\r\n    const [rowsPerPage, setRowsPerPage] = useState(5);\r\n    const [page, setPage] = useState(0);\r\n    const { checkDateList, classById } = presenceDetailClass;\r\n\r\n    const handleSelectAll = event => {\r\n        let selectedMember;\r\n        let selectedMssv;\r\n        if (event.target.checked) {\r\n            selectedMember = classById.dssv.map(sv => sv._id);\r\n            selectedMssv = classById.dssv.map(sv => sv.maSV);\r\n        } else {\r\n            selectedMember = [];\r\n            selectedMssv = [];\r\n        }\r\n        setSelectedMember(selectedMember);\r\n        setSelectedMssv(selectedMssv);\r\n    };\r\n    const handleSelectOne = (event, id, maSV) => {\r\n        const selectedIndex = selectedMember.indexOf(id);\r\n        const selectedIndexMssv = selectedMssv.indexOf(maSV);\r\n        let newSelectedMember = [];\r\n        let newSelectedMssv = [];\r\n        if (selectedIndex === -1) {\r\n            newSelectedMember = newSelectedMember.concat(selectedMember, id);\r\n            newSelectedMssv = newSelectedMssv.concat(selectedMssv, maSV);\r\n        } else if (selectedIndex === 0 && selectedIndexMssv === 0) {\r\n            newSelectedMember = newSelectedMember.concat(\r\n                selectedMember.slice(1)\r\n            );\r\n            newSelectedMssv = newSelectedMssv.concat(\r\n                selectedMssv.slice(1)\r\n            );\r\n        } else if (selectedIndex === selectedMember.length - 1 && selectedIndexMssv === selectedMssv.length -1) {\r\n            newSelectedMember = newSelectedMember.concat(\r\n                selectedMember.slice(0, -1)\r\n            );\r\n            newSelectedMssv = newSelectedMssv.concat(\r\n                selectedMssv.slice(0, -1)\r\n            );\r\n        } else if (selectedIndex > 0 && selectedIndexMssv > 0) {\r\n            newSelectedMember = newSelectedMember.concat(\r\n                selectedMember.slice(0, selectedIndex),\r\n                selectedMember.slice(selectedIndex + 1)\r\n            );\r\n            newSelectedMssv = newSelectedMssv.concat(\r\n                selectedMssv.slice(0, selectedIndexMssv),\r\n                selectedMssv.slice(selectedIndexMssv + 1)\r\n            );\r\n        }\r\n        setSelectedMember(newSelectedMember);\r\n        setSelectedMssv(newSelectedMssv);\r\n    };\r\n    const handlePageChange = (event, page) => {\r\n        setPage(page);\r\n    };\r\n    const handleRowsPerPageChange = event => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n\r\n    return (\r\n        <Card className={clsx(classes.root, className)}>\r\n            <ToolbarTable\r\n                selectedMember={selectedMember}\r\n                selectedMssv={selectedMssv}\r\n                deleteClassMemberById={deleteClassMemberById}\r\n            />\r\n            <CardContent className={classes.content}>\r\n                <PerfectScrollbar>\r\n                    <div className={classes.inner}>\r\n                        <Table size=\"small\">\r\n                            <TableHead style={{borderTop: '1px solid #e0e0e0'}}>\r\n                                <TableRow>\r\n                                    <TableCell\r\n                                        rowSpan={2}\r\n                                        padding=\"checkbox\"\r\n                                        className={classes.borderTable}\r\n                                    >\r\n                                        <Checkbox\r\n                                            checked={\r\n                                                classById.dssv &&\r\n                                                selectedMember.length ===\r\n                                                classById.dssv.length\r\n                                            }\r\n                                            color=\"primary\"\r\n                                            indeterminate={\r\n                                                selectedMember.length > 0 &&\r\n                                                selectedMember.length <\r\n                                                classById.dssv.length\r\n                                            }\r\n                                            onChange={handleSelectAll}\r\n                                        />\r\n                                    </TableCell>\r\n                                    <TableCell\r\n                                        rowSpan={2}\r\n                                        align=\"center\"\r\n                                        className={classes.borderTable}\r\n                                    >\r\n                                        Member code\r\n                                    </TableCell>\r\n                                    <TableCell\r\n                                        rowSpan={2}\r\n                                        className={classes.borderTable}\r\n                                    >\r\n                                        Name\r\n                                    </TableCell>\r\n                                    <TableCell\r\n                                        rowSpan={2}\r\n                                        align=\"center\"\r\n                                        className={classes.borderTable}\r\n                                    >\r\n                                        Birth date\r\n                                    </TableCell>\r\n                                    <TableCell\r\n                                        rowSpan={2}\r\n                                        align=\"center\"\r\n                                        className={classes.borderTable}\r\n                                    >\r\n                                        Gender\r\n                                    </TableCell>\r\n                                    {checkDateList && (\r\n                                        <TableCell\r\n                                            className={classes.borderTable}\r\n                                            colSpan={\r\n                                                checkDateList.dateList &&\r\n                                                checkDateList.dateList.length\r\n                                            }\r\n                                            align=\"center\"\r\n                                        >\r\n                                            Check date\r\n                                        </TableCell>\r\n                                    )}\r\n                                </TableRow>\r\n                                {checkDateList && (\r\n                                    <TableRow>\r\n                                        {checkDateList.dateList &&\r\n                                            checkDateList.dateList.map(date => (\r\n                                                <TableCell\r\n                                                    key={date._id}\r\n                                                    align=\"center\"\r\n                                                    className={\r\n                                                        classes.borderTable\r\n                                                    }\r\n                                                >\r\n                                                    {date.date}\r\n                                                </TableCell>\r\n                                            ))}\r\n                                    </TableRow>\r\n                                )}\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {classById.dssv &&\r\n                                    classById.dssv.slice(\r\n                                        page * rowsPerPage,\r\n                                        page * rowsPerPage + rowsPerPage\r\n                                    )\r\n                                    .map(sv => (\r\n                                        <TableRow\r\n                                            key={sv._id}\r\n                                            className={classes.tableRow}\r\n                                            hover\r\n                                            selected={\r\n                                                selectedMember.indexOf(\r\n                                                    sv._id\r\n                                                ) !== -1\r\n                                            }\r\n                                        >\r\n                                            <TableCell\r\n                                                padding=\"checkbox\"\r\n                                                className={classes.borderTable}\r\n                                            >\r\n                                                <Checkbox\r\n                                                    checked={\r\n                                                        selectedMember.indexOf(\r\n                                                            sv._id\r\n                                                        ) !== -1\r\n                                                    }\r\n                                                    color=\"primary\"\r\n                                                    onChange={event =>\r\n                                                        handleSelectOne(event, sv._id, sv.maSV)\r\n                                                    }\r\n                                                    value=\"true\"\r\n                                                />\r\n                                            </TableCell>\r\n                                            <TableCell\r\n                                                align=\"center\"\r\n                                                className={classes.borderTable}\r\n                                            >\r\n                                                <Typography variant=\"body1\">\r\n                                                    {sv.maSV}\r\n                                                </Typography>\r\n                                            </TableCell>\r\n                                            <TableCell\r\n                                                className={classes.borderTable}\r\n                                            >\r\n                                                {sv.tenSV}\r\n                                            </TableCell>\r\n                                            <TableCell\r\n                                                align=\"center\"\r\n                                                className={classes.borderTable}\r\n                                            >\r\n                                                {sv.ngaysinh}\r\n                                            </TableCell>\r\n                                            <TableCell\r\n                                                align=\"center\"\r\n                                                className={classes.borderTable}\r\n                                            >\r\n                                                {sv.gioitinh}\r\n                                            </TableCell>\r\n                                            {checkDateList && checkDateList.dateList.map(\r\n                                                date => {\r\n                                                    if (\r\n                                                        !sv.checkDate.some(\r\n                                                            x => x === date.date\r\n                                                        )\r\n                                                    ) {\r\n                                                        return (\r\n                                                            <TableCell\r\n                                                                key={date._id}\r\n                                                                align=\"center\"\r\n                                                                className={\r\n                                                                    classes.borderTable\r\n                                                                }\r\n                                                            ></TableCell>\r\n                                                        );\r\n                                                    }\r\n                                                    return sv.checkDate.map(\r\n                                                        (kd, index) => {\r\n                                                            if (\r\n                                                                date.date === kd\r\n                                                            ) {\r\n                                                                //console.log(kd)\r\n                                                                return (\r\n                                                                    <TableCell\r\n                                                                        key={\r\n                                                                            index\r\n                                                                        }\r\n                                                                        align=\"center\"\r\n                                                                        className={\r\n                                                                            classes.borderTable\r\n                                                                        }\r\n                                                                    >\r\n                                                                        <CheckIcon />\r\n                                                                    </TableCell>\r\n                                                                );\r\n                                                            }\r\n                                                            return null;\r\n                                                        }\r\n                                                    );\r\n                                                }\r\n                                            )}\r\n                                        </TableRow>\r\n                                    ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </div>\r\n                </PerfectScrollbar>\r\n            </CardContent>\r\n            <CardActions className={classes.actions}>\r\n                <TablePagination\r\n                    component=\"div\"\r\n                    count={classById.dssv ? classById.dssv.length : 0}\r\n                    onChangePage={handlePageChange}\r\n                    onChangeRowsPerPage={handleRowsPerPageChange}\r\n                    page={page}\r\n                    rowsPerPage={rowsPerPage}\r\n                    rowsPerPageOptions={[]}\r\n                    backIconButtonProps={{\r\n                        'aria-label': 'previous page'\r\n                    }}\r\n                    nextIconButtonProps={{\r\n                        'aria-label': 'next page'\r\n                    }}\r\n                    labelRowsPerPage=\"\"\r\n                />\r\n            </CardActions>\r\n        </Card>\r\n    );\r\n};\r\nexport default withStyles(styles)(PresencesTable);\r\n"]},"metadata":{},"sourceType":"module"}