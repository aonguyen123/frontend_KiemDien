{"ast":null,"code":"var _jsxFileName = \"E:\\\\react-material\\\\front-end\\\\src\\\\views\\\\Account\\\\components\\\\AccountProfile\\\\AccountProfile.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport moment from 'moment';\nimport { withStyles } from '@material-ui/styles';\nimport { Card, CardActions, CardContent, Avatar, Typography, Divider, Button, LinearProgress } from '@material-ui/core';\nimport { URI } from './../../../../constants/types';\nimport { LoadingButton } from 'components';\nimport styles from './styles';\n\nconst AccountProfile = props => {\n  const className = props.className,\n        classes = props.classes,\n        errors = props.errors,\n        account = props.account;\n\n  const profileComplete = (user, isAuth) => {\n    if (isAuth) {\n      let complete = 0;\n\n      if (user.firstName) {\n        complete += 20;\n      }\n\n      if (user.lastName) {\n        complete += 20;\n      }\n\n      if (user.sdt) {\n        complete += 20;\n      }\n\n      if (user.city) {\n        complete += 20;\n      }\n\n      if (user.avatar) {\n        complete += 20;\n      }\n\n      return complete;\n    } else {\n      return 0;\n    }\n  };\n\n  const handleRemoveAvatar = user => {\n    this.setState({\n      isLoadingButtonRemove: true\n    });\n    this.props.removePicture(user._id);\n  };\n\n  const handleChange = (e, user) => {\n    let file = this.state.avatar;\n    file = e.target.files[0];\n\n    if (file) {\n      this.setState({\n        isLoadingButtonUpload: true\n      });\n      this.props.uploadPicture(file, user._id);\n    }\n  };\n\n  return React.createElement(Card, {\n    className: clsx(classes.root, className),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(CardContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.details,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    gutterBottom: true,\n    variant: \"h2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, \"\".concat(account.firstName, \" \").concat(account.lastName)), React.createElement(Typography, {\n    className: classes.locationText,\n    color: \"textSecondary\",\n    variant: \"body1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, account.city, \", \", account.country), React.createElement(Typography, {\n    className: classes.dateText,\n    color: \"textSecondary\",\n    variant: \"body1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, moment().format('hh:mm A'), \" (\", 'GTM-7', \")\")), React.createElement(Avatar, {\n    className: classes.avatar,\n    src: account.avatar ? \"\".concat(URI, \"/getAvatar/\").concat(account.avatar) : \"//www.gravatar.com/avatar/f8aef9003205946523250a062b54bbb6?s=200&r=pg&d=mm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: classes.progress,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"body1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, \"Profile Completeness: \".concat(profileComplete(account), \"%\")), React.createElement(LinearProgress, {\n    value: profileComplete(account),\n    variant: \"determinate\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }))), React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }), React.createElement(CardActions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    accept: \"image/*\",\n    className: classes.input,\n    id: \"text-button-file\",\n    multiple: true,\n    type: \"file\",\n    onChange: e => this.handleChange(e, user),\n    disabled: isLoadingButtonUpload ? true : false,\n    value: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    htmlFor: \"text-button-file\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, React.createElement(Button, {\n    component: \"span\",\n    className: classes.uploadButton,\n    color: \"primary\",\n    variant: \"text\" //disabled={isLoadingButtonUpload ? true : false}\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, \"Upload avatar\")), React.createElement(Button, {\n    variant: \"text\" //onClick={() => this.handleRemoveAvatar(user)}\n    //disabled={isLoadingButtonRemove ? true : false}\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, \"Remove avatar\")));\n};\n\nexport default withStyles(styles)(AccountProfile);","map":{"version":3,"sources":["E:\\react-material\\front-end\\src\\views\\Account\\components\\AccountProfile\\AccountProfile.js"],"names":["React","Component","PropTypes","clsx","moment","withStyles","Card","CardActions","CardContent","Avatar","Typography","Divider","Button","LinearProgress","URI","LoadingButton","styles","AccountProfile","props","className","classes","errors","account","profileComplete","user","isAuth","complete","firstName","lastName","sdt","city","avatar","handleRemoveAvatar","setState","isLoadingButtonRemove","removePicture","_id","handleChange","e","file","state","target","files","isLoadingButtonUpload","uploadPicture","root","details","locationText","country","dateText","format","progress","input","uploadButton"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport moment from 'moment';\nimport { withStyles } from '@material-ui/styles';\nimport {\n    Card,\n    CardActions,\n    CardContent,\n    Avatar,\n    Typography,\n    Divider,\n    Button,\n    LinearProgress\n} from '@material-ui/core';\nimport { URI } from './../../../../constants/types';\nimport { LoadingButton } from 'components';\nimport styles from './styles';\n\nconst AccountProfile = props => {\n    const { className, classes, errors, account } = props;\n\n    const profileComplete = (user, isAuth) => {\n        if (isAuth) {\n            let complete = 0;\n            if (user.firstName) {\n                complete += 20;\n            }\n            if (user.lastName) {\n                complete += 20;\n            }\n            if (user.sdt) {\n                complete += 20;\n            }\n            if (user.city) {\n                complete += 20;\n            }\n            if (user.avatar) {\n                complete += 20;\n            }\n            return complete;\n        } else {\n            return 0;\n        }\n    };\n    const handleRemoveAvatar = (user) => {\n        this.setState({\n            isLoadingButtonRemove: true\n        });\n        this.props.removePicture(user._id);\n    }\n    const handleChange = (e, user) => {\n        let file = this.state.avatar;\n        file = e.target.files[0];\n        if (file) {\n            this.setState({\n                isLoadingButtonUpload: true\n            });\n            this.props.uploadPicture(file, user._id);\n        }\n    };\n\n    return (\n        <Card className={clsx(classes.root, className)}>\n            <CardContent>\n                <div className={classes.details}>\n                    <div>\n                        <Typography gutterBottom variant=\"h2\">\n                            {`${account.firstName} ${account.lastName}`}\n                        </Typography>\n                        <Typography\n                            className={classes.locationText}\n                            color=\"textSecondary\"\n                            variant=\"body1\"\n                        >\n                            {account.city}, {account.country}\n                        </Typography>\n                        <Typography\n                            className={classes.dateText}\n                            color=\"textSecondary\"\n                            variant=\"body1\"\n                        >\n                            {moment().format('hh:mm A')} ({'GTM-7'})\n                        </Typography>\n                    </div>\n                    <Avatar\n                        className={classes.avatar}\n                        src={\n                            account.avatar\n                                ? `${URI}/getAvatar/${account.avatar}`\n                                : `//www.gravatar.com/avatar/f8aef9003205946523250a062b54bbb6?s=200&r=pg&d=mm`\n                        }\n                    />\n                </div>\n                <div className={classes.progress}>\n                    <Typography variant=\"body1\">\n                        {`Profile Completeness: ${profileComplete(account)}%`}\n                    </Typography>\n                    <LinearProgress\n                        value={profileComplete(account)}\n                        variant=\"determinate\"\n                    />\n                </div>\n            </CardContent>\n            <Divider />\n            <CardActions>\n                <input\n                    accept=\"image/*\"\n                    className={classes.input}\n                    id=\"text-button-file\"\n                    multiple\n                    type=\"file\"\n                    onChange={e => this.handleChange(e, user)}\n                    disabled={isLoadingButtonUpload ? true : false}\n                    value=\"\"\n                />\n                <label htmlFor=\"text-button-file\">\n                    <Button\n                        component=\"span\"\n                        className={classes.uploadButton}\n                        color=\"primary\"\n                        variant=\"text\"\n                        //disabled={isLoadingButtonUpload ? true : false}\n                    >\n                        {/* {isLoadingButtonUpload && <LoadingButton />} */}\n                        Upload avatar\n                    </Button>\n                </label>\n                <Button \n                    variant=\"text\" \n                    //onClick={() => this.handleRemoveAvatar(user)}\n                    //disabled={isLoadingButtonRemove ? true : false}\n                >\n                    {/* {isLoadingButtonRemove && <LoadingButton />} */}\n                    Remove avatar\n                </Button>\n            </CardActions>\n        </Card>\n    );\n};\nexport default withStyles(styles)(AccountProfile);"]},"metadata":{},"sourceType":"module"}