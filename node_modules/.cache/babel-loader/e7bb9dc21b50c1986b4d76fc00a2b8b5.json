{"ast":null,"code":"var _jsxFileName = \"E:\\\\react-material\\\\front-end\\\\src\\\\views\\\\Dashboard\\\\components\\\\MemberByPresence\\\\chart.js\";\nimport React from 'react';\nimport palette from 'theme/palette';\nimport PresentIcon from '@material-ui/icons/Spellcheck';\nimport ResonIcon from '@material-ui/icons/Warning';\nimport AbsentIcon from '@material-ui/icons/CancelPresentation';\nimport moment from 'moment';\nexport const fillData = (dataPresences, date, index) => {\n  console.log(date);\n  let data, statusPresences;\n  const checkDates = dataPresences.checkDates,\n        classPresences = dataPresences.classPresences;\n  let listDataPresent = 0;\n  let listDataReason = 0;\n  let listDataAbsent = 0;\n  let subTotal = 0;\n  let total = 0;\n\n  if (!index) {\n    if (classPresences.length !== 0) {\n      const monthCurrent = moment().format('MM');\n      classPresences.forEach(lop => {\n        checkDates.forEach(item => {\n          if (item.idClass === lop._id) {\n            item.dateList.forEach(ngay => {\n              if (moment(ngay.date, 'DD/MM/YYYY').format('MM') === monthCurrent) {\n                subTotal++;\n              }\n            });\n          }\n        });\n        total += subTotal * lop.dssv.length;\n        subTotal = 0;\n      });\n\n      if (total !== 0) {\n        classPresences.forEach(lop => {\n          lop.dssv.forEach(sv => {\n            sv.checkDate.forEach(date => {\n              if (moment(date.date, 'DD/MM/YYYY').format('MM') === monthCurrent && date.status) {\n                listDataPresent++;\n              } else if (moment(date.date, 'DD/MM/YYYY').format('MM') === monthCurrent && !date.status) {\n                listDataReason++;\n              }\n            });\n          });\n        });\n        listDataAbsent = total - (listDataPresent + listDataReason);\n        data = {\n          datasets: [{\n            data: [Math.round(listDataPresent / (listDataPresent + listDataAbsent + listDataReason) * 100), Math.round(listDataAbsent / (listDataPresent + listDataAbsent + listDataReason) * 100), Math.round(listDataReason / (listDataPresent + listDataAbsent + listDataReason) * 100)],\n            backgroundColor: [palette.primary.main, palette.error.main, palette.warning.main],\n            borderWidth: 5,\n            borderColor: palette.white,\n            hoverBorderColor: palette.white\n          }],\n          labels: ['Present', 'Absent', 'Reason']\n        };\n        statusPresences = [{\n          title: 'Present',\n          value: \"\".concat(Math.round(listDataPresent / (listDataPresent + listDataAbsent + listDataReason) * 100)),\n          icon: React.createElement(PresentIcon, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 108\n            },\n            __self: this\n          }),\n          color: palette.primary.main\n        }, {\n          title: 'Absent',\n          value: \"\".concat(Math.round(listDataAbsent / (listDataPresent + listDataAbsent + listDataReason) * 100)),\n          icon: React.createElement(AbsentIcon, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 120\n            },\n            __self: this\n          }),\n          color: palette.error.main\n        }, {\n          title: 'Reson',\n          value: \"\".concat(Math.round(listDataReason / (listDataPresent + listDataAbsent + listDataReason) * 100)),\n          icon: React.createElement(ResonIcon, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 132\n            },\n            __self: this\n          }),\n          color: palette.warning.main\n        }];\n      } else {\n        data = null;\n      }\n    } else {\n      data = null;\n    }\n  }\n\n  if (index === 0) {\n    total = 0;\n    subTotal = 0;\n    const monthCurrent = moment(date).format('MM');\n    classPresences.forEach(lop => {\n      checkDates.forEach(item => {\n        if (item.idClass === lop._id) {\n          item.dateList.forEach(ngay => {\n            if (moment(ngay.date, 'DD/MM/YYYY').format('MM') === monthCurrent) {\n              subTotal++;\n            }\n          });\n        }\n      });\n      total += subTotal * lop.dssv.length;\n      subTotal = 0;\n    });\n    console.log(total);\n\n    if (total !== 0) {\n      classPresences.forEach(lop => {\n        lop.dssv.forEach(sv => {\n          sv.checkDate.forEach(date => {\n            if (moment(date.date, 'DD/MM/YYYY').format('MM') === monthCurrent && date.status) {\n              listDataPresent++;\n            } else if (moment(date.date, 'DD/MM/YYYY').format('MM') === monthCurrent && !date.status) {\n              listDataReason++;\n            }\n          });\n        });\n      });\n      listDataAbsent = total - (listDataPresent + listDataReason);\n      data = {\n        datasets: [{\n          data: [Math.round(listDataPresent / (listDataPresent + listDataAbsent + listDataReason) * 100), Math.round(listDataAbsent / (listDataPresent + listDataAbsent + listDataReason) * 100), Math.round(listDataReason / (listDataPresent + listDataAbsent + listDataReason) * 100)],\n          backgroundColor: [palette.primary.main, palette.error.main, palette.warning.main],\n          borderWidth: 5,\n          borderColor: palette.white,\n          hoverBorderColor: palette.white\n        }],\n        labels: ['Present', 'Absent', 'Reason']\n      };\n      statusPresences = [{\n        title: 'Present',\n        value: \"\".concat(Math.round(listDataPresent / (listDataPresent + listDataAbsent + listDataReason) * 100)),\n        icon: React.createElement(PresentIcon, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 236\n          },\n          __self: this\n        }),\n        color: palette.primary.main\n      }, {\n        title: 'Absent',\n        value: \"\".concat(Math.round(listDataAbsent / (listDataPresent + listDataAbsent + listDataReason) * 100)),\n        icon: React.createElement(AbsentIcon, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 248\n          },\n          __self: this\n        }),\n        color: palette.error.main\n      }, {\n        title: 'Reson',\n        value: \"\".concat(Math.round(listDataReason / (listDataPresent + listDataAbsent + listDataReason) * 100)),\n        icon: React.createElement(ResonIcon, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 260\n          },\n          __self: this\n        }),\n        color: palette.warning.main\n      }];\n    } else {\n      data = null;\n    }\n  } // dataClass.forEach(lop => {\n  //     presences.presenceList.forEach(kd => {\n  //     });\n  // });\n  //const start = moment(new Date()).startOf('isoWeek');\n  // presences.forEach(e => {\n  //     e.presenceList.forEach(item => {\n  //         if(moment(item.checkDate, 'DD/MM/YYYY').isSame(start, 'isoWeek') && item.status)\n  //         {\n  //             listDataPresent.push(item);\n  //         }\n  //         else if(moment(item.checkDate, 'DD/MM/YYYY').isSame(start, 'isoWeek') && !item.status)\n  //         {\n  //             listDataReason.push(item);\n  //         }\n  //     });\n  // });\n  // console.log(listDataPresent.length);\n  // console.log(listDataReason.length);\n  //console.log(moment().isBetween(start, end));\n\n\n  return {\n    data,\n    statusPresences\n  };\n};\nexport const options = {\n  legend: {\n    display: false\n  },\n  responsive: true,\n  maintainAspectRatio: false,\n  layout: {\n    padding: 0\n  },\n  tooltips: {\n    enabled: true,\n    mode: 'index',\n    intersect: false,\n    borderWidth: 1,\n    borderColor: palette.divider,\n    backgroundColor: palette.white,\n    titleFontColor: palette.text.primary,\n    bodyFontColor: palette.text.secondary,\n    footerFontColor: palette.text.secondary\n  }\n};","map":{"version":3,"sources":["E:\\react-material\\front-end\\src\\views\\Dashboard\\components\\MemberByPresence\\chart.js"],"names":["React","palette","PresentIcon","ResonIcon","AbsentIcon","moment","fillData","dataPresences","date","index","console","log","data","statusPresences","checkDates","classPresences","listDataPresent","listDataReason","listDataAbsent","subTotal","total","length","monthCurrent","format","forEach","lop","item","idClass","_id","dateList","ngay","dssv","sv","checkDate","status","datasets","Math","round","backgroundColor","primary","main","error","warning","borderWidth","borderColor","white","hoverBorderColor","labels","title","value","icon","color","options","legend","display","responsive","maintainAspectRatio","layout","padding","tooltips","enabled","mode","intersect","divider","titleFontColor","text","bodyFontColor","secondary","footerFontColor"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport palette from 'theme/palette';\r\nimport PresentIcon from '@material-ui/icons/Spellcheck';\r\nimport ResonIcon from '@material-ui/icons/Warning';\r\nimport AbsentIcon from '@material-ui/icons/CancelPresentation';\r\nimport moment from 'moment';\r\n\r\nexport const fillData = (dataPresences, date, index) => {\r\n    console.log(date);\r\n\r\n    let data, statusPresences;\r\n    const { checkDates, classPresences } = dataPresences;\r\n    let listDataPresent = 0;\r\n    let listDataReason = 0;\r\n    let listDataAbsent = 0;\r\n    let subTotal = 0;\r\n    let total = 0;\r\n    if (!index) {\r\n        if (classPresences.length !== 0) {\r\n            const monthCurrent = moment().format('MM');\r\n\r\n            classPresences.forEach(lop => {\r\n                checkDates.forEach(item => {\r\n                    if (item.idClass === lop._id) {\r\n                        item.dateList.forEach(ngay => {\r\n                            if (\r\n                                moment(ngay.date, 'DD/MM/YYYY').format('MM') ===\r\n                                monthCurrent\r\n                            ) {\r\n                                subTotal++;\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n                total += subTotal * lop.dssv.length;\r\n                subTotal = 0;\r\n            });\r\n            if (total !== 0) {\r\n                classPresences.forEach(lop => {\r\n                    lop.dssv.forEach(sv => {\r\n                        sv.checkDate.forEach(date => {\r\n                            if (\r\n                                moment(date.date, 'DD/MM/YYYY').format('MM') ===\r\n                                    monthCurrent &&\r\n                                date.status\r\n                            ) {\r\n                                listDataPresent++;\r\n                            } else if (\r\n                                moment(date.date, 'DD/MM/YYYY').format('MM') ===\r\n                                    monthCurrent &&\r\n                                !date.status\r\n                            ) {\r\n                                listDataReason++;\r\n                            }\r\n                        });\r\n                    });\r\n                });\r\n                listDataAbsent = total - (listDataPresent + listDataReason);\r\n\r\n                data = {\r\n                    datasets: [\r\n                        {\r\n                            data: [\r\n                                Math.round(\r\n                                    (listDataPresent /\r\n                                        (listDataPresent +\r\n                                            listDataAbsent +\r\n                                            listDataReason)) *\r\n                                        100\r\n                                ),\r\n                                Math.round(\r\n                                    (listDataAbsent /\r\n                                        (listDataPresent +\r\n                                            listDataAbsent +\r\n                                            listDataReason)) *\r\n                                        100\r\n                                ),\r\n                                Math.round(\r\n                                    (listDataReason /\r\n                                        (listDataPresent +\r\n                                            listDataAbsent +\r\n                                            listDataReason)) *\r\n                                        100\r\n                                )\r\n                            ],\r\n                            backgroundColor: [\r\n                                palette.primary.main,\r\n                                palette.error.main,\r\n                                palette.warning.main\r\n                            ],\r\n                            borderWidth: 5,\r\n                            borderColor: palette.white,\r\n                            hoverBorderColor: palette.white\r\n                        }\r\n                    ],\r\n                    labels: ['Present', 'Absent', 'Reason']\r\n                };\r\n                statusPresences = [\r\n                    {\r\n                        title: 'Present',\r\n                        value: `${Math.round(\r\n                            (listDataPresent /\r\n                                (listDataPresent +\r\n                                    listDataAbsent +\r\n                                    listDataReason)) *\r\n                                100\r\n                        )}`,\r\n                        icon: <PresentIcon />,\r\n                        color: palette.primary.main\r\n                    },\r\n                    {\r\n                        title: 'Absent',\r\n                        value: `${Math.round(\r\n                            (listDataAbsent /\r\n                                (listDataPresent +\r\n                                    listDataAbsent +\r\n                                    listDataReason)) *\r\n                                100\r\n                        )}`,\r\n                        icon: <AbsentIcon />,\r\n                        color: palette.error.main\r\n                    },\r\n                    {\r\n                        title: 'Reson',\r\n                        value: `${Math.round(\r\n                            (listDataReason /\r\n                                (listDataPresent +\r\n                                    listDataAbsent +\r\n                                    listDataReason)) *\r\n                                100\r\n                        )}`,\r\n                        icon: <ResonIcon />,\r\n                        color: palette.warning.main\r\n                    }\r\n                ];\r\n            }\r\n            else\r\n            {\r\n                data = null;\r\n            }\r\n        } else {\r\n            data = null;\r\n        }\r\n    }\r\n    if (index === 0) {\r\n        total = 0;\r\n        subTotal = 0;\r\n        const monthCurrent = moment(date).format('MM');\r\n        classPresences.forEach(lop => {\r\n            checkDates.forEach(item => {\r\n                if (item.idClass === lop._id) {\r\n                    item.dateList.forEach(ngay => {\r\n                        if (\r\n                            moment(ngay.date, 'DD/MM/YYYY').format('MM') ===\r\n                            monthCurrent\r\n                        ) {\r\n                            subTotal++;\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n            total += subTotal * lop.dssv.length;\r\n            subTotal = 0;\r\n        });\r\n        console.log(total);\r\n        if (total !== 0) {\r\n            classPresences.forEach(lop => {\r\n                lop.dssv.forEach(sv => {\r\n                    sv.checkDate.forEach(date => {\r\n                        if (\r\n                            moment(date.date, 'DD/MM/YYYY').format('MM') ===\r\n                                monthCurrent &&\r\n                            date.status\r\n                        ) {\r\n                            listDataPresent++;\r\n                        } else if (\r\n                            moment(date.date, 'DD/MM/YYYY').format('MM') ===\r\n                                monthCurrent &&\r\n                            !date.status\r\n                        ) {\r\n                            listDataReason++;\r\n                        }\r\n                    });\r\n                });\r\n            });\r\n            listDataAbsent = total - (listDataPresent + listDataReason);\r\n\r\n            data = {\r\n                datasets: [\r\n                    {\r\n                        data: [\r\n                            Math.round(\r\n                                (listDataPresent /\r\n                                    (listDataPresent +\r\n                                        listDataAbsent +\r\n                                        listDataReason)) *\r\n                                    100\r\n                            ),\r\n                            Math.round(\r\n                                (listDataAbsent /\r\n                                    (listDataPresent +\r\n                                        listDataAbsent +\r\n                                        listDataReason)) *\r\n                                    100\r\n                            ),\r\n                            Math.round(\r\n                                (listDataReason /\r\n                                    (listDataPresent +\r\n                                        listDataAbsent +\r\n                                        listDataReason)) *\r\n                                    100\r\n                            )\r\n                        ],\r\n                        backgroundColor: [\r\n                            palette.primary.main,\r\n                            palette.error.main,\r\n                            palette.warning.main\r\n                        ],\r\n                        borderWidth: 5,\r\n                        borderColor: palette.white,\r\n                        hoverBorderColor: palette.white\r\n                    }\r\n                ],\r\n                labels: ['Present', 'Absent', 'Reason']\r\n            };\r\n            statusPresences = [\r\n                {\r\n                    title: 'Present',\r\n                    value: `${Math.round(\r\n                        (listDataPresent /\r\n                            (listDataPresent +\r\n                                listDataAbsent +\r\n                                listDataReason)) *\r\n                            100\r\n                    )}`,\r\n                    icon: <PresentIcon />,\r\n                    color: palette.primary.main\r\n                },\r\n                {\r\n                    title: 'Absent',\r\n                    value: `${Math.round(\r\n                        (listDataAbsent /\r\n                            (listDataPresent +\r\n                                listDataAbsent +\r\n                                listDataReason)) *\r\n                            100\r\n                    )}`,\r\n                    icon: <AbsentIcon />,\r\n                    color: palette.error.main\r\n                },\r\n                {\r\n                    title: 'Reson',\r\n                    value: `${Math.round(\r\n                        (listDataReason /\r\n                            (listDataPresent +\r\n                                listDataAbsent +\r\n                                listDataReason)) *\r\n                            100\r\n                    )}`,\r\n                    icon: <ResonIcon />,\r\n                    color: palette.warning.main\r\n                }\r\n            ];\r\n        } else {\r\n            data = null;\r\n        }\r\n    }\r\n    // dataClass.forEach(lop => {\r\n    //     presences.presenceList.forEach(kd => {\r\n\r\n    //     });\r\n    // });\r\n\r\n    //const start = moment(new Date()).startOf('isoWeek');\r\n\r\n    // presences.forEach(e => {\r\n    //     e.presenceList.forEach(item => {\r\n    //         if(moment(item.checkDate, 'DD/MM/YYYY').isSame(start, 'isoWeek') && item.status)\r\n    //         {\r\n    //             listDataPresent.push(item);\r\n    //         }\r\n    //         else if(moment(item.checkDate, 'DD/MM/YYYY').isSame(start, 'isoWeek') && !item.status)\r\n    //         {\r\n    //             listDataReason.push(item);\r\n    //         }\r\n    //     });\r\n    // });\r\n\r\n    // console.log(listDataPresent.length);\r\n    // console.log(listDataReason.length);\r\n\r\n    //console.log(moment().isBetween(start, end));\r\n\r\n    return {\r\n        data,\r\n        statusPresences\r\n    };\r\n};\r\nexport const options = {\r\n    legend: {\r\n        display: false\r\n    },\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    layout: { padding: 0 },\r\n    tooltips: {\r\n        enabled: true,\r\n        mode: 'index',\r\n        intersect: false,\r\n        borderWidth: 1,\r\n        borderColor: palette.divider,\r\n        backgroundColor: palette.white,\r\n        titleFontColor: palette.text.primary,\r\n        bodyFontColor: palette.text.secondary,\r\n        footerFontColor: palette.text.secondary\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}