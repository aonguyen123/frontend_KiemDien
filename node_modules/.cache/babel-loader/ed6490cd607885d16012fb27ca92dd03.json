{"ast":null,"code":"import _slicedToArray from \"E:\\\\react-material\\\\front-end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"E:\\\\react-material\\\\front-end\\\\src\\\\views\\\\Account\\\\components\\\\AccountProfile\\\\AccountProfile.js\";\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport moment from 'moment';\nimport { makeStyles } from '@material-ui/styles';\nimport { connect } from 'react-redux';\nimport { Card, CardActions, CardContent, Avatar, Typography, Divider, Button, LinearProgress } from '@material-ui/core';\nimport { URL_getImage } from './../../../../constants/types';\nimport { getInfoUser } from './../../../../actions/authentication';\nimport { uploadPicture } from './../../../../actions/account';\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  details: {\n    display: 'flex'\n  },\n  avatar: {\n    marginLeft: 'auto',\n    height: 110,\n    width: 100,\n    flexShrink: 0,\n    flexGrow: 0\n  },\n  progress: {\n    marginTop: theme.spacing(2)\n  },\n  uploadButton: {\n    marginRight: theme.spacing(2)\n  },\n  input: {\n    display: 'none'\n  }\n}));\n\nconst AccountProfile = props => {\n  const className = props.className,\n        user = props.user,\n        uploadPicture = props.uploadPicture,\n        file = props.file,\n        isAuth = props.isAuth,\n        getInfoUser = props.getInfoUser;\n  const classes = useStyles();\n\n  let _useState = useState(user.avatar),\n      _useState2 = _slicedToArray(_useState, 2),\n      avatar = _useState2[0],\n      setAvatar = _useState2[1];\n\n  const profileComplete = () => {\n    if (isAuth) {\n      let complete = 0;\n\n      if (user.firstName) {\n        complete += 20;\n      }\n\n      if (user.lastName) {\n        complete += 20;\n      }\n\n      if (user.sdt) {\n        complete += 20;\n      }\n\n      if (user.city) {\n        complete += 20;\n      } // if (user.avatar.slice(0, 18) !== '//www.gravatar.com') {\n      //     complete += 20;\n      // }\n\n\n      return complete;\n    } else {\n      return 0;\n    }\n  };\n\n  const handleChange = e => {\n    avatar = e.target.files[0];\n    uploadPicture(avatar, user.id);\n  };\n\n  useEffect(() => {\n    if (file) {\n      getInfoUser(user.id);\n    }\n  }, [file, user.id, getInfoUser]);\n  console.log(file);\n  console.log(user);\n  return React.createElement(Card, {\n    className: clsx(classes.root, className),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(CardContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.details,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    gutterBottom: true,\n    variant: \"h2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, \"\".concat(user.firstName, \" \").concat(user.lastName)), React.createElement(Typography, {\n    className: classes.locationText,\n    color: \"textSecondary\",\n    variant: \"body1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, user.city, \", \", user.country), React.createElement(Typography, {\n    className: classes.dateText,\n    color: \"textSecondary\",\n    variant: \"body1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, moment().format('hh:mm A'), \" (\", 'GTM-7', \")\")), React.createElement(Avatar, {\n    className: classes.avatar,\n    src: \"\".concat(URL_getImage).concat(user.avatar),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: classes.progress,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"body1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, \"Profile Completeness: \".concat(profileComplete(), \"%\")), React.createElement(LinearProgress, {\n    value: profileComplete(),\n    variant: \"determinate\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }))), React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }), React.createElement(CardActions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    accept: \"image/*\",\n    className: classes.input,\n    id: \"text-button-file\",\n    multiple: true,\n    type: \"file\",\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    htmlFor: \"text-button-file\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, React.createElement(Button, {\n    component: \"span\",\n    className: classes.uploadButton,\n    color: \"primary\",\n    variant: \"text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, \"Upload picture\")), React.createElement(Button, {\n    variant: \"text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, \"Remove picture\")));\n};\n\nAccountProfile.propTypes = {\n  className: PropTypes.string,\n  auth: PropTypes.object,\n  uploadPicture: PropTypes.func,\n  file: PropTypes.string,\n  errors: PropTypes.object\n};\n\nconst mapStateToProps = state => ({\n  user: state.auth.user,\n  file: state.file,\n  isAuth: state.auth.isAuthenticated\n});\n\nexport default connect(mapStateToProps, {\n  getInfoUser,\n  uploadPicture\n})(AccountProfile);","map":{"version":3,"sources":["E:\\react-material\\front-end\\src\\views\\Account\\components\\AccountProfile\\AccountProfile.js"],"names":["React","useState","useEffect","PropTypes","clsx","moment","makeStyles","connect","Card","CardActions","CardContent","Avatar","Typography","Divider","Button","LinearProgress","URL_getImage","getInfoUser","uploadPicture","useStyles","theme","root","details","display","avatar","marginLeft","height","width","flexShrink","flexGrow","progress","marginTop","spacing","uploadButton","marginRight","input","AccountProfile","props","className","user","file","isAuth","classes","setAvatar","profileComplete","complete","firstName","lastName","sdt","city","handleChange","e","target","files","id","console","log","locationText","country","dateText","format","propTypes","string","auth","object","func","errors","mapStateToProps","state","isAuthenticated"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport moment from 'moment';\nimport { makeStyles } from '@material-ui/styles';\nimport { connect } from 'react-redux';\nimport {\n    Card,\n    CardActions,\n    CardContent,\n    Avatar,\n    Typography,\n    Divider,\n    Button,\n    LinearProgress\n} from '@material-ui/core';\nimport { URL_getImage } from './../../../../constants/types';\nimport { getInfoUser } from './../../../../actions/authentication';\nimport { uploadPicture } from './../../../../actions/account';\n\nconst useStyles = makeStyles(theme => ({\n    root: {},\n    details: {\n        display: 'flex'\n    },\n    avatar: {\n        marginLeft: 'auto',\n        height: 110,\n        width: 100,\n        flexShrink: 0,\n        flexGrow: 0\n    },\n    progress: {\n        marginTop: theme.spacing(2)\n    },\n    uploadButton: {\n        marginRight: theme.spacing(2)\n    },\n    input: {\n        display: 'none'\n    }\n}));\n\nconst AccountProfile = props => {\n    const { className, user, uploadPicture, file, isAuth, getInfoUser } = props;\n    const classes = useStyles();\n    let [avatar, setAvatar] = useState(user.avatar);\n\n    const profileComplete = () => {\n        if (isAuth) {\n            let complete = 0;\n            if (user.firstName) {\n                complete += 20;\n            }\n            if (user.lastName) {\n                complete += 20;\n            }\n            if (user.sdt) {\n                complete += 20;\n            }\n            if (user.city) {\n                complete += 20;\n            }\n            // if (user.avatar.slice(0, 18) !== '//www.gravatar.com') {\n            //     complete += 20;\n            // }\n            return complete;\n        } else {\n            return 0;\n        }\n    };\n    const handleChange = e => {\n        avatar = e.target.files[0];\n        uploadPicture(avatar, user.id);\n    };\n    useEffect(() => {\n        if (file) {\n            getInfoUser(user.id);\n        }\n    }, [file, user.id, getInfoUser]);\n    console.log(file);\n    console.log(user);\n    return (\n        <Card className={clsx(classes.root, className)}>\n            <CardContent>\n                <div className={classes.details}>\n                    <div>\n                        <Typography gutterBottom variant=\"h2\">\n                            {`${user.firstName} ${user.lastName}`}\n                        </Typography>\n                        <Typography\n                            className={classes.locationText}\n                            color=\"textSecondary\"\n                            variant=\"body1\"\n                        >\n                            {user.city}, {user.country}\n                        </Typography>\n                        <Typography\n                            className={classes.dateText}\n                            color=\"textSecondary\"\n                            variant=\"body1\"\n                        >\n                            {moment().format('hh:mm A')} ({'GTM-7'})\n                        </Typography>\n                    </div>\n                    <Avatar\n                        className={classes.avatar}\n                        src={`${URL_getImage}${user.avatar}`}\n                    />\n                </div>\n                <div className={classes.progress}>\n                    <Typography variant=\"body1\">\n                        {`Profile Completeness: ${profileComplete()}%`}\n                    </Typography>\n                    <LinearProgress\n                        value={profileComplete()}\n                        variant=\"determinate\"\n                    />\n                </div>\n            </CardContent>\n            <Divider />\n            <CardActions>\n                <input\n                    accept=\"image/*\"\n                    className={classes.input}\n                    id=\"text-button-file\"\n                    multiple\n                    type=\"file\"\n                    onChange={handleChange}\n                />\n                <label htmlFor=\"text-button-file\">\n                    <Button\n                        component=\"span\"\n                        className={classes.uploadButton}\n                        color=\"primary\"\n                        variant=\"text\"\n                    >\n                        Upload picture\n                    </Button>\n                </label>\n                <Button variant=\"text\">Remove picture</Button>\n            </CardActions>\n        </Card>\n    );\n};\n\nAccountProfile.propTypes = {\n    className: PropTypes.string,\n    auth: PropTypes.object,\n    uploadPicture: PropTypes.func,\n    file: PropTypes.string,\n    errors: PropTypes.object\n};\nconst mapStateToProps = state => ({\n    user: state.auth.user,\n    file: state.file,\n    isAuth: state.auth.isAuthenticated\n});\nexport default connect(\n    mapStateToProps,\n    { getInfoUser, uploadPicture }\n)(AccountProfile);\n"]},"metadata":{},"sourceType":"module"}