{"ast":null,"code":"var _jsxFileName = \"E:\\\\react-material\\\\front-end\\\\src\\\\views\\\\UserList\\\\UserList.js\";\nimport React, { useState, useEffect } from 'react';\nimport { withStyles } from '@material-ui/styles';\nimport { connect } from 'react-redux';\nimport { UsersToolbar, UsersTable } from './components';\nimport { getUsers } from './../../actions/users';\nimport { createUser, deleteUsers } from './../../actions/actionUser';\nimport { clearErrors } from './../../actions/clearErrors';\nimport { closeNotify } from './../../actions/notify';\nimport { LoadingCenter } from 'components';\nimport { Notifies } from 'components';\nimport styles from './styles';\n\nconst UserList = props => {\n  const classes = props.classes,\n        errors = props.errors,\n        users = props.users,\n        actionUser = props.actionUser,\n        isLoading = props.isLoading,\n        statusUsers = props.statusUsers,\n        getUsers = props.getUsers,\n        createUser = props.createUser,\n        deleteUsers = props.deleteUsers,\n        showNotify = props.showNotify,\n        closeNotify = props.closeNotify;\n  useEffect(() => {\n    getUsers();\n  }, [getUsers]);\n\n  const setCloseNotify = () => {\n    closeNotify();\n  }; // const search = keyword => {\n  //     const keywordLowerCase = keyword.toLowerCase();\n  //     let {users} = this.props;\n  //     users = users.filter(el =>\n  //         el.email.toLowerCase().includes(keywordLowerCase)\n  //     );\n  //     this.setState({\n  //         users\n  //     })\n  // };\n\n\n  if (isLoading) return React.createElement(LoadingCenter, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  });\n  return React.createElement(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(Notifies, {\n    variant: actionUser.isSuccess ? 'success' : 'error',\n    message: actionUser.message,\n    openNotify: showNotify,\n    setCloseNotify: setCloseNotify,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }), React.createElement(UsersToolbar, {\n    createUser: createUser,\n    errors: errors,\n    clearErrors: clearErrors,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: classes.content,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(UsersTable, {\n    users: users //statusUsers={statusUsers}\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  })));\n};\n\nconst mapStateToProps = state => ({\n  users: state.users.users,\n  statusUsers: state.users.status,\n  actionUser: state.actionUser,\n  isLoading: state.isLoading.isLoading,\n  showNotify: state.showNotify.isShow,\n  errors: state.errors\n});\n\nexport default connect(mapStateToProps, {\n  getUsers,\n  deleteUsers,\n  createUser,\n  clearErrors,\n  closeNotify\n})(withStyles(styles)(UserList));","map":{"version":3,"sources":["E:\\react-material\\front-end\\src\\views\\UserList\\UserList.js"],"names":["React","useState","useEffect","withStyles","connect","UsersToolbar","UsersTable","getUsers","createUser","deleteUsers","clearErrors","closeNotify","LoadingCenter","Notifies","styles","UserList","props","classes","errors","users","actionUser","isLoading","statusUsers","showNotify","setCloseNotify","root","isSuccess","message","content","mapStateToProps","state","status","isShow"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { withStyles } from '@material-ui/styles';\nimport { connect } from 'react-redux';\n\nimport { UsersToolbar, UsersTable } from './components';\nimport { getUsers } from './../../actions/users';\nimport { createUser, deleteUsers } from './../../actions/actionUser';\nimport { clearErrors } from './../../actions/clearErrors';\nimport { closeNotify } from './../../actions/notify';\nimport { LoadingCenter } from 'components';\nimport { Notifies } from 'components';\nimport styles from './styles';\n\nconst UserList = props => {\n    const {\n        classes,\n        errors,\n        users,\n        actionUser,\n        isLoading,\n        statusUsers,\n        getUsers,\n        createUser,\n        deleteUsers,\n        showNotify,\n        closeNotify\n    } = props;\n    \n    useEffect(() => {\n        getUsers();\n    }, [getUsers]);\n\n    const setCloseNotify = () => {\n        closeNotify();\n    };\n    // const search = keyword => {\n    //     const keywordLowerCase = keyword.toLowerCase();\n    //     let {users} = this.props;\n    //     users = users.filter(el =>\n    //         el.email.toLowerCase().includes(keywordLowerCase)\n    //     );\n    //     this.setState({\n    //         users\n    //     })\n    // };\n    if(isLoading) return <LoadingCenter />\n    return (\n        <div className={classes.root}>\n            <Notifies\n                variant={actionUser.isSuccess ? 'success' : 'error'}\n                message={actionUser.message}\n                openNotify={showNotify}\n                setCloseNotify={setCloseNotify}\n            />\n            <UsersToolbar\n                createUser={createUser}\n                errors={errors}\n                clearErrors={clearErrors}\n            />\n            <div className={classes.content}>\n                <UsersTable \n                    users={users} \n                    //statusUsers={statusUsers}\n                />\n            </div>\n        </div>\n    );    \n};\nconst mapStateToProps = state => ({\n    users: state.users.users,\n    statusUsers: state.users.status,\n    actionUser: state.actionUser,\n    isLoading: state.isLoading.isLoading,\n    showNotify: state.showNotify.isShow,\n    errors: state.errors\n});\nexport default connect(\n    mapStateToProps,\n    { getUsers, deleteUsers, createUser, clearErrors, closeNotify }\n)(withStyles(styles)(UserList));"]},"metadata":{},"sourceType":"module"}