{"ast":null,"code":"import _slicedToArray from \"E:\\\\react-material\\\\front-end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"E:\\\\react-material\\\\front-end\\\\src\\\\views\\\\ClassDetail\\\\components\\\\CardClassMember\\\\CardClassMember.js\";\nimport React, { useState } from 'react';\nimport clsx from 'clsx';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { withStyles } from '@material-ui/styles';\nimport { Avatar, Card, CardHeader, CardContent, CardActions, Divider, Checkbox, Table, TableBody, TableCell, TableHead, TableRow, Typography, IconButton, TablePagination, Menu, MenuItem } from '@material-ui/core';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport GetAppIcon from '@material-ui/icons/GetApp';\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\nimport { LoadingButton } from 'components';\nimport styles from './styles';\n\nconst CardClassMember = props => {\n  const classes = props.classes,\n        className = props.className,\n        classById = props.classById,\n        importDssvClassById = props.importDssvClassById;\n\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        anchorEl = _useState2[0],\n        setAnchorEl = _useState2[1];\n\n  const _useState3 = useState(5),\n        _useState4 = _slicedToArray(_useState3, 2),\n        rowsPerPage = _useState4[0],\n        setRowsPerPage = _useState4[1];\n\n  const _useState5 = useState(0),\n        _useState6 = _slicedToArray(_useState5, 2),\n        page = _useState6[0],\n        setPage = _useState6[1];\n\n  const _useState7 = useState([]),\n        _useState8 = _slicedToArray(_useState7, 2),\n        selectedMember = _useState8[0],\n        setSelectedMember = _useState8[1];\n\n  const _useState9 = useState(false),\n        _useState10 = _slicedToArray(_useState9, 2),\n        loadingButton = _useState10[0],\n        setLoadingButton = _useState10[1];\n\n  let _useState11 = useState(''),\n      _useState12 = _slicedToArray(_useState11, 1),\n      fileDssv = _useState12[0];\n\n  const dssv = classById.dssv;\n\n  function handleClick(event) {\n    setAnchorEl(event.currentTarget);\n  }\n\n  function handleClose() {\n    setAnchorEl(null);\n  }\n\n  const handlePageChange = (event, page) => {\n    setPage(page);\n  };\n\n  const handleRowsPerPageChange = event => {\n    setPage(0);\n    setRowsPerPage(+event.target.value);\n  };\n\n  const handleSelectAll = event => {\n    let selectedMember;\n\n    if (event.target.checked) {\n      selectedMember = dssv.map(sv => sv._id);\n    } else {\n      selectedMember = [];\n    }\n\n    setSelectedMember(selectedMember);\n  };\n\n  const handleSelectOne = (event, id) => {\n    const selectedIndex = selectedMember.indexOf(id);\n    let newSelectedMember = [];\n\n    if (selectedIndex === -1) {\n      newSelectedMember = newSelectedMember.concat(selectedMember, id);\n    } else if (selectedIndex === 0) {\n      newSelectedMember = newSelectedMember.concat(selectedMember.slice(1));\n    } else if (selectedIndex === selectedMember.length - 1) {\n      newSelectedMember = newSelectedMember.concat(selectedMember.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelectedMember = newSelectedMember.concat(selectedMember.slice(0, selectedIndex), selectedMember.slice(selectedIndex + 1));\n    }\n\n    setSelectedMember(newSelectedMember);\n  };\n\n  const handleChange = e => {\n    setLoadingButton(true);\n    fileDssv = e.target.files[0];\n\n    if (fileDssv) {\n      importDssvClassById(fileDssv, classById._id);\n    }\n  };\n\n  return React.createElement(Card, {\n    className: clsx(classes.root, className),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, React.createElement(CardHeader, {\n    title: \"Class members\",\n    action: React.createElement(IconButton, {\n      \"aria-label\": \"settings\",\n      onClick: handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(MoreVertIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }), React.createElement(Menu, {\n    id: \"simple-menu\",\n    anchorEl: anchorEl,\n    keepMounted: true,\n    open: Boolean(anchorEl),\n    onClose: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    accept: \".xlsx, .xls, .csv, .xml\",\n    className: classes.input,\n    id: \"text-button-file-dssv\",\n    multiple: true,\n    type: \"file\",\n    onChange: handleChange,\n    value: \"\",\n    disabled: loadingButton,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    htmlFor: \"text-button-file-dssv\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, React.createElement(MenuItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, React.createElement(GetAppIcon, {\n    className: classes.iconCardMember,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }), React.createElement(Typography, {\n    variant: \"button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, loadingButton ? React.createElement(LoadingButton, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }) : null, \"Import\"))), React.createElement(MenuItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, React.createElement(PersonAddIcon, {\n    className: classes.iconCardMember,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }), React.createElement(Typography, {\n    variant: \"button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, \"Add member\"))), React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }), React.createElement(CardContent, {\n    className: classes.content,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, React.createElement(PerfectScrollbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, (classById.dssv && classById.dssv.length) === 0 ? React.createElement(Typography, {\n    variant: \"body1\",\n    align: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, \"Member not found\") : React.createElement(Table, {\n    styles: {\n      border: '1px solid red'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, React.createElement(TableHead, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, React.createElement(TableRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, React.createElement(TableCell, {\n    padding: \"checkbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, React.createElement(Checkbox, {\n    checked: dssv ? selectedMember.length === dssv.length : null,\n    color: \"primary\",\n    indeterminate: selectedMember.length > 0 && selectedMember.length < dssv.length,\n    onChange: handleSelectAll,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  })), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, \"Name\"), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }, \"MSSV\"), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }, \"Gender\"), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }, \"BirthDay\"))), React.createElement(TableBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, dssv ? dssv.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(sv => React.createElement(TableRow, {\n    className: classes.tableRow,\n    hover: true,\n    key: 1,\n    selected: selectedMember.indexOf(sv._id) !== -1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }, React.createElement(TableCell, {\n    padding: \"checkbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }, React.createElement(Checkbox, {\n    checked: selectedMember.indexOf(sv._id) !== -1,\n    color: \"primary\",\n    onChange: handleSelectOne,\n    value: \"true\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  })), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.nameContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201\n    },\n    __self: this\n  }, React.createElement(Avatar, {\n    className: classes.avatar,\n    src: \"//www.gravatar.com/avatar/f8aef9003205946523250a062b54bbb6?s=200&r=pg&d=mm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }), React.createElement(Typography, {\n    variant: \"body1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212\n    },\n    __self: this\n  }, \"aonguyen\"))), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217\n    },\n    __self: this\n  }, \"31151410004\"), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220\n    },\n    __self: this\n  }, \"Nam\"), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221\n    },\n    __self: this\n  }, \"20/09/1092\"))) : null)))), React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232\n    },\n    __self: this\n  }), React.createElement(CardActions, {\n    className: classes.actions,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233\n    },\n    __self: this\n  }, React.createElement(TablePagination, {\n    component: \"div\",\n    count: dssv ? dssv.length : 0,\n    onChangePage: handlePageChange,\n    onChangeRowsPerPage: handleRowsPerPageChange,\n    page: page,\n    rowsPerPage: rowsPerPage,\n    rowsPerPageOptions: [],\n    backIconButtonProps: {\n      'aria-label': 'previous page'\n    },\n    nextIconButtonProps: {\n      'aria-label': 'next page'\n    },\n    labelRowsPerPage: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234\n    },\n    __self: this\n  })));\n};\n\nexport default withStyles(styles)(CardClassMember);","map":{"version":3,"sources":["E:\\react-material\\front-end\\src\\views\\ClassDetail\\components\\CardClassMember\\CardClassMember.js"],"names":["React","useState","clsx","PerfectScrollbar","withStyles","Avatar","Card","CardHeader","CardContent","CardActions","Divider","Checkbox","Table","TableBody","TableCell","TableHead","TableRow","Typography","IconButton","TablePagination","Menu","MenuItem","MoreVertIcon","GetAppIcon","PersonAddIcon","LoadingButton","styles","CardClassMember","props","classes","className","classById","importDssvClassById","anchorEl","setAnchorEl","rowsPerPage","setRowsPerPage","page","setPage","selectedMember","setSelectedMember","loadingButton","setLoadingButton","fileDssv","dssv","handleClick","event","currentTarget","handleClose","handlePageChange","handleRowsPerPageChange","target","value","handleSelectAll","checked","map","sv","_id","handleSelectOne","id","selectedIndex","indexOf","newSelectedMember","concat","slice","length","handleChange","e","files","root","Boolean","input","iconCardMember","content","border","tableRow","nameContainer","avatar","actions"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport clsx from 'clsx';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { withStyles } from '@material-ui/styles';\r\nimport {\r\n    Avatar,\r\n    Card,\r\n    CardHeader,\r\n    CardContent,\r\n    CardActions,\r\n    Divider,\r\n    Checkbox,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableHead,\r\n    TableRow,\r\n    Typography,\r\n    IconButton,\r\n    TablePagination,\r\n    Menu,\r\n    MenuItem\r\n} from '@material-ui/core';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport GetAppIcon from '@material-ui/icons/GetApp';\r\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\r\nimport { LoadingButton } from 'components';\r\nimport styles from './styles';\r\n\r\nconst CardClassMember = props => {\r\n    const { classes, className, classById, importDssvClassById } = props;\r\n\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const [rowsPerPage, setRowsPerPage] = useState(5);\r\n    const [page, setPage] = useState(0);\r\n    const [selectedMember, setSelectedMember] = useState([]);\r\n    const [loadingButton, setLoadingButton] = useState(false);\r\n    let [fileDssv] = useState('');\r\n\r\n    const { dssv } = classById;\r\n    function handleClick(event) {\r\n        setAnchorEl(event.currentTarget);\r\n    }\r\n    function handleClose() {\r\n        setAnchorEl(null);\r\n    }\r\n    const handlePageChange = (event, page) => {\r\n        setPage(page);\r\n    };\r\n    const handleRowsPerPageChange = event => {\r\n        setPage(0);\r\n        setRowsPerPage(+event.target.value);\r\n    };\r\n    const handleSelectAll = event => {\r\n        let selectedMember;\r\n        if (event.target.checked) {\r\n            selectedMember = dssv.map(sv => sv._id);\r\n        } else {\r\n            selectedMember = [];\r\n        }\r\n        setSelectedMember(selectedMember);\r\n    };\r\n    const handleSelectOne = (event, id) => {\r\n        const selectedIndex = selectedMember.indexOf(id);\r\n        let newSelectedMember = [];\r\n\r\n        if (selectedIndex === -1) {\r\n            newSelectedMember = newSelectedMember.concat(selectedMember, id);\r\n        } else if (selectedIndex === 0) {\r\n            newSelectedMember = newSelectedMember.concat(\r\n                selectedMember.slice(1)\r\n            );\r\n        } else if (selectedIndex === selectedMember.length - 1) {\r\n            newSelectedMember = newSelectedMember.concat(\r\n                selectedMember.slice(0, -1)\r\n            );\r\n        } else if (selectedIndex > 0) {\r\n            newSelectedMember = newSelectedMember.concat(\r\n                selectedMember.slice(0, selectedIndex),\r\n                selectedMember.slice(selectedIndex + 1)\r\n            );\r\n        }\r\n        setSelectedMember(newSelectedMember);\r\n    };\r\n    const handleChange = e => {\r\n        setLoadingButton(true);\r\n        fileDssv = e.target.files[0];\r\n        if (fileDssv) {\r\n            importDssvClassById(fileDssv, classById._id);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Card className={clsx(classes.root, className)}>\r\n            <CardHeader\r\n                title=\"Class members\"\r\n                action={\r\n                    <IconButton aria-label=\"settings\" onClick={handleClick}>\r\n                        <MoreVertIcon />\r\n                    </IconButton>\r\n                }\r\n            />\r\n            <Menu\r\n                id=\"simple-menu\"\r\n                anchorEl={anchorEl}\r\n                keepMounted\r\n                open={Boolean(anchorEl)}\r\n                onClose={handleClose}\r\n            >\r\n                <input\r\n                    accept=\".xlsx, .xls, .csv, .xml\"\r\n                    className={classes.input}\r\n                    id=\"text-button-file-dssv\"\r\n                    multiple\r\n                    type=\"file\"\r\n                    onChange={handleChange}\r\n                    value=\"\"\r\n                    disabled={loadingButton}\r\n                />\r\n                <label htmlFor=\"text-button-file-dssv\">\r\n                    <MenuItem>\r\n                        <GetAppIcon className={classes.iconCardMember} />\r\n                        <Typography variant=\"button\">\r\n                            {loadingButton ? <LoadingButton /> : null}\r\n                            Import\r\n                        </Typography>\r\n                    </MenuItem>\r\n                </label>\r\n                <MenuItem>\r\n                    <PersonAddIcon className={classes.iconCardMember} />\r\n                    <Typography variant=\"button\">Add member</Typography>\r\n                </MenuItem>\r\n            </Menu>\r\n            <Divider />\r\n            <CardContent className={classes.content}>\r\n                <PerfectScrollbar>\r\n                    {(classById.dssv && classById.dssv.length) === 0 ? (\r\n                        <Typography variant=\"body1\" align=\"center\">\r\n                            Member not found\r\n                        </Typography>\r\n                    ) : (\r\n                        <Table styles={{ border: '1px solid red' }}>\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell padding=\"checkbox\">\r\n                                        <Checkbox\r\n                                            checked={\r\n                                                dssv\r\n                                                    ? selectedMember.length ===\r\n                                                      dssv.length\r\n                                                    : null\r\n                                            }\r\n                                            color=\"primary\"\r\n                                            indeterminate={\r\n                                                selectedMember.length > 0 &&\r\n                                                selectedMember.length <\r\n                                                    dssv.length\r\n                                            }\r\n                                            onChange={handleSelectAll}\r\n                                        />\r\n                                    </TableCell>\r\n                                    <TableCell>Name</TableCell>\r\n                                    <TableCell>MSSV</TableCell>\r\n                                    <TableCell>Gender</TableCell>\r\n                                    <TableCell>BirthDay</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {dssv\r\n                                    ? dssv\r\n                                          .slice(\r\n                                              page * rowsPerPage,\r\n                                              page * rowsPerPage + rowsPerPage\r\n                                          )\r\n                                          .map(sv => (\r\n                                              <TableRow\r\n                                                  className={classes.tableRow}\r\n                                                  hover\r\n                                                  key={1}\r\n                                                  selected={\r\n                                                      selectedMember.indexOf(\r\n                                                          sv._id\r\n                                                      ) !== -1\r\n                                                  }\r\n                                              >\r\n                                                  <TableCell padding=\"checkbox\">\r\n                                                      <Checkbox\r\n                                                          checked={\r\n                                                              selectedMember.indexOf(\r\n                                                                  sv._id\r\n                                                              ) !== -1\r\n                                                          }\r\n                                                          color=\"primary\"\r\n                                                          onChange={\r\n                                                              handleSelectOne\r\n                                                          }\r\n                                                          value=\"true\"\r\n                                                      />\r\n                                                  </TableCell>\r\n                                                  <TableCell>\r\n                                                      <div\r\n                                                          className={\r\n                                                              classes.nameContainer\r\n                                                          }\r\n                                                      >\r\n                                                          <Avatar\r\n                                                              className={\r\n                                                                  classes.avatar\r\n                                                              }\r\n                                                              src={`//www.gravatar.com/avatar/f8aef9003205946523250a062b54bbb6?s=200&r=pg&d=mm`}\r\n                                                          ></Avatar>\r\n                                                          <Typography variant=\"body1\">\r\n                                                              aonguyen\r\n                                                          </Typography>\r\n                                                      </div>\r\n                                                  </TableCell>\r\n                                                  <TableCell>\r\n                                                      31151410004\r\n                                                  </TableCell>\r\n                                                  <TableCell>Nam</TableCell>\r\n                                                  <TableCell>\r\n                                                      20/09/1092\r\n                                                  </TableCell>\r\n                                              </TableRow>\r\n                                          ))\r\n                                    : null}\r\n                            </TableBody>\r\n                        </Table>\r\n                    )}\r\n                </PerfectScrollbar>\r\n            </CardContent>\r\n            <Divider />\r\n            <CardActions className={classes.actions}>\r\n                <TablePagination\r\n                    component=\"div\"\r\n                    count={dssv ? dssv.length : 0}\r\n                    onChangePage={handlePageChange}\r\n                    onChangeRowsPerPage={handleRowsPerPageChange}\r\n                    page={page}\r\n                    rowsPerPage={rowsPerPage}\r\n                    rowsPerPageOptions={[]}\r\n                    backIconButtonProps={{\r\n                        'aria-label': 'previous page'\r\n                    }}\r\n                    nextIconButtonProps={{\r\n                        'aria-label': 'next page'\r\n                    }}\r\n                    labelRowsPerPage=\"\"\r\n                />\r\n            </CardActions>\r\n        </Card>\r\n    );\r\n};\r\nexport default withStyles(styles)(CardClassMember);\r\n"]},"metadata":{},"sourceType":"module"}