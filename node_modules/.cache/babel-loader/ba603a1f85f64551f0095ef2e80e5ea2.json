{"ast":null,"code":"import _slicedToArray from \"E:\\\\react-material\\\\front-end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"E:\\\\react-material\\\\front-end\\\\src\\\\components\\\\Notifies\\\\Notifies.js\";\nimport React from 'react';\nimport clsx from 'clsx';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport InfoIcon from '@material-ui/icons/Info';\nimport CloseIcon from '@material-ui/icons/Close';\nimport IconButton from '@material-ui/core/IconButton';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport Slide from '@material-ui/core/Slide';\nimport { amber, green } from '@material-ui/core/colors';\nimport styles from './styles';\nconst useStyles1 = makeStyles(theme => ({\n  success: {\n    backgroundColor: green[600]\n  },\n  error: {\n    backgroundColor: theme.palette.error.dark\n  },\n  info: {\n    backgroundColor: theme.palette.primary.main\n  },\n  warning: {\n    backgroundColor: amber[700]\n  }\n}));\nconst variantIcon = {\n  success: CheckCircleIcon,\n  warning: WarningIcon,\n  error: ErrorIcon,\n  info: InfoIcon\n};\n\nfunction SlideTransition(props) {\n  const classes = useStyles1();\n  return React.createElement(Slide, Object.assign({\n    className: classes.success\n  }, props, {\n    direction: \"left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }));\n}\n\nconst Notifies = props => {\n  const message = props.message,\n        variant = props.variant,\n        classes = props.classes,\n        openNotify = props.openNotify,\n        setCloseNotify = props.setCloseNotify;\n\n  const _React$useState = React.useState({\n    Transition: SlideTransition\n  }),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        state = _React$useState2[0],\n        setState = _React$useState2[1];\n\n  const Icon = variantIcon[variant];\n\n  function handleClose(event, reason) {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setCloseNotify(false);\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(Snackbar, {\n    anchorOrigin: {\n      vertical: 'top',\n      horizontal: 'right'\n    },\n    open: openNotify,\n    autoHideDuration: 4000,\n    onClose: handleClose,\n    TransitionComponent: state.Transition,\n    message: React.createElement(\"span\", {\n      id: \"client-snackbar\",\n      className: classes.message,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      className: clsx(classes.icon, classes.iconVariant),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }), message),\n    action: [React.createElement(IconButton, {\n      key: \"close\",\n      \"aria-label\": \"close\",\n      color: \"inherit\",\n      onClick: handleClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(CloseIcon, {\n      className: classes.icon,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }))],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }));\n};\n\nexport default withStyles(styles)(Notifies);","map":{"version":3,"sources":["E:\\react-material\\front-end\\src\\components\\Notifies\\Notifies.js"],"names":["React","clsx","CheckCircleIcon","ErrorIcon","InfoIcon","CloseIcon","IconButton","Snackbar","WarningIcon","withStyles","makeStyles","Slide","amber","green","styles","useStyles1","theme","success","backgroundColor","error","palette","dark","info","primary","main","warning","variantIcon","SlideTransition","props","classes","Notifies","message","variant","openNotify","setCloseNotify","useState","Transition","state","setState","Icon","handleClose","event","reason","vertical","horizontal","icon","iconVariant"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport clsx from 'clsx';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport WarningIcon from '@material-ui/icons/Warning';\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport { amber, green } from '@material-ui/core/colors';\r\nimport styles from './styles';\r\n\r\nconst useStyles1 = makeStyles(theme => ({\r\n    success: {\r\n      backgroundColor: green[600],\r\n    },\r\n    error: {\r\n      backgroundColor: theme.palette.error.dark,\r\n    },\r\n    info: {\r\n      backgroundColor: theme.palette.primary.main,\r\n    },\r\n    warning: {\r\n      backgroundColor: amber[700],\r\n    }\r\n}));\r\nconst variantIcon = {\r\n    success: CheckCircleIcon,\r\n    warning: WarningIcon,\r\n    error: ErrorIcon,\r\n    info: InfoIcon\r\n};\r\nfunction SlideTransition(props) {\r\n    const classes = useStyles1();\r\n    return <Slide \r\n                className={classes.success}\r\n                {...props} \r\n                direction=\"left\" \r\n                \r\n            />;\r\n}\r\n\r\nconst Notifies = props => {\r\n    const { message, variant, classes, openNotify, setCloseNotify } = props;\r\n    const [state, setState] = React.useState({\r\n        Transition: SlideTransition\r\n    });\r\n    const Icon = variantIcon[variant];\r\n    function handleClose(event, reason) {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setCloseNotify(false);\r\n    }\r\n    return (\r\n        <div>\r\n            <Snackbar\r\n                anchorOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'right'\r\n                }}\r\n                open={openNotify}\r\n                autoHideDuration={4000}\r\n                onClose={handleClose}\r\n                TransitionComponent={state.Transition}\r\n                message={\r\n                    <span id=\"client-snackbar\" className={classes.message}>\r\n                        <Icon className={clsx(classes.icon, classes.iconVariant)} />\r\n                        {message}\r\n                    </span>\r\n                }\r\n                action={[\r\n                    <IconButton\r\n                        key=\"close\"\r\n                        aria-label=\"close\"\r\n                        color=\"inherit\"\r\n                        onClick={handleClose}\r\n                    >\r\n                        <CloseIcon className={classes.icon} />\r\n                    </IconButton>\r\n                ]}\r\n            >\r\n            </Snackbar>\r\n        </div>\r\n    );\r\n};\r\nexport default withStyles(styles)(Notifies);\r\n"]},"metadata":{},"sourceType":"module"}