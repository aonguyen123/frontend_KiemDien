{"ast":null,"code":"var _jsxFileName = \"E:\\\\react-material\\\\front-end\\\\src\\\\views\\\\Dashboard\\\\components\\\\TotalUsers\\\\TotalUsers.js\";\nimport React from 'react';\nimport clsx from 'clsx';\nimport { withStyles } from '@material-ui/styles';\nimport { Card, CardContent, Grid, Typography, Avatar } from '@material-ui/core';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport PeopleIcon from '@material-ui/icons/PeopleOutlined';\nimport styles from './styles';\n\nconst handling = totalUser => {\n  const currentMonth = totalUser.dataUserMonthCurrent.length;\n  const lastMonth = totalUser.dataUserMonthLast.length;\n\n  if (currentMonth > lastMonth) {\n    return true;\n  }\n\n  return false;\n};\n\nconst count = totalUser => {\n  const currentMonth = totalUser.dataUserMonthCurrent.length;\n  const lastMonth = totalUser.dataUserMonthLast.length;\n  let percentMonthCurrent = currentMonth / (currentMonth + lastMonth) * 100;\n  let percentMonthLast = lastMonth / (lastMonth + currentMonth) * 100;\n\n  if (percentMonthCurrent > percentMonthLast) {\n    let rs = percentMonthCurrent - percentMonthLast;\n    const n = parseFloat(rs);\n    rs = Math.round(n * 10) / 10;\n    return rs;\n  } else {\n    let rs = percentMonthLast - percentMonthCurrent;\n    const n = parseFloat(rs);\n    rs = Math.round(n * 10) / 10;\n    return rs;\n  }\n};\n\nconst TotalUsers = props => {\n  const className = props.className,\n        classes = props.classes,\n        totalUser = props.totalUser;\n  return React.createElement(Card, {\n    className: clsx(classes.root, className),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, React.createElement(CardContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    justify: \"space-between\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    className: classes.title,\n    color: \"textSecondary\",\n    gutterBottom: true,\n    variant: \"body2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, \"TOTAL USERS\"), React.createElement(Typography, {\n    variant: \"h3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, totalUser.dataUserMonthCurrent.length)), React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(Avatar, {\n    className: classes.avatar,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(PeopleIcon, {\n    className: classes.icon,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  })))), React.createElement(\"div\", {\n    className: classes.difference,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(ArrowUpwardIcon, {\n    className: handling(totalUser) ? classes.differenceIconSuccess : classes.differenceIcon,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }), React.createElement(Typography, {\n    className: handling(totalUser) ? classes.differenceValue : classes.differenceValueError,\n    variant: \"body2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, count(totalUser), \"%\"), React.createElement(Typography, {\n    className: classes.caption,\n    variant: \"caption\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, \"Since last month\"))));\n};\n\nexport default withStyles(styles)(TotalUsers);","map":{"version":3,"sources":["E:\\react-material\\front-end\\src\\views\\Dashboard\\components\\TotalUsers\\TotalUsers.js"],"names":["React","clsx","withStyles","Card","CardContent","Grid","Typography","Avatar","ArrowUpwardIcon","PeopleIcon","styles","handling","totalUser","currentMonth","dataUserMonthCurrent","length","lastMonth","dataUserMonthLast","count","percentMonthCurrent","percentMonthLast","rs","n","parseFloat","Math","round","TotalUsers","props","className","classes","root","title","avatar","icon","difference","differenceIconSuccess","differenceIcon","differenceValue","differenceValueError","caption"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,SAASC,IAAT,EAAeC,WAAf,EAA4BC,IAA5B,EAAkCC,UAAlC,EAA8CC,MAA9C,QAA4D,mBAA5D;AACA,OAAOC,eAAP,MAA4B,gCAA5B;AACA,OAAOC,UAAP,MAAuB,mCAAvB;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AAEA,MAAMC,QAAQ,GAAGC,SAAS,IAAI;AAC1B,QAAMC,YAAY,GAAGD,SAAS,CAACE,oBAAV,CAA+BC,MAApD;AACA,QAAMC,SAAS,GAAGJ,SAAS,CAACK,iBAAV,CAA4BF,MAA9C;;AACA,MAAIF,YAAY,GAAGG,SAAnB,EAA8B;AAC1B,WAAO,IAAP;AACH;;AACD,SAAO,KAAP;AACH,CAPD;;AAQA,MAAME,KAAK,GAAGN,SAAS,IAAI;AACvB,QAAMC,YAAY,GAAGD,SAAS,CAACE,oBAAV,CAA+BC,MAApD;AACA,QAAMC,SAAS,GAAGJ,SAAS,CAACK,iBAAV,CAA4BF,MAA9C;AACA,MAAII,mBAAmB,GAAIN,YAAY,IAAIA,YAAY,GAAGG,SAAnB,CAAb,GAA8C,GAAxE;AACA,MAAII,gBAAgB,GAAIJ,SAAS,IAAIA,SAAS,GAAGH,YAAhB,CAAV,GAA2C,GAAlE;;AAEA,MAAIM,mBAAmB,GAAGC,gBAA1B,EAA4C;AACxC,QAAIC,EAAE,GAAGF,mBAAmB,GAAGC,gBAA/B;AACA,UAAME,CAAC,GAAGC,UAAU,CAACF,EAAD,CAApB;AACAA,IAAAA,EAAE,GAAGG,IAAI,CAACC,KAAL,CAAWH,CAAC,GAAG,EAAf,IAAqB,EAA1B;AACA,WAAOD,EAAP;AACH,GALD,MAKO;AACH,QAAIA,EAAE,GAAGD,gBAAgB,GAAGD,mBAA5B;AACA,UAAMG,CAAC,GAAGC,UAAU,CAACF,EAAD,CAApB;AACAA,IAAAA,EAAE,GAAGG,IAAI,CAACC,KAAL,CAAWH,CAAC,GAAG,EAAf,IAAqB,EAA1B;AACA,WAAOD,EAAP;AACH;AACJ,CAjBD;;AAkBA,MAAMK,UAAU,GAAGC,KAAK,IAAI;AAAA,QAChBC,SADgB,GACkBD,KADlB,CAChBC,SADgB;AAAA,QACLC,OADK,GACkBF,KADlB,CACLE,OADK;AAAA,QACIjB,SADJ,GACkBe,KADlB,CACIf,SADJ;AAGxB,SACI,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAEX,IAAI,CAAC4B,OAAO,CAACC,IAAT,EAAeF,SAAf,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAgB,IAAA,OAAO,EAAC,eAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,UAAD;AACI,IAAA,SAAS,EAAEC,OAAO,CAACE,KADvB;AAEI,IAAA,KAAK,EAAC,eAFV;AAGI,IAAA,YAAY,MAHhB;AAII,IAAA,OAAO,EAAC,OAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,EASI,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA0BnB,SAAS,CAACE,oBAAV,CAA+BC,MAAzD,CATJ,CADJ,EAYI,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,MAAD;AAAQ,IAAA,SAAS,EAAEc,OAAO,CAACG,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,UAAD;AAAY,IAAA,SAAS,EAAEH,OAAO,CAACI,IAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,CAZJ,CADJ,EAmBI;AAAK,IAAA,SAAS,EAAEJ,OAAO,CAACK,UAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,eAAD;AAAiB,IAAA,SAAS,EAAEvB,QAAQ,CAACC,SAAD,CAAR,GAAsBiB,OAAO,CAACM,qBAA9B,GAAsDN,OAAO,CAACO,cAA1F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,oBAAC,UAAD;AACI,IAAA,SAAS,EAAEzB,QAAQ,CAACC,SAAD,CAAR,GAAsBiB,OAAO,CAACQ,eAA9B,GAAgDR,OAAO,CAACS,oBADvE;AAEI,IAAA,OAAO,EAAC,OAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIKpB,KAAK,CAACN,SAAD,CAJV,MAFJ,EAQI,oBAAC,UAAD;AAAY,IAAA,SAAS,EAAEiB,OAAO,CAACU,OAA/B;AAAwC,IAAA,OAAO,EAAC,SAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBARJ,CAnBJ,CADJ,CADJ;AAoCH,CAvCD;;AAwCA,eAAerC,UAAU,CAACQ,MAAD,CAAV,CAAmBgB,UAAnB,CAAf","sourcesContent":["import React from 'react';\nimport clsx from 'clsx';\nimport { withStyles } from '@material-ui/styles';\nimport { Card, CardContent, Grid, Typography, Avatar } from '@material-ui/core';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport PeopleIcon from '@material-ui/icons/PeopleOutlined';\nimport styles from './styles';\n\nconst handling = totalUser => {\n    const currentMonth = totalUser.dataUserMonthCurrent.length;\n    const lastMonth = totalUser.dataUserMonthLast.length;\n    if (currentMonth > lastMonth) {\n        return true;\n    }\n    return false;\n};\nconst count = totalUser => {\n    const currentMonth = totalUser.dataUserMonthCurrent.length;\n    const lastMonth = totalUser.dataUserMonthLast.length;\n    let percentMonthCurrent = (currentMonth / (currentMonth + lastMonth)) * 100;\n    let percentMonthLast = (lastMonth / (lastMonth + currentMonth)) * 100;\n\n    if (percentMonthCurrent > percentMonthLast) {\n        let rs = percentMonthCurrent - percentMonthLast;\n        const n = parseFloat(rs);\n        rs = Math.round(n * 10) / 10;\n        return rs;\n    } else {\n        let rs = percentMonthLast - percentMonthCurrent;\n        const n = parseFloat(rs);\n        rs = Math.round(n * 10) / 10;\n        return rs;\n    }\n};\nconst TotalUsers = props => {\n    const { className, classes, totalUser } = props;\n\n    return (\n        <Card className={clsx(classes.root, className)}>\n            <CardContent>\n                <Grid container justify=\"space-between\">\n                    <Grid item>\n                        <Typography\n                            className={classes.title}\n                            color=\"textSecondary\"\n                            gutterBottom\n                            variant=\"body2\"\n                        >\n                            TOTAL USERS\n                        </Typography>\n                        <Typography variant=\"h3\">{totalUser.dataUserMonthCurrent.length}</Typography>\n                    </Grid>\n                    <Grid item>\n                        <Avatar className={classes.avatar}>\n                            <PeopleIcon className={classes.icon} />\n                        </Avatar>\n                    </Grid>\n                </Grid>\n                <div className={classes.difference}>\n                    <ArrowUpwardIcon className={handling(totalUser) ? classes.differenceIconSuccess : classes.differenceIcon} />\n                    <Typography\n                        className={handling(totalUser) ? classes.differenceValue : classes.differenceValueError}\n                        variant=\"body2\"\n                    >\n                        {count(totalUser)}%\n                    </Typography>\n                    <Typography className={classes.caption} variant=\"caption\">\n                        Since last month\n                    </Typography>\n                </div>\n            </CardContent>\n        </Card>\n    );\n};\nexport default withStyles(styles)(TotalUsers);\n"]},"metadata":{},"sourceType":"module"}