{"ast":null,"code":"import _slicedToArray from \"E:\\\\react-material\\\\front-end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"E:\\\\react-material\\\\front-end\\\\src\\\\views\\\\UserList\\\\components\\\\UsersTable\\\\UsersTable.js\";\nimport React, { useState } from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { withStyles } from '@material-ui/styles';\nimport { Card, CardActions, CardContent, Avatar, Checkbox, Table, TableBody, TableCell, TableHead, TableRow, Typography, TablePagination } from '@material-ui/core';\nimport { getInitials } from 'helpers';\nimport styles from './styles';\n\nconst UsersTable = props => {\n  const className = props.className,\n        users = props.users,\n        classes = props.classes;\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        selectedUsers = _useState2[0],\n        setSelectedUsers = _useState2[1];\n\n  const _useState3 = useState(10),\n        _useState4 = _slicedToArray(_useState3, 2),\n        rowsPerPage = _useState4[0],\n        setRowsPerPage = _useState4[1];\n\n  const _useState5 = useState(0),\n        _useState6 = _slicedToArray(_useState5, 2),\n        page = _useState6[0],\n        setPage = _useState6[1];\n\n  const handleSelectAll = event => {\n    const users = props.users;\n    let selectedUsers;\n\n    if (event.target.checked) {\n      selectedUsers = users.map(user => user.id);\n    } else {\n      selectedUsers = [];\n    }\n\n    setSelectedUsers(selectedUsers);\n  };\n\n  const handleSelectOne = (event, id) => {\n    const selectedIndex = selectedUsers.indexOf(id);\n    let newSelectedUsers = [];\n\n    if (selectedIndex === -1) {\n      newSelectedUsers = newSelectedUsers.concat(selectedUsers, id);\n    } else if (selectedIndex === 0) {\n      newSelectedUsers = newSelectedUsers.concat(selectedUsers.slice(1));\n    } else if (selectedIndex === selectedUsers.length - 1) {\n      newSelectedUsers = newSelectedUsers.concat(selectedUsers.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelectedUsers = newSelectedUsers.concat(selectedUsers.slice(0, selectedIndex), selectedUsers.slice(selectedIndex + 1));\n    }\n\n    setSelectedUsers(newSelectedUsers);\n  };\n\n  const handlePageChange = (event, page) => {\n    setPage(page);\n  };\n\n  const handleRowsPerPageChange = event => {\n    setRowsPerPage(event.target.value);\n  };\n\n  return React.createElement(Card, Object.assign({}, rest, {\n    className: clsx(classes.root, className),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }), React.createElement(CardContent, {\n    className: classes.content,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(PerfectScrollbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.inner,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(Table, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(TableHead, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(TableRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(TableCell, {\n    padding: \"checkbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(Checkbox, {\n    checked: selectedUsers.length === users.length,\n    color: \"primary\",\n    indeterminate: selectedUsers.length > 0 && selectedUsers.length < users.length,\n    onChange: handleSelectAll,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  })), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, \"Name\"), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, \"Email\"), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, \"Location\"), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, \"Phone\"), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, \"Registration date\"))), React.createElement(TableBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, users.slice(0, rowsPerPage).map(user => React.createElement(TableRow, {\n    className: classes.tableRow,\n    hover: true,\n    key: user.id,\n    selected: selectedUsers.indexOf(user.id) !== -1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, React.createElement(TableCell, {\n    padding: \"checkbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, React.createElement(Checkbox, {\n    checked: selectedUsers.indexOf(user.id) !== -1,\n    color: \"primary\",\n    onChange: event => handleSelectOne(event, user.id),\n    value: \"true\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  })), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.nameContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, React.createElement(Avatar, {\n    className: classes.avatar,\n    src: user.avatarUrl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, getInitials(user.name)), React.createElement(Typography, {\n    variant: \"body1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, user.name))), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, user.email), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, user.address.city, \", \", user.address.state, \",\", ' ', user.address.country), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, user.phone), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, moment(user.createdAt).format('DD/MM/YYYY'))))))))), React.createElement(CardActions, {\n    className: classes.actions,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, React.createElement(TablePagination, {\n    component: \"div\",\n    count: users.length,\n    onChangePage: handlePageChange,\n    onChangeRowsPerPage: handleRowsPerPageChange,\n    page: page,\n    rowsPerPage: rowsPerPage,\n    rowsPerPageOptions: [5, 10, 25],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  })));\n};\n\nUsersTable.propTypes = {\n  className: PropTypes.string,\n  users: PropTypes.array.isRequired\n};\nexport default withStyles(styles)(UsersTable);","map":{"version":3,"sources":["E:\\react-material\\front-end\\src\\views\\UserList\\components\\UsersTable\\UsersTable.js"],"names":["React","useState","clsx","PropTypes","moment","PerfectScrollbar","withStyles","Card","CardActions","CardContent","Avatar","Checkbox","Table","TableBody","TableCell","TableHead","TableRow","Typography","TablePagination","getInitials","styles","UsersTable","props","className","users","classes","selectedUsers","setSelectedUsers","rowsPerPage","setRowsPerPage","page","setPage","handleSelectAll","event","target","checked","map","user","id","handleSelectOne","selectedIndex","indexOf","newSelectedUsers","concat","slice","length","handlePageChange","handleRowsPerPageChange","value","rest","root","content","inner","tableRow","nameContainer","avatar","avatarUrl","name","email","address","city","state","country","phone","createdAt","format","actions","propTypes","string","array","isRequired"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { withStyles } from '@material-ui/styles';\nimport {\n  Card,\n  CardActions,\n  CardContent,\n  Avatar,\n  Checkbox,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  Typography,\n  TablePagination\n} from '@material-ui/core';\n\nimport { getInitials } from 'helpers';\nimport styles from './styles'\n\nconst UsersTable = props => {\n  const { className, users, classes } = props;\n\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n  const [page, setPage] = useState(0);\n\n  const handleSelectAll = event => {\n    const { users } = props;\n\n    let selectedUsers;\n\n    if (event.target.checked) {\n      selectedUsers = users.map(user => user.id);\n    } else {\n      selectedUsers = [];\n    }\n\n    setSelectedUsers(selectedUsers);\n  };\n\n  const handleSelectOne = (event, id) => {\n    const selectedIndex = selectedUsers.indexOf(id);\n    let newSelectedUsers = [];\n\n    if (selectedIndex === -1) {\n      newSelectedUsers = newSelectedUsers.concat(selectedUsers, id);\n    } else if (selectedIndex === 0) {\n      newSelectedUsers = newSelectedUsers.concat(selectedUsers.slice(1));\n    } else if (selectedIndex === selectedUsers.length - 1) {\n      newSelectedUsers = newSelectedUsers.concat(selectedUsers.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelectedUsers = newSelectedUsers.concat(\n        selectedUsers.slice(0, selectedIndex),\n        selectedUsers.slice(selectedIndex + 1)\n      );\n    }\n\n    setSelectedUsers(newSelectedUsers);\n  };\n\n  const handlePageChange = (event, page) => {\n    setPage(page);\n  };\n\n  const handleRowsPerPageChange = event => {\n    setRowsPerPage(event.target.value);\n  };\n\n  return (\n    <Card\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <CardContent className={classes.content}>\n        <PerfectScrollbar>\n          <div className={classes.inner}>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell padding=\"checkbox\">\n                    <Checkbox\n                      checked={selectedUsers.length === users.length}\n                      color=\"primary\"\n                      indeterminate={\n                        selectedUsers.length > 0 &&\n                        selectedUsers.length < users.length\n                      }\n                      onChange={handleSelectAll}\n                    />\n                  </TableCell>\n                  <TableCell>Name</TableCell>\n                  <TableCell>Email</TableCell>\n                  <TableCell>Location</TableCell>\n                  <TableCell>Phone</TableCell>\n                  <TableCell>Registration date</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {users.slice(0, rowsPerPage).map(user => (\n                  <TableRow\n                    className={classes.tableRow}\n                    hover\n                    key={user.id}\n                    selected={selectedUsers.indexOf(user.id) !== -1}\n                  >\n                    <TableCell padding=\"checkbox\">\n                      <Checkbox\n                        checked={selectedUsers.indexOf(user.id) !== -1}\n                        color=\"primary\"\n                        onChange={event => handleSelectOne(event, user.id)}\n                        value=\"true\"\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <div className={classes.nameContainer}>\n                        <Avatar\n                          className={classes.avatar}\n                          src={user.avatarUrl}\n                        >\n                          {getInitials(user.name)}\n                        </Avatar>\n                        <Typography variant=\"body1\">{user.name}</Typography>\n                      </div>\n                    </TableCell>\n                    <TableCell>{user.email}</TableCell>\n                    <TableCell>\n                      {user.address.city}, {user.address.state},{' '}\n                      {user.address.country}\n                    </TableCell>\n                    <TableCell>{user.phone}</TableCell>\n                    <TableCell>\n                      {moment(user.createdAt).format('DD/MM/YYYY')}\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n        </PerfectScrollbar>\n      </CardContent>\n      <CardActions className={classes.actions}>\n        <TablePagination\n          component=\"div\"\n          count={users.length}\n          onChangePage={handlePageChange}\n          onChangeRowsPerPage={handleRowsPerPageChange}\n          page={page}\n          rowsPerPage={rowsPerPage}\n          rowsPerPageOptions={[5, 10, 25]}\n        />\n      </CardActions>\n    </Card>\n  );\n};\n\nUsersTable.propTypes = {\n  className: PropTypes.string,\n  users: PropTypes.array.isRequired\n};\n\nexport default withStyles(styles)(UsersTable);\n"]},"metadata":{},"sourceType":"module"}