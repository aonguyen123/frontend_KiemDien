{"ast":null,"code":"var _jsxFileName = \"E:\\\\react-material\\\\front-end\\\\src\\\\views\\\\Dashboard\\\\components\\\\MemberByPresence\\\\chart.js\";\nimport React from 'react';\nimport palette from 'theme/palette';\nimport PresentIcon from '@material-ui/icons/Spellcheck';\nimport ResonIcon from '@material-ui/icons/Warning';\nimport AbsentIcon from '@material-ui/icons/CancelPresentation';\nimport moment from 'moment';\nexport const fillData = (dataPresences, date, index) => {\n  console.log(date);\n  let data, statusPresences;\n  const checkDates = dataPresences.checkDates,\n        classPresences = dataPresences.classPresences;\n  let listDataPresent = 0;\n  let listDataReason = 0;\n  let listDataAbsent = 0;\n  let total = 0;\n\n  if (classPresences.length !== 0) {\n    if (!index) {\n      const monthCurrent = moment().format('MM');\n      classPresences.forEach(lop => {\n        checkDates.forEach(item => {\n          if (item.idClass === lop._id) {\n            total += item.dateList.length * lop.dssv.length;\n          }\n        });\n        lop.dssv.forEach(sv => {\n          sv.checkDate.forEach(date => {\n            if (moment(date.date, 'DD/MM/YYYY').format('MM') === monthCurrent && date.status) {\n              listDataPresent++;\n            } else if (moment(date.date, 'DD/MM/YYYY').format('MM') === monthCurrent && !date.status) {\n              listDataReason++;\n            }\n          });\n        });\n      });\n      listDataAbsent = total - (listDataPresent + listDataReason);\n    } else if (index === 0) {\n      const monthCurrent = moment(date).format('MM');\n      console.log(monthCurrent);\n    }\n\n    data = {\n      datasets: [{\n        data: [Math.round(listDataPresent / (listDataPresent + listDataAbsent + listDataReason) * 100), Math.round(listDataAbsent / (listDataPresent + listDataAbsent + listDataReason) * 100), Math.round(listDataReason / (listDataPresent + listDataAbsent + listDataReason) * 100)],\n        backgroundColor: [palette.primary.main, palette.error.main, palette.warning.main],\n        borderWidth: 5,\n        borderColor: palette.white,\n        hoverBorderColor: palette.white\n      }],\n      labels: ['Present', 'Absent', 'Reason']\n    };\n    statusPresences = [{\n      title: 'Present',\n      value: \"\".concat(Math.round(listDataPresent / (listDataPresent + listDataAbsent + listDataReason) * 100)),\n      icon: React.createElement(PresentIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }),\n      color: palette.primary.main\n    }, {\n      title: 'Absent',\n      value: \"\".concat(Math.round(listDataAbsent / (listDataPresent + listDataAbsent + listDataReason) * 100)),\n      icon: React.createElement(AbsentIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }),\n      color: palette.error.main\n    }, {\n      title: 'Reson',\n      value: \"\".concat(Math.round(listDataReason / (listDataPresent + listDataAbsent + listDataReason) * 100)),\n      icon: React.createElement(ResonIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }),\n      color: palette.warning.main\n    }];\n  } else {\n    data = null;\n  } // dataClass.forEach(lop => {\n  //     presences.presenceList.forEach(kd => {\n  //     });\n  // });\n  //const start = moment(new Date()).startOf('isoWeek');\n  // presences.forEach(e => {\n  //     e.presenceList.forEach(item => {\n  //         if(moment(item.checkDate, 'DD/MM/YYYY').isSame(start, 'isoWeek') && item.status)\n  //         {\n  //             listDataPresent.push(item);\n  //         }\n  //         else if(moment(item.checkDate, 'DD/MM/YYYY').isSame(start, 'isoWeek') && !item.status)\n  //         {\n  //             listDataReason.push(item);\n  //         }\n  //     });\n  // });\n  // console.log(listDataPresent.length);\n  // console.log(listDataReason.length);\n  //console.log(moment().isBetween(start, end));\n\n\n  return {\n    data,\n    statusPresences\n  };\n};\nexport const options = {\n  legend: {\n    display: false\n  },\n  responsive: true,\n  maintainAspectRatio: false,\n  layout: {\n    padding: 0\n  },\n  tooltips: {\n    enabled: true,\n    mode: 'index',\n    intersect: false,\n    borderWidth: 1,\n    borderColor: palette.divider,\n    backgroundColor: palette.white,\n    titleFontColor: palette.text.primary,\n    bodyFontColor: palette.text.secondary,\n    footerFontColor: palette.text.secondary\n  }\n};","map":{"version":3,"sources":["E:\\react-material\\front-end\\src\\views\\Dashboard\\components\\MemberByPresence\\chart.js"],"names":["React","palette","PresentIcon","ResonIcon","AbsentIcon","moment","fillData","dataPresences","date","index","console","log","data","statusPresences","checkDates","classPresences","listDataPresent","listDataReason","listDataAbsent","total","length","monthCurrent","format","forEach","lop","item","idClass","_id","dateList","dssv","sv","checkDate","status","datasets","Math","round","backgroundColor","primary","main","error","warning","borderWidth","borderColor","white","hoverBorderColor","labels","title","value","icon","color","options","legend","display","responsive","maintainAspectRatio","layout","padding","tooltips","enabled","mode","intersect","divider","titleFontColor","text","bodyFontColor","secondary","footerFontColor"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport palette from 'theme/palette';\r\nimport PresentIcon from '@material-ui/icons/Spellcheck';\r\nimport ResonIcon from '@material-ui/icons/Warning';\r\nimport AbsentIcon from '@material-ui/icons/CancelPresentation';\r\nimport moment from 'moment';\r\n\r\nexport const fillData = (dataPresences, date, index) => {\r\n    console.log(date);\r\n    \r\n    let data, statusPresences;\r\n    const { checkDates, classPresences } = dataPresences;\r\n    let listDataPresent = 0;\r\n    let listDataReason = 0;\r\n    let listDataAbsent = 0;\r\n    let total = 0;\r\n\r\n    if (classPresences.length !== 0) {\r\n        if(!index)\r\n        {\r\n            const monthCurrent = moment().format('MM');\r\n            classPresences.forEach(lop => {\r\n                checkDates.forEach(item => {\r\n                    if (item.idClass === lop._id) {\r\n                        total += item.dateList.length * lop.dssv.length;\r\n                    }\r\n                });\r\n    \r\n                lop.dssv.forEach(sv => {\r\n                    sv.checkDate.forEach(date => {\r\n                        if (\r\n                            moment(date.date, 'DD/MM/YYYY').format('MM') ===\r\n                                monthCurrent &&\r\n                            date.status\r\n                        ) {\r\n                            listDataPresent++;\r\n                        } else if (\r\n                            moment(date.date, 'DD/MM/YYYY').format('MM') ===\r\n                                monthCurrent &&\r\n                            !date.status\r\n                        ) {\r\n                            listDataReason++;\r\n                        }\r\n                    });\r\n                });\r\n            });\r\n            listDataAbsent = total - (listDataPresent + listDataReason);\r\n        }\r\n        else if(index === 0)\r\n        {\r\n            const monthCurrent = moment(date).format('MM');\r\n            console.log(monthCurrent)\r\n        }\r\n        data = {\r\n            datasets: [\r\n                {\r\n                    data: [\r\n                        Math.round(\r\n                            (listDataPresent /\r\n                                (listDataPresent +\r\n                                    listDataAbsent +\r\n                                    listDataReason)) *\r\n                                100\r\n                        ),\r\n                        Math.round(\r\n                            (listDataAbsent /\r\n                                (listDataPresent +\r\n                                    listDataAbsent +\r\n                                    listDataReason)) *\r\n                                100\r\n                        ),\r\n                        Math.round(\r\n                            (listDataReason /\r\n                                (listDataPresent +\r\n                                    listDataAbsent +\r\n                                    listDataReason)) *\r\n                                100\r\n                        )\r\n                    ],\r\n                    backgroundColor: [\r\n                        palette.primary.main,\r\n                        palette.error.main,\r\n                        palette.warning.main\r\n                    ],\r\n                    borderWidth: 5,\r\n                    borderColor: palette.white,\r\n                    hoverBorderColor: palette.white\r\n                }\r\n            ],\r\n            labels: ['Present', 'Absent', 'Reason']\r\n        };\r\n        statusPresences = [\r\n            {\r\n                title: 'Present',\r\n                value: `${Math.round((listDataPresent / (listDataPresent + listDataAbsent + listDataReason)) *100)}`,\r\n                icon: <PresentIcon />,\r\n                color: palette.primary.main\r\n            },\r\n            {\r\n                title: 'Absent',\r\n                value: `${Math.round((listDataAbsent / (listDataPresent + listDataAbsent + listDataReason)) *100)}`,\r\n                icon: <AbsentIcon />,\r\n                color: palette.error.main\r\n            },\r\n            {\r\n                title: 'Reson',\r\n                value: `${Math.round((listDataReason / (listDataPresent + listDataAbsent + listDataReason)) *100)}`,\r\n                icon: <ResonIcon />,\r\n                color: palette.warning.main\r\n            }\r\n        ];\r\n    } else {\r\n        data = null;\r\n    }\r\n    // dataClass.forEach(lop => {\r\n    //     presences.presenceList.forEach(kd => {\r\n\r\n    //     });\r\n    // });\r\n\r\n    //const start = moment(new Date()).startOf('isoWeek');\r\n\r\n    // presences.forEach(e => {\r\n    //     e.presenceList.forEach(item => {\r\n    //         if(moment(item.checkDate, 'DD/MM/YYYY').isSame(start, 'isoWeek') && item.status)\r\n    //         {\r\n    //             listDataPresent.push(item);\r\n    //         }\r\n    //         else if(moment(item.checkDate, 'DD/MM/YYYY').isSame(start, 'isoWeek') && !item.status)\r\n    //         {\r\n    //             listDataReason.push(item);\r\n    //         }\r\n    //     });\r\n    // });\r\n\r\n    // console.log(listDataPresent.length);\r\n    // console.log(listDataReason.length);\r\n\r\n    //console.log(moment().isBetween(start, end));\r\n\r\n    return {\r\n        data,\r\n        statusPresences\r\n    };\r\n};\r\nexport const options = {\r\n    legend: {\r\n        display: false\r\n    },\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    layout: { padding: 0 },\r\n    tooltips: {\r\n        enabled: true,\r\n        mode: 'index',\r\n        intersect: false,\r\n        borderWidth: 1,\r\n        borderColor: palette.divider,\r\n        backgroundColor: palette.white,\r\n        titleFontColor: palette.text.primary,\r\n        bodyFontColor: palette.text.secondary,\r\n        footerFontColor: palette.text.secondary\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}