{"ast":null,"code":"import _slicedToArray from \"E:\\\\react-material\\\\front-end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"E:\\\\react-material\\\\front-end\\\\src\\\\views\\\\UserList\\\\components\\\\UsersTable\\\\UsersTable.js\";\nimport React, { useState } from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { withStyles } from '@material-ui/styles';\nimport { Card, CardActions, CardContent, Avatar, Checkbox, Table, TableBody, TableCell, TableHead, TableRow, Typography, TablePagination } from '@material-ui/core';\nimport { getInitials } from 'helpers';\nimport { ToolbarTable } from './components';\nimport { LoadingCenter, StatusBullet } from 'components';\nimport { URI } from './../../../../constants/types';\nimport styles from './styles';\nconst statusColors = {\n  1: 'success',\n  2: 'info',\n  0: 'danger'\n};\n\nconst UsersTable = props => {\n  const className = props.className,\n        users = props.users,\n        classes = props.classes,\n        deleteUsers = props.deleteUsers;\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        selectedUsers = _useState2[0],\n        setSelectedUsers = _useState2[1];\n\n  const _useState3 = useState(5),\n        _useState4 = _slicedToArray(_useState3, 2),\n        rowsPerPage = _useState4[0],\n        setRowsPerPage = _useState4[1];\n\n  const _useState5 = useState(0),\n        _useState6 = _slicedToArray(_useState5, 2),\n        page = _useState6[0],\n        setPage = _useState6[1];\n\n  const handleSelectAll = event => {\n    const users = this.props.users;\n    let selectedUsers;\n\n    if (event.target.checked) {\n      selectedUsers = users.map(user => user._id);\n    } else {\n      selectedUsers = [];\n    }\n\n    setSelectedUsers(selectedUsers);\n  };\n\n  const handleSelectOne = (event, id) => {\n    const selectedIndex = selectedUsers.indexOf(id);\n    let newSelectedUsers = [];\n\n    if (selectedIndex === -1) {\n      newSelectedUsers = newSelectedUsers.concat(selectedUsers, id);\n    } else if (selectedIndex === 0) {\n      newSelectedUsers = newSelectedUsers.concat(selectedUsers.slice(1));\n    } else if (selectedIndex === selectedUsers.length - 1) {\n      newSelectedUsers = newSelectedUsers.concat(selectedUsers.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelectedUsers = newSelectedUsers.concat(selectedUsers.slice(0, selectedIndex), selectedUsers.slice(selectedIndex + 1));\n    }\n\n    setSelectedUsers(newSelectedUsers);\n  };\n\n  const handlePageChange = (event, page) => {\n    setPage(page);\n  };\n\n  const handleRowsPerPageChange = event => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  return React.createElement(Card, {\n    className: clsx(classes.root, className),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(CardContent, {\n    className: classes.content,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(PerfectScrollbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(ToolbarTable, {\n    numSelected: selectedUsers.length,\n    deleteUsers: deleteUsers,\n    selectedUsers: selectedUsers,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: classes.inner,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(Table, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, React.createElement(TableHead, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, React.createElement(TableRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, React.createElement(TableCell, {\n    padding: \"checkbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, React.createElement(Checkbox, {\n    checked: selectedUsers.length === users.length,\n    color: \"primary\",\n    indeterminate: selectedUsers.length > 0 && selectedUsers.length < users.length,\n    onChange: handleSelectAll,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  })), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, \"Name\"), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, \"Email\"), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, \"Phone\"), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, \"Gender\"), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, \"Status\"), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, \"Registration date\"))), React.createElement(TableBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, users.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(user => React.createElement(TableRow, {\n    className: classes.tableRow,\n    hover: true,\n    key: user._id,\n    selected: selectedUsers.indexOf(user._id) !== -1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, React.createElement(TableCell, {\n    padding: \"checkbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, React.createElement(Checkbox, {\n    checked: selectedUsers.indexOf(user._id) !== -1,\n    color: \"primary\",\n    onChange: event => handleSelectOne(event, user._id),\n    value: \"true\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  })), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.nameContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, React.createElement(Avatar, {\n    className: classes.avatar,\n    src: user.avatar ? \"\".concat(URI, \"/getAvatar/\").concat(user.avatar) : \"//www.gravatar.com/avatar/f8aef9003205946523250a062b54bbb6?s=200&r=pg&d=mm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, getInitials(user.name)), React.createElement(Typography, {\n    variant: \"body1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, user.name))), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }, user.email), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, user.sdt), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }, user.gioitinh ? \"Nam\" : \"N\\u1EEF\"), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.statusContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  }, React.createElement(StatusBullet, {\n    className: classes.status,\n    color: statusColors[user.status],\n    size: \"sm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }), user.status === 1 ? 'Completed' : user.status === 2 ? 'Missing' : 'Incomplete')), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200\n    },\n    __self: this\n  }, user.ngaydangki)))))))), users.length === 0 ? React.createElement(Typography, {\n    variant: \"subtitle2\",\n    style: {\n      textAlign: 'center'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211\n    },\n    __self: this\n  }, \"User not found\") : React.createElement(CardActions, {\n    className: classes.actions,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218\n    },\n    __self: this\n  }, React.createElement(TablePagination, {\n    component: \"div\",\n    count: users.length,\n    onChangePage: handlePageChange,\n    onChangeRowsPerPage: handleRowsPerPageChange,\n    page: page,\n    rowsPerPage: rowsPerPage,\n    rowsPerPageOptions: [],\n    backIconButtonProps: {\n      'aria-label': 'previous page'\n    },\n    nextIconButtonProps: {\n      'aria-label': 'next page'\n    },\n    labelRowsPerPage: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219\n    },\n    __self: this\n  })));\n};\n\nexport default withStyles(styles)(UsersTable);","map":{"version":3,"sources":["E:\\react-material\\front-end\\src\\views\\UserList\\components\\UsersTable\\UsersTable.js"],"names":["React","useState","clsx","PropTypes","PerfectScrollbar","withStyles","Card","CardActions","CardContent","Avatar","Checkbox","Table","TableBody","TableCell","TableHead","TableRow","Typography","TablePagination","getInitials","ToolbarTable","LoadingCenter","StatusBullet","URI","styles","statusColors","UsersTable","props","className","users","classes","deleteUsers","selectedUsers","setSelectedUsers","rowsPerPage","setRowsPerPage","page","setPage","handleSelectAll","event","target","checked","map","user","_id","handleSelectOne","id","selectedIndex","indexOf","newSelectedUsers","concat","slice","length","handlePageChange","handleRowsPerPageChange","value","root","content","inner","tableRow","nameContainer","avatar","name","email","sdt","gioitinh","statusContainer","status","ngaydangki","textAlign","actions"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,gBAAP,MAA6B,yBAA7B;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,SACIC,IADJ,EAEIC,WAFJ,EAGIC,WAHJ,EAIIC,MAJJ,EAKIC,QALJ,EAMIC,KANJ,EAOIC,SAPJ,EAQIC,SARJ,EASIC,SATJ,EAUIC,QAVJ,EAWIC,UAXJ,EAYIC,eAZJ,QAaO,mBAbP;AAeA,SAASC,WAAT,QAA4B,SAA5B;AACA,SAASC,YAAT,QAA6B,cAA7B;AACA,SAASC,aAAT,EAAwBC,YAAxB,QAA4C,YAA5C;AACA,SAASC,GAAT,QAAoB,+BAApB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,MAAMC,YAAY,GAAG;AACjB,KAAG,SADc;AAEjB,KAAG,MAFc;AAGjB,KAAG;AAHc,CAArB;;AAMA,MAAMC,UAAU,GAAGC,KAAK,IAAI;AAAA,QAChBC,SADgB,GAC2BD,KAD3B,CAChBC,SADgB;AAAA,QACLC,KADK,GAC2BF,KAD3B,CACLE,KADK;AAAA,QACEC,OADF,GAC2BH,KAD3B,CACEG,OADF;AAAA,QACWC,WADX,GAC2BJ,KAD3B,CACWI,WADX;;AAAA,oBAEkB7B,QAAQ,CAAC,EAAD,CAF1B;AAAA;AAAA,QAEjB8B,aAFiB;AAAA,QAEFC,gBAFE;;AAAA,qBAGc/B,QAAQ,CAAC,CAAD,CAHtB;AAAA;AAAA,QAGjBgC,WAHiB;AAAA,QAGJC,cAHI;;AAAA,qBAIAjC,QAAQ,CAAC,CAAD,CAJR;AAAA;AAAA,QAIjBkC,IAJiB;AAAA,QAIXC,OAJW;;AAMxB,QAAMC,eAAe,GAAGC,KAAK,IAAI;AAAA,UACrBV,KADqB,GACX,KAAKF,KADM,CACrBE,KADqB;AAE7B,QAAIG,aAAJ;;AACA,QAAIO,KAAK,CAACC,MAAN,CAAaC,OAAjB,EAA0B;AACtBT,MAAAA,aAAa,GAAGH,KAAK,CAACa,GAAN,CAAUC,IAAI,IAAIA,IAAI,CAACC,GAAvB,CAAhB;AACH,KAFD,MAEO;AACHZ,MAAAA,aAAa,GAAG,EAAhB;AACH;;AACDC,IAAAA,gBAAgB,CAACD,aAAD,CAAhB;AACH,GATD;;AAUA,QAAMa,eAAe,GAAG,CAACN,KAAD,EAAQO,EAAR,KAAe;AACnC,UAAMC,aAAa,GAAGf,aAAa,CAACgB,OAAd,CAAsBF,EAAtB,CAAtB;AACA,QAAIG,gBAAgB,GAAG,EAAvB;;AAEA,QAAIF,aAAa,KAAK,CAAC,CAAvB,EAA0B;AACtBE,MAAAA,gBAAgB,GAAGA,gBAAgB,CAACC,MAAjB,CACflB,aADe,EAEfc,EAFe,CAAnB;AAIH,KALD,MAKO,IAAIC,aAAa,KAAK,CAAtB,EAAyB;AAC5BE,MAAAA,gBAAgB,GAAGA,gBAAgB,CAACC,MAAjB,CACflB,aAAa,CAACmB,KAAd,CAAoB,CAApB,CADe,CAAnB;AAGH,KAJM,MAIA,IAAIJ,aAAa,KAAKf,aAAa,CAACoB,MAAd,GAAuB,CAA7C,EAAgD;AACnDH,MAAAA,gBAAgB,GAAGA,gBAAgB,CAACC,MAAjB,CACflB,aAAa,CAACmB,KAAd,CAAoB,CAApB,EAAuB,CAAC,CAAxB,CADe,CAAnB;AAGH,KAJM,MAIA,IAAIJ,aAAa,GAAG,CAApB,EAAuB;AAC1BE,MAAAA,gBAAgB,GAAGA,gBAAgB,CAACC,MAAjB,CACflB,aAAa,CAACmB,KAAd,CAAoB,CAApB,EAAuBJ,aAAvB,CADe,EAEff,aAAa,CAACmB,KAAd,CAAoBJ,aAAa,GAAG,CAApC,CAFe,CAAnB;AAIH;;AACDd,IAAAA,gBAAgB,CAACgB,gBAAD,CAAhB;AACH,GAxBD;;AAyBA,QAAMI,gBAAgB,GAAG,CAACd,KAAD,EAAQH,IAAR,KAAiB;AACtCC,IAAAA,OAAO,CAACD,IAAD,CAAP;AACH,GAFD;;AAGA,QAAMkB,uBAAuB,GAAGf,KAAK,IAAI;AACrCJ,IAAAA,cAAc,CAAC,CAACI,KAAK,CAACC,MAAN,CAAae,KAAf,CAAd;AACAlB,IAAAA,OAAO,CAAC,CAAD,CAAP;AACH,GAHD;;AAKA,SACI,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAElC,IAAI,CAAC2B,OAAO,CAAC0B,IAAT,EAAe5B,SAAf,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,WAAD;AAAa,IAAA,SAAS,EAAEE,OAAO,CAAC2B,OAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,YAAD;AACI,IAAA,WAAW,EAAEzB,aAAa,CAACoB,MAD/B;AAEI,IAAA,WAAW,EAAErB,WAFjB;AAGI,IAAA,aAAa,EAAEC,aAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAMI;AAAK,IAAA,SAAS,EAAEF,OAAO,CAAC4B,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,SAAD;AAAW,IAAA,OAAO,EAAC,UAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,QAAD;AACI,IAAA,OAAO,EACH1B,aAAa,CAACoB,MAAd,KACAvB,KAAK,CAACuB,MAHd;AAKI,IAAA,KAAK,EAAC,SALV;AAMI,IAAA,aAAa,EACTpB,aAAa,CAACoB,MAAd,GAAuB,CAAvB,IACApB,aAAa,CAACoB,MAAd,GACIvB,KAAK,CAACuB,MATlB;AAWI,IAAA,QAAQ,EAAEd,eAXd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,EAgBI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAhBJ,EAiBI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAjBJ,EAkBI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAlBJ,EAmBI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAnBJ,EAoBI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cApBJ,EAqBI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBArBJ,CADJ,CADJ,EA0BI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKT,KAAK,CACDsB,KADJ,CAEOf,IAAI,GAAGF,WAFd,EAGOE,IAAI,GAAGF,WAAP,GAAqBA,WAH5B,EAKIQ,GALJ,CAKQC,IAAI,IACL,oBAAC,QAAD;AACI,IAAA,SAAS,EAAEb,OAAO,CAAC6B,QADvB;AAEI,IAAA,KAAK,MAFT;AAGI,IAAA,GAAG,EAAEhB,IAAI,CAACC,GAHd;AAII,IAAA,QAAQ,EACJZ,aAAa,CAACgB,OAAd,CACIL,IAAI,CAACC,GADT,MAEM,CAAC,CAPf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAUI,oBAAC,SAAD;AAAW,IAAA,OAAO,EAAC,UAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,QAAD;AACI,IAAA,OAAO,EACHZ,aAAa,CAACgB,OAAd,CACIL,IAAI,CAACC,GADT,MAEM,CAAC,CAJf;AAMI,IAAA,KAAK,EAAC,SANV;AAOI,IAAA,QAAQ,EAAEL,KAAK,IACXM,eAAe,CACXN,KADW,EAEXI,IAAI,CAACC,GAFM,CARvB;AAaI,IAAA,KAAK,EAAC,MAbV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAVJ,EA2BI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AACI,IAAA,SAAS,EACLd,OAAO,CAAC8B,aAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKI,oBAAC,MAAD;AACI,IAAA,SAAS,EACL9B,OAAO,CAAC+B,MAFhB;AAII,IAAA,GAAG,EACClB,IAAI,CAACkB,MAAL,aACStC,GADT,wBAC0BoB,IAAI,CAACkB,MAD/B,gFALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAUK1C,WAAW,CACRwB,IAAI,CAACmB,IADG,CAVhB,CALJ,EAmBI,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAC,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKnB,IAAI,CAACmB,IADV,CAnBJ,CADJ,CA3BJ,EAoDI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKnB,IAAI,CAACoB,KADV,CApDJ,EAuDI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKpB,IAAI,CAACqB,GADV,CAvDJ,EA0DI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKrB,IAAI,CAACsB,QAAL,oBADL,CA1DJ,EA+DI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AACI,IAAA,SAAS,EAAEnC,OAAO,CAACoC,eADvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGI,oBAAC,YAAD;AACI,IAAA,SAAS,EAAEpC,OAAO,CAACqC,MADvB;AAEI,IAAA,KAAK,EAAE1C,YAAY,CAACkB,IAAI,CAACwB,MAAN,CAFvB;AAGI,IAAA,IAAI,EAAC,IAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,EAQKxB,IAAI,CAACwB,MAAL,KAAgB,CAAhB,GAAoB,WAApB,GAAkCxB,IAAI,CAACwB,MAAL,KAAgB,CAAhB,GAAoB,SAApB,GAAgC,YARvE,CADJ,CA/DJ,EA2EI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKxB,IAAI,CAACyB,UADV,CA3EJ,CANP,CADL,CA1BJ,CADJ,CANJ,CADJ,CADJ,EA+HKvC,KAAK,CAACuB,MAAN,KAAiB,CAAjB,GACG,oBAAC,UAAD;AACI,IAAA,OAAO,EAAC,WADZ;AAEI,IAAA,KAAK,EAAE;AAAEiB,MAAAA,SAAS,EAAE;AAAb,KAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADH,GAQG,oBAAC,WAAD;AAAa,IAAA,SAAS,EAAEvC,OAAO,CAACwC,OAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,eAAD;AACI,IAAA,SAAS,EAAC,KADd;AAEI,IAAA,KAAK,EAAEzC,KAAK,CAACuB,MAFjB;AAGI,IAAA,YAAY,EAAEC,gBAHlB;AAII,IAAA,mBAAmB,EAAEC,uBAJzB;AAKI,IAAA,IAAI,EAAElB,IALV;AAMI,IAAA,WAAW,EAAEF,WANjB;AAOI,IAAA,kBAAkB,EAAE,EAPxB;AAQI,IAAA,mBAAmB,EAAE;AACjB,oBAAc;AADG,KARzB;AAWI,IAAA,mBAAmB,EAAE;AACjB,oBAAc;AADG,KAXzB;AAcI,IAAA,gBAAgB,EAAC,EAdrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAvIR,CADJ;AA6JH,CA9MD;;AA+MA,eAAe5B,UAAU,CAACkB,MAAD,CAAV,CAAmBE,UAAnB,CAAf","sourcesContent":["import React, { useState } from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { withStyles } from '@material-ui/styles';\nimport {\n    Card,\n    CardActions,\n    CardContent,\n    Avatar,\n    Checkbox,\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableRow,\n    Typography,\n    TablePagination\n} from '@material-ui/core';\n\nimport { getInitials } from 'helpers';\nimport { ToolbarTable } from './components';\nimport { LoadingCenter, StatusBullet } from 'components';\nimport { URI } from './../../../../constants/types';\nimport styles from './styles';\n\nconst statusColors = {\n    1: 'success',\n    2: 'info',\n    0: 'danger'\n};\n\nconst UsersTable = props => {\n    const { className, users, classes, deleteUsers } = props;\n    const [selectedUsers, setSelectedUsers] = useState([]);\n    const [rowsPerPage, setRowsPerPage] = useState(5);\n    const [page, setPage] = useState(0);            \n\n    const handleSelectAll = event => {\n        const { users } = this.props;\n        let selectedUsers;\n        if (event.target.checked) {\n            selectedUsers = users.map(user => user._id);\n        } else {\n            selectedUsers = [];\n        }\n        setSelectedUsers(selectedUsers);\n    };\n    const handleSelectOne = (event, id) => {\n        const selectedIndex = selectedUsers.indexOf(id);\n        let newSelectedUsers = [];\n\n        if (selectedIndex === -1) {\n            newSelectedUsers = newSelectedUsers.concat(\n                selectedUsers,\n                id\n            );\n        } else if (selectedIndex === 0) {\n            newSelectedUsers = newSelectedUsers.concat(\n                selectedUsers.slice(1)\n            );\n        } else if (selectedIndex === selectedUsers.length - 1) {\n            newSelectedUsers = newSelectedUsers.concat(\n                selectedUsers.slice(0, -1)\n            );\n        } else if (selectedIndex > 0) {\n            newSelectedUsers = newSelectedUsers.concat(\n                selectedUsers.slice(0, selectedIndex),\n                selectedUsers.slice(selectedIndex + 1)\n            );\n        }\n        setSelectedUsers(newSelectedUsers);\n    };\n    const handlePageChange = (event, page) => {\n        setPage(page);\n    };\n    const handleRowsPerPageChange = event => {\n        setRowsPerPage(+event.target.value);\n        setPage(0);\n    };\n\n    return (\n        <Card className={clsx(classes.root, className)}>\n            <CardContent className={classes.content}>\n                <PerfectScrollbar>\n                    <ToolbarTable\n                        numSelected={selectedUsers.length}\n                        deleteUsers={deleteUsers}\n                        selectedUsers={selectedUsers}\n                    />\n                    <div className={classes.inner}>\n                        <Table>\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell padding=\"checkbox\">\n                                        <Checkbox\n                                            checked={\n                                                selectedUsers.length ===\n                                                users.length\n                                            }\n                                            color=\"primary\"\n                                            indeterminate={\n                                                selectedUsers.length > 0 &&\n                                                selectedUsers.length <\n                                                    users.length\n                                            }\n                                            onChange={handleSelectAll}\n                                        />\n                                    </TableCell>\n                                    <TableCell>Name</TableCell>\n                                    <TableCell>Email</TableCell>\n                                    <TableCell>Phone</TableCell>\n                                    <TableCell>Gender</TableCell>\n                                    <TableCell>Status</TableCell>\n                                    <TableCell>Registration date</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {users\n                                    .slice(\n                                        page * rowsPerPage,\n                                        page * rowsPerPage + rowsPerPage\n                                    )\n                                    .map(user => (\n                                        <TableRow\n                                            className={classes.tableRow}\n                                            hover\n                                            key={user._id}\n                                            selected={\n                                                selectedUsers.indexOf(\n                                                    user._id\n                                                ) !== -1\n                                            }\n                                        >\n                                            <TableCell padding=\"checkbox\">\n                                                <Checkbox\n                                                    checked={\n                                                        selectedUsers.indexOf(\n                                                            user._id\n                                                        ) !== -1\n                                                    }\n                                                    color=\"primary\"\n                                                    onChange={event =>\n                                                        handleSelectOne(\n                                                            event,\n                                                            user._id\n                                                        )\n                                                    }\n                                                    value=\"true\"\n                                                />\n                                            </TableCell>\n                                            <TableCell>\n                                                <div\n                                                    className={\n                                                        classes.nameContainer\n                                                    }\n                                                >\n                                                    <Avatar\n                                                        className={\n                                                            classes.avatar\n                                                        }\n                                                        src={\n                                                            user.avatar\n                                                                ? `${URI}/getAvatar/${user.avatar}`\n                                                                : `//www.gravatar.com/avatar/f8aef9003205946523250a062b54bbb6?s=200&r=pg&d=mm`\n                                                        }\n                                                    >\n                                                        {getInitials(\n                                                            user.name\n                                                        )}\n                                                    </Avatar>\n                                                    <Typography variant=\"body1\">\n                                                        {user.name}\n                                                    </Typography>\n                                                </div>\n                                            </TableCell>\n                                            <TableCell>\n                                                {user.email}\n                                            </TableCell>\n                                            <TableCell>\n                                                {user.sdt}\n                                            </TableCell>\n                                            <TableCell>\n                                                {user.gioitinh\n                                                    ? `Nam`\n                                                    : `Nữ`}\n                                            </TableCell>\n                                            <TableCell>\n                                                <div\n                                                    className={classes.statusContainer}\n                                                >\n                                                    <StatusBullet \n                                                        className={classes.status}\n                                                        color={statusColors[user.status]}  \n                                                        size=\"sm\"\n                                                    />\n                                                    {user.status === 1 ? 'Completed' : user.status === 2 ? 'Missing' : 'Incomplete'}\n                                                </div>\n                                            </TableCell>\n                                            <TableCell>\n                                                {user.ngaydangki}\n                                            </TableCell>\n                                        </TableRow>\n                                    ))}\n                            </TableBody>\n                        </Table>\n                    </div>\n                </PerfectScrollbar>\n            </CardContent>\n            {users.length === 0 ? (\n                <Typography\n                    variant=\"subtitle2\"\n                    style={{ textAlign: 'center' }}\n                >\n                    User not found\n                </Typography>\n            ) : (\n                <CardActions className={classes.actions}>\n                    <TablePagination\n                        component=\"div\"\n                        count={users.length}\n                        onChangePage={handlePageChange}\n                        onChangeRowsPerPage={handleRowsPerPageChange}\n                        page={page}\n                        rowsPerPage={rowsPerPage}\n                        rowsPerPageOptions={[]}\n                        backIconButtonProps={{\n                            'aria-label': 'previous page'\n                        }}\n                        nextIconButtonProps={{\n                            'aria-label': 'next page'\n                        }}\n                        labelRowsPerPage=\"\"\n                    />\n                </CardActions>\n            )}\n        </Card>\n    );\n};\nexport default withStyles(styles)(UsersTable);"]},"metadata":{},"sourceType":"module"}