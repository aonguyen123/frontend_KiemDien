{"ast":null,"code":"import _objectSpread from \"E:\\\\react-material\\\\front-end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"E:\\\\react-material\\\\front-end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"E:\\\\react-material\\\\front-end\\\\src\\\\views\\\\Settings\\\\components\\\\Password\\\\Password.js\";\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { withStyles } from '@material-ui/styles';\nimport { Card, CardHeader, CardContent, CardActions, Divider, Button, TextField } from '@material-ui/core';\nimport { LoadingButton } from 'components';\nimport styles from './styles';\n\nconst Password = props => {\n  const className = props.className,\n        classes = props.classes,\n        user = props.user,\n        updatePassword = props.updatePassword,\n        errors = props.errors,\n        info = props.info,\n        statusUpdateInfo = props.statusUpdateInfo;\n\n  const _useState = useState({\n    password: '',\n    confirm: '',\n    isLoadingButton: false\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        values = _useState2[0],\n        setValues = _useState2[1];\n\n  useEffect(() => {\n    if (Object.entries(info).length > 0) {\n      setValues({\n        password: '',\n        confirm: '',\n        isLoadingButton: false\n      });\n    }\n\n    if (Object.entries(errors).length > 0) {\n      setValues(_objectSpread({}, values, {\n        isLoadingButton: false\n      }));\n    }\n  }, [info, errors]);\n\n  const handleChange = event => {\n    setValues(_objectSpread({}, values, {\n      [event.target.name]: event.target.value\n    }));\n  };\n\n  const handleClick = User => {\n    setValues(_objectSpread({}, values, {\n      isLoadingButton: true\n    }));\n    const user = {};\n    user.password = values.password;\n    user.password_confirm = values.confirm;\n    user.id = User._id;\n    updatePassword(user);\n  };\n\n  return React.createElement(Card, {\n    className: clsx(classes.root, className),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(CardHeader, {\n    subheader: \"Update password\",\n    title: \"Password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }), React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }), React.createElement(CardContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    fullWidth: true,\n    label: \"Password\",\n    name: \"password\",\n    onChange: handleChange,\n    type: \"password\",\n    value: values.password,\n    variant: \"outlined\",\n    error: errors.password && !statusUpdateInfo ? true : false,\n    helperText: errors.password ? \"\".concat(errors.password) : null,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }), React.createElement(TextField, {\n    fullWidth: true,\n    label: \"Confirm password\",\n    name: \"confirm\",\n    onChange: handleChange,\n    style: {\n      marginTop: '1rem'\n    },\n    type: \"password\",\n    value: values.confirm,\n    variant: \"outlined\",\n    error: errors.password_confirm && !statusUpdateInfo ? true : false,\n    helperText: errors.password_confirm ? \"\".concat(errors.password_confirm) : null,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  })), React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }), React.createElement(CardActions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, React.createElement(Button, {\n    color: \"primary\",\n    variant: \"outlined\",\n    onClick: () => handleClick(user),\n    disabled: values.isLoadingButton ? true : false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, values.isLoadingButton && React.createElement(LoadingButton, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }), \"Update\"))));\n};\n\nPassword.propTypes = {\n  className: PropTypes.string\n};\nexport default withStyles(styles)(Password);","map":{"version":3,"sources":["E:\\react-material\\front-end\\src\\views\\Settings\\components\\Password\\Password.js"],"names":["React","useState","useEffect","PropTypes","clsx","withStyles","Card","CardHeader","CardContent","CardActions","Divider","Button","TextField","LoadingButton","styles","Password","props","className","classes","user","updatePassword","errors","info","statusUpdateInfo","password","confirm","isLoadingButton","values","setValues","Object","entries","length","handleChange","event","target","name","value","handleClick","User","password_confirm","id","_id","root","marginTop","propTypes","string"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { withStyles } from '@material-ui/styles';\nimport {\n    Card,\n    CardHeader,\n    CardContent,\n    CardActions,\n    Divider,\n    Button,\n    TextField\n} from '@material-ui/core';\nimport { LoadingButton } from 'components';\nimport styles from './styles';\n\nconst Password = props => {\n    const { className, classes, user, updatePassword, errors, info, statusUpdateInfo } = props;\n\n    const [values, setValues] = useState({\n        password: '',\n        confirm: '',\n        isLoadingButton: false\n    });\n    useEffect(() => {\n        if(Object.entries(info).length > 0)\n        {\n            setValues({\n                password: '',\n                confirm: '',\n                isLoadingButton: false\n            });\n        }\n        if(Object.entries(errors).length > 0)\n        {\n            setValues({\n                ...values,\n                isLoadingButton: false\n            });\n        }\n    },[info, errors]);\n    const handleChange = event => {\n        setValues({\n            ...values,\n            [event.target.name]: event.target.value\n        });\n    };\n    const handleClick = (User) => {\n        setValues({\n            ...values,\n            isLoadingButton: true\n        })\n        const user = {};\n        user.password = values.password;\n        user.password_confirm = values.confirm;\n        user.id = User._id;\n        updatePassword(user);\n    }\n    return (\n        <Card className={clsx(classes.root, className)}>\n            <form>\n                <CardHeader subheader=\"Update password\" title=\"Password\" />\n                <Divider />\n                <CardContent>\n                    <TextField\n                        fullWidth\n                        label=\"Password\"\n                        name=\"password\"\n                        onChange={handleChange}\n                        type=\"password\"\n                        value={values.password}\n                        variant=\"outlined\"\n                        error={(errors.password && !statusUpdateInfo) ? true : false}\n                        helperText = {\n                            errors.password ? `${errors.password}` : null\n                        }\n                    />\n                    <TextField\n                        fullWidth\n                        label=\"Confirm password\"\n                        name=\"confirm\"\n                        onChange={handleChange}\n                        style={{ marginTop: '1rem' }}\n                        type=\"password\"\n                        value={values.confirm}\n                        variant=\"outlined\"\n                        error={(errors.password_confirm && !statusUpdateInfo) ? true : false}\n                        helperText = {\n                            errors.password_confirm ? `${errors.password_confirm}` : null\n                        }\n                    />\n                </CardContent>\n                <Divider />\n                <CardActions>\n                    <Button \n                        color=\"primary\" \n                        variant=\"outlined\"\n                        onClick={() => handleClick(user)}\n                        disabled={values.isLoadingButton ? true : false}\n                    >\n                        {values.isLoadingButton && <LoadingButton />}\n                        Update\n                    </Button>\n                </CardActions>\n            </form>\n        </Card>\n    );\n};\n\nPassword.propTypes = {\n    className: PropTypes.string\n};\n\nexport default withStyles(styles)(Password);\n"]},"metadata":{},"sourceType":"module"}