{"ast":null,"code":"var _jsxFileName = \"E:\\\\react-material\\\\front-end\\\\src\\\\views\\\\Account\\\\components\\\\AccountDetails\\\\AccountDetails.js\";\nimport React, { Component } from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/styles';\nimport { Card, CardHeader, CardContent, CardActions, Divider, Grid, Button, TextField } from '@material-ui/core';\nimport styles from './styles';\nimport { LoadingButton } from './../../../../components';\n\nclass AccountDetails extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleClick = () => {\n      if (this.state !== this.props.user) {\n        this.setState({\n          isLoadingButton: true\n        });\n        const user = this.state;\n        user.id = this.props.user._id;\n        this.props.updateInfo(user);\n      }\n    };\n\n    this.state = {\n      firstName: this.props.user.firstName,\n      lastName: this.props.user.lastName,\n      email: this.props.user.email,\n      sdt: this.props.user.sdt,\n      city: this.props.user.city,\n      country: this.props.user.country,\n      isLoadingButton: false\n    };\n  }\n\n  componentDidUpdate(preProps, preState) {\n    if (preProps.info !== this.props.info) {\n      this.props.getInfoUser(this.props.user._id);\n    }\n\n    if (preProps.user !== this.props.user) {\n      this.setState({\n        isLoadingButton: false\n      });\n    }\n\n    if (preProps.errors !== this.props.errors) {\n      this.setState({\n        isLoadingButton: false\n      });\n    }\n  }\n\n  render() {\n    const _this$props = this.props,\n          className = _this$props.className,\n          classes = _this$props.classes,\n          citys = _this$props.citys,\n          errors = _this$props.errors;\n    const _this$state = this.state,\n          firstName = _this$state.firstName,\n          lastName = _this$state.lastName,\n          email = _this$state.email,\n          sdt = _this$state.sdt,\n          city = _this$state.city,\n          country = _this$state.country,\n          isLoadingButton = _this$state.isLoadingButton;\n    return React.createElement(Card, {\n      className: clsx(classes.root, className),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      autoComplete: \"off\",\n      noValidate: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(CardHeader, {\n      subheader: \"The information can be edited\",\n      title: \"Profile\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), React.createElement(Divider, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }), React.createElement(CardContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      container: true,\n      spacing: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      md: 6,\n      xs: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      fullWidth: true,\n      label: \"First name\",\n      margin: \"dense\",\n      name: \"firstName\",\n      onChange: this.handleChange,\n      required: true,\n      value: firstName,\n      variant: \"outlined\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      md: 6,\n      xs: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      fullWidth: true,\n      label: \"Last name\",\n      margin: \"dense\",\n      name: \"lastName\",\n      onChange: this.handleChange,\n      required: true,\n      value: lastName,\n      variant: \"outlined\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      md: 6,\n      xs: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      fullWidth: true,\n      label: \"Email Address\",\n      margin: \"dense\",\n      name: \"email\",\n      onChange: this.handleChange,\n      required: true,\n      value: email,\n      variant: \"outlined\",\n      error: Object.entries(errors.email).length > 0 ? true : false,\n      helperText: Object.entries(errors.email).length > 0 ? \"\".concat(errors.email) : null,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      md: 6,\n      xs: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      fullWidth: true,\n      label: \"Phone Number\",\n      margin: \"dense\",\n      name: \"sdt\",\n      onChange: this.handleChange,\n      type: \"number\",\n      value: sdt,\n      variant: \"outlined\",\n      error: errors.sdt ? true : false,\n      helperText: errors.sdt ? \"\".concat(errors.sdt) : null,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      md: 6,\n      xs: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      fullWidth: true,\n      label: \"Select City\",\n      margin: \"dense\",\n      name: \"city\",\n      onChange: this.handleChange,\n      required: true,\n      select: true,\n      disabled: citys.length === 0 ? true : false,\n      SelectProps: {\n        native: true\n      },\n      value: city,\n      variant: \"outlined\",\n      rowsMax: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, citys.map(option => React.createElement(\"option\", {\n      key: option._id,\n      value: option.city,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, option.city)))), React.createElement(Grid, {\n      item: true,\n      md: 6,\n      xs: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      fullWidth: true,\n      label: \"Country\",\n      margin: \"dense\",\n      name: \"country\",\n      onChange: this.handleChange,\n      required: true,\n      defaultValue: country,\n      variant: \"outlined\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    })))), React.createElement(Divider, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }), React.createElement(CardActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, React.createElement(Button, {\n      color: \"primary\",\n      variant: \"contained\",\n      onClick: this.handleClick,\n      disabled: isLoadingButton ? true : false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, isLoadingButton && React.createElement(LoadingButton, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }), \"Save details\"))));\n  }\n\n}\n\nAccountDetails.propTypes = {\n  className: PropTypes.string,\n  classes: PropTypes.object,\n  user: PropTypes.object\n};\nexport default withStyles(styles)(AccountDetails);","map":{"version":3,"sources":["E:\\react-material\\front-end\\src\\views\\Account\\components\\AccountDetails\\AccountDetails.js"],"names":["React","Component","clsx","PropTypes","withStyles","Card","CardHeader","CardContent","CardActions","Divider","Grid","Button","TextField","styles","LoadingButton","AccountDetails","constructor","props","handleChange","event","setState","target","name","value","handleClick","state","user","isLoadingButton","id","_id","updateInfo","firstName","lastName","email","sdt","city","country","componentDidUpdate","preProps","preState","info","getInfoUser","errors","render","className","classes","citys","root","Object","entries","length","native","map","option","propTypes","string","object"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/styles';\nimport {\n    Card,\n    CardHeader,\n    CardContent,\n    CardActions,\n    Divider,\n    Grid,\n    Button,\n    TextField\n} from '@material-ui/core';\nimport styles from './styles';\nimport { LoadingButton } from './../../../../components';\n\nclass AccountDetails extends Component {\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            firstName: this.props.user.firstName,\n            lastName: this.props.user.lastName,\n            email: this.props.user.email,\n            sdt: this.props.user.sdt,\n            city: this.props.user.city,\n            country: this.props.user.country,\n            \n            isLoadingButton: false,\n        }\n    }     \n    handleChange = event => {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    }\n    handleClick = () => {\n        if(this.state !== this.props.user)\n        {\n            this.setState({\n                isLoadingButton: true\n            });\n            const user = this.state;\n            user.id = this.props.user._id;\n            this.props.updateInfo(user);\n        }\n    }\n    componentDidUpdate(preProps, preState)\n    {\n        if(preProps.info !== this.props.info)\n        {\n            this.props.getInfoUser(this.props.user._id);\n        }\n        if(preProps.user !== this.props.user)\n        {\n            this.setState({\n                isLoadingButton: false\n            });\n        }\n        if (preProps.errors !== this.props.errors) {\n            this.setState({\n                isLoadingButton: false\n            });\n        }\n    }\n    render() {\n        const { className, classes, citys, errors } = this.props;\n        const { firstName, lastName, email, sdt, city, country, isLoadingButton } = this.state;\n        return (\n                <Card className={clsx(classes.root, className)}>\n                    <form autoComplete=\"off\" noValidate>\n                        <CardHeader\n                            subheader=\"The information can be edited\"\n                            title=\"Profile\"\n                        />\n                        <Divider />\n                        <CardContent>\n                            <Grid container spacing={3}>\n                                <Grid item md={6} xs={12}>\n                                    <TextField\n                                        fullWidth\n                                        label=\"First name\"\n                                        margin=\"dense\"\n                                        name=\"firstName\"\n                                        onChange={this.handleChange}\n                                        required\n                                        value={firstName}\n                                        variant=\"outlined\"\n                                    />\n                                </Grid>\n                                <Grid item md={6} xs={12}>\n                                    <TextField\n                                        fullWidth\n                                        label=\"Last name\"\n                                        margin=\"dense\"\n                                        name=\"lastName\"\n                                        onChange={this.handleChange}\n                                        required\n                                        value={lastName}\n                                        variant=\"outlined\"\n                                    />\n                                </Grid>\n                                <Grid item md={6} xs={12}>\n                                    <TextField\n                                        fullWidth\n                                        label=\"Email Address\"\n                                        margin=\"dense\"\n                                        name=\"email\"\n                                        onChange={this.handleChange}\n                                        required\n                                        value={email}\n                                        variant=\"outlined\"\n                                        error={Object.entries(errors.email).length > 0 ? true : false}\n                                        helperText={\n                                            Object.entries(errors.email).length > 0\n                                                ? `${errors.email}`\n                                                : null\n                                        }\n                                    />\n                                </Grid>\n                                <Grid item md={6} xs={12}>\n                                    <TextField\n                                        fullWidth\n                                        label=\"Phone Number\"\n                                        margin=\"dense\"\n                                        name=\"sdt\"\n                                        onChange={this.handleChange}\n                                        type=\"number\"\n                                        value={sdt}\n                                        variant=\"outlined\"\n                                        error={errors.sdt ? true : false}\n                                        helperText={\n                                            errors.sdt\n                                                ? `${errors.sdt}`\n                                                : null\n                                        }\n                                    />\n                                </Grid>\n                                <Grid item md={6} xs={12}>\n                                    <TextField\n                                        fullWidth\n                                        label=\"Select City\"\n                                        margin=\"dense\"\n                                        name=\"city\"\n                                        onChange={this.handleChange}\n                                        required\n                                        select\n                                        disabled={(citys.length === 0) ? true : false}\n                                        SelectProps={{ native: true }}\n                                        value={city}\n                                        variant=\"outlined\"\n                                        rowsMax={10}\n                                    >\n                                        {citys.map(option => (\n                                            <option\n                                                key={option._id}\n                                                value={option.city}\n                                            >\n                                                {option.city}\n                                            </option>\n                                        ))} \n                                    </TextField>\n                                </Grid>\n                                <Grid item md={6} xs={12}>\n                                    <TextField\n                                        fullWidth\n                                        label=\"Country\"\n                                        margin=\"dense\"\n                                        name=\"country\"\n                                        onChange={this.handleChange}\n                                        required\n                                        defaultValue={country}\n                                        variant=\"outlined\"\n                                        disabled\n                                    />\n                                </Grid>\n                            </Grid>\n                        </CardContent>\n                        <Divider />\n                        <CardActions>\n                            <Button \n                                color=\"primary\" \n                                variant=\"contained\" \n                                onClick={this.handleClick}\n                                disabled={isLoadingButton ? true : false}\n                            >\n                                {isLoadingButton && <LoadingButton /> }\n                                Save details\n                            </Button>\n                        </CardActions>\n                    </form>\n                </Card>\n        );\n    }\n}\nAccountDetails.propTypes = {\n    className: PropTypes.string,\n    classes: PropTypes.object,\n    user: PropTypes.object\n};\n\nexport default withStyles(styles)(AccountDetails);\n"]},"metadata":{},"sourceType":"module"}