{"ast":null,"code":"import _slicedToArray from \"E:\\\\react-material\\\\front-end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"E:\\\\react-material\\\\front-end\\\\src\\\\views\\\\PresencesDetail\\\\components\\\\PresencesTable\\\\PresencesTable.js\";\nimport React, { useState } from 'react';\nimport clsx from 'clsx';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { withStyles } from '@material-ui/styles';\nimport { Card, CardActions, CardContent, Avatar, Checkbox, Table, TableBody, TableCell, TableHead, TableRow, Typography, TablePagination } from '@material-ui/core';\nimport moment from 'moment';\nimport { getInitials } from 'helpers';\nimport { ToolbarTable } from './components';\nimport styles from './styles';\n\nconst PresencesTable = props => {\n  const className = props.className,\n        users = props.users,\n        classes = props.classes,\n        deleteUsers = props.deleteUsers;\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        selectedUsers = _useState2[0],\n        setSelectedUsers = _useState2[1];\n\n  const _useState3 = useState(5),\n        _useState4 = _slicedToArray(_useState3, 2),\n        rowsPerPage = _useState4[0],\n        setRowsPerPage = _useState4[1];\n\n  const _useState5 = useState(0),\n        _useState6 = _slicedToArray(_useState5, 2),\n        page = _useState6[0],\n        setPage = _useState6[1];\n\n  const handleSelectAll = event => {\n    let selectedUsers;\n\n    if (event.target.checked) {\n      selectedUsers = users.map(user => user._id);\n    } else {\n      selectedUsers = [];\n    }\n\n    setSelectedUsers(selectedUsers);\n  };\n\n  const handleSelectOne = (event, id) => {\n    const selectedIndex = selectedUsers.indexOf(id);\n    let newSelectedUsers = [];\n\n    if (selectedIndex === -1) {\n      newSelectedUsers = newSelectedUsers.concat(selectedUsers, id);\n    } else if (selectedIndex === 0) {\n      newSelectedUsers = newSelectedUsers.concat(selectedUsers.slice(1));\n    } else if (selectedIndex === selectedUsers.length - 1) {\n      newSelectedUsers = newSelectedUsers.concat(selectedUsers.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelectedUsers = newSelectedUsers.concat(selectedUsers.slice(0, selectedIndex), selectedUsers.slice(selectedIndex + 1));\n    }\n\n    setSelectedUsers(newSelectedUsers);\n  };\n\n  const handlePageChange = (event, page) => {\n    setPage(page);\n  };\n\n  const handleRowsPerPageChange = event => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  return React.createElement(Card, {\n    className: clsx(classes.root, className),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(ToolbarTable, {\n    selectedUsers: selectedUsers,\n    deleteUsers: deleteUsers,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }), React.createElement(CardContent, {\n    className: classes.content,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(PerfectScrollbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.inner,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, users.length === 0 ? React.createElement(Typography, {\n    variant: \"h5\",\n    style: {\n      textAlign: 'center'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, \"User not found\") : React.createElement(Table, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(TableHead, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(TableRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(TableCell, {\n    padding: \"checkbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(Checkbox, {\n    checked: selectedUsers.length === users.length,\n    color: \"primary\",\n    indeterminate: selectedUsers.length > 0 && selectedUsers.length < users.length,\n    onChange: handleSelectAll,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  })), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, \"Name\"), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, \"Email\"), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, \"Phone\"), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, \"Gender\"), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, \"Status\"), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, \"Registration date\"))), React.createElement(TableBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, users.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(user => React.createElement(TableRow, {\n    className: classes.tableRow,\n    hover: true,\n    key: user._id,\n    selected: selectedUsers.indexOf(user._id) !== -1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, React.createElement(TableCell, {\n    padding: \"checkbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, React.createElement(Checkbox, {\n    checked: selectedUsers.indexOf(user._id) !== -1,\n    color: \"primary\",\n    onChange: event => handleSelectOne(event, user._id),\n    value: \"true\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  })), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.nameContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, React.createElement(Avatar, {\n    className: classes.avatar,\n    src: user.avatar ? \"\".concat(URI, \"/getAvatar/\").concat(user.avatar) : \"//www.gravatar.com/avatar/f8aef9003205946523250a062b54bbb6?s=200&r=pg&d=mm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, getInitials(user.name)), React.createElement(Typography, {\n    variant: \"body1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }, user.name))), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, user.email), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, user.sdt), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  }, user.gioitinh ? \"Nam\" : \"N\\u1EEF\"), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.statusContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }, React.createElement(StatusBullet, {\n    className: classes.status,\n    color: statusColors[user.status],\n    size: \"sm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }), user.status === 1 ? 'Completed' : user.status === 2 ? 'Missing' : 'Incomplete')), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204\n    },\n    __self: this\n  }, moment(user.createdAt).format('DD/MM/YYYY'))))))))), React.createElement(CardActions, {\n    className: classes.actions,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215\n    },\n    __self: this\n  }, React.createElement(TablePagination, {\n    component: \"div\",\n    count: users.length,\n    onChangePage: handlePageChange,\n    onChangeRowsPerPage: handleRowsPerPageChange,\n    page: page,\n    rowsPerPage: rowsPerPage,\n    rowsPerPageOptions: [],\n    backIconButtonProps: {\n      'aria-label': 'previous page'\n    },\n    nextIconButtonProps: {\n      'aria-label': 'next page'\n    },\n    labelRowsPerPage: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216\n    },\n    __self: this\n  })));\n};\n\nexport default withStyles(styles)(PresencesTable);","map":{"version":3,"sources":["E:\\react-material\\front-end\\src\\views\\PresencesDetail\\components\\PresencesTable\\PresencesTable.js"],"names":["React","useState","clsx","PerfectScrollbar","withStyles","Card","CardActions","CardContent","Avatar","Checkbox","Table","TableBody","TableCell","TableHead","TableRow","Typography","TablePagination","moment","getInitials","ToolbarTable","styles","PresencesTable","props","className","users","classes","deleteUsers","selectedUsers","setSelectedUsers","rowsPerPage","setRowsPerPage","page","setPage","handleSelectAll","event","target","checked","map","user","_id","handleSelectOne","id","selectedIndex","indexOf","newSelectedUsers","concat","slice","length","handlePageChange","handleRowsPerPageChange","value","root","content","inner","textAlign","tableRow","nameContainer","avatar","URI","name","email","sdt","gioitinh","statusContainer","status","statusColors","createdAt","format","actions"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,gBAAP,MAA6B,yBAA7B;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,SACIC,IADJ,EAEIC,WAFJ,EAGIC,WAHJ,EAIIC,MAJJ,EAKIC,QALJ,EAMIC,KANJ,EAOIC,SAPJ,EAQIC,SARJ,EASIC,SATJ,EAUIC,QAVJ,EAWIC,UAXJ,EAYIC,eAZJ,QAaO,mBAbP;AAcA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,WAAT,QAA4B,SAA5B;AACA,SAASC,YAAT,QAA6B,cAA7B;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AAEA,MAAMC,cAAc,GAAGC,KAAK,IAAI;AAAA,QACpBC,SADoB,GACuBD,KADvB,CACpBC,SADoB;AAAA,QACTC,KADS,GACuBF,KADvB,CACTE,KADS;AAAA,QACFC,OADE,GACuBH,KADvB,CACFG,OADE;AAAA,QACOC,WADP,GACuBJ,KADvB,CACOI,WADP;;AAAA,oBAEczB,QAAQ,CAAC,EAAD,CAFtB;AAAA;AAAA,QAErB0B,aAFqB;AAAA,QAENC,gBAFM;;AAAA,qBAGU3B,QAAQ,CAAC,CAAD,CAHlB;AAAA;AAAA,QAGrB4B,WAHqB;AAAA,QAGRC,cAHQ;;AAAA,qBAIJ7B,QAAQ,CAAC,CAAD,CAJJ;AAAA;AAAA,QAIrB8B,IAJqB;AAAA,QAIfC,OAJe;;AAM5B,QAAMC,eAAe,GAAGC,KAAK,IAAI;AAC7B,QAAIP,aAAJ;;AACA,QAAIO,KAAK,CAACC,MAAN,CAAaC,OAAjB,EAA0B;AACtBT,MAAAA,aAAa,GAAGH,KAAK,CAACa,GAAN,CAAUC,IAAI,IAAIA,IAAI,CAACC,GAAvB,CAAhB;AACH,KAFD,MAEO;AACHZ,MAAAA,aAAa,GAAG,EAAhB;AACH;;AACDC,IAAAA,gBAAgB,CAACD,aAAD,CAAhB;AACH,GARD;;AASA,QAAMa,eAAe,GAAG,CAACN,KAAD,EAAQO,EAAR,KAAe;AACnC,UAAMC,aAAa,GAAGf,aAAa,CAACgB,OAAd,CAAsBF,EAAtB,CAAtB;AACA,QAAIG,gBAAgB,GAAG,EAAvB;;AAEA,QAAIF,aAAa,KAAK,CAAC,CAAvB,EAA0B;AACtBE,MAAAA,gBAAgB,GAAGA,gBAAgB,CAACC,MAAjB,CAAwBlB,aAAxB,EAAuCc,EAAvC,CAAnB;AACH,KAFD,MAEO,IAAIC,aAAa,KAAK,CAAtB,EAAyB;AAC5BE,MAAAA,gBAAgB,GAAGA,gBAAgB,CAACC,MAAjB,CAAwBlB,aAAa,CAACmB,KAAd,CAAoB,CAApB,CAAxB,CAAnB;AACH,KAFM,MAEA,IAAIJ,aAAa,KAAKf,aAAa,CAACoB,MAAd,GAAuB,CAA7C,EAAgD;AACnDH,MAAAA,gBAAgB,GAAGA,gBAAgB,CAACC,MAAjB,CACflB,aAAa,CAACmB,KAAd,CAAoB,CAApB,EAAuB,CAAC,CAAxB,CADe,CAAnB;AAGH,KAJM,MAIA,IAAIJ,aAAa,GAAG,CAApB,EAAuB;AAC1BE,MAAAA,gBAAgB,GAAGA,gBAAgB,CAACC,MAAjB,CACflB,aAAa,CAACmB,KAAd,CAAoB,CAApB,EAAuBJ,aAAvB,CADe,EAEff,aAAa,CAACmB,KAAd,CAAoBJ,aAAa,GAAG,CAApC,CAFe,CAAnB;AAIH;;AACDd,IAAAA,gBAAgB,CAACgB,gBAAD,CAAhB;AACH,GAnBD;;AAoBA,QAAMI,gBAAgB,GAAG,CAACd,KAAD,EAAQH,IAAR,KAAiB;AACtCC,IAAAA,OAAO,CAACD,IAAD,CAAP;AACH,GAFD;;AAGA,QAAMkB,uBAAuB,GAAGf,KAAK,IAAI;AACrCJ,IAAAA,cAAc,CAAC,CAACI,KAAK,CAACC,MAAN,CAAae,KAAf,CAAd;AACAlB,IAAAA,OAAO,CAAC,CAAD,CAAP;AACH,GAHD;;AAKA,SACI,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAE9B,IAAI,CAACuB,OAAO,CAAC0B,IAAT,EAAe5B,SAAf,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,YAAD;AACI,IAAA,aAAa,EAAEI,aADnB;AAEI,IAAA,WAAW,EAAED,WAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAKI,oBAAC,WAAD;AAAa,IAAA,SAAS,EAAED,OAAO,CAAC2B,OAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAE3B,OAAO,CAAC4B,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK7B,KAAK,CAACuB,MAAN,KAAiB,CAAjB,GACG,oBAAC,UAAD;AACI,IAAA,OAAO,EAAC,IADZ;AAEI,IAAA,KAAK,EAAE;AAAEO,MAAAA,SAAS,EAAE;AAAb,KAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADH,GAQG,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,SAAD;AAAW,IAAA,OAAO,EAAC,UAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,QAAD;AACI,IAAA,OAAO,EACH3B,aAAa,CAACoB,MAAd,KACAvB,KAAK,CAACuB,MAHd;AAKI,IAAA,KAAK,EAAC,SALV;AAMI,IAAA,aAAa,EACTpB,aAAa,CAACoB,MAAd,GAAuB,CAAvB,IACApB,aAAa,CAACoB,MAAd,GACIvB,KAAK,CAACuB,MATlB;AAWI,IAAA,QAAQ,EAAEd,eAXd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,EAgBI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAhBJ,EAiBI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAjBJ,EAkBI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAlBJ,EAmBI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAnBJ,EAoBI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cApBJ,EAqBI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBArBJ,CADJ,CADJ,EA0BI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKT,KAAK,CACDsB,KADJ,CAEOf,IAAI,GAAGF,WAFd,EAGOE,IAAI,GAAGF,WAAP,GAAqBA,WAH5B,EAKIQ,GALJ,CAKQC,IAAI,IACL,oBAAC,QAAD;AACI,IAAA,SAAS,EAAEb,OAAO,CAAC8B,QADvB;AAEI,IAAA,KAAK,MAFT;AAGI,IAAA,GAAG,EAAEjB,IAAI,CAACC,GAHd;AAII,IAAA,QAAQ,EACJZ,aAAa,CAACgB,OAAd,CACIL,IAAI,CAACC,GADT,MAEM,CAAC,CAPf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAUI,oBAAC,SAAD;AAAW,IAAA,OAAO,EAAC,UAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,QAAD;AACI,IAAA,OAAO,EACHZ,aAAa,CAACgB,OAAd,CACIL,IAAI,CAACC,GADT,MAEM,CAAC,CAJf;AAMI,IAAA,KAAK,EAAC,SANV;AAOI,IAAA,QAAQ,EAAEL,KAAK,IACXM,eAAe,CACXN,KADW,EAEXI,IAAI,CAACC,GAFM,CARvB;AAaI,IAAA,KAAK,EAAC,MAbV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAVJ,EA2BI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AACI,IAAA,SAAS,EACLd,OAAO,CAAC+B,aAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKI,oBAAC,MAAD;AACI,IAAA,SAAS,EACL/B,OAAO,CAACgC,MAFhB;AAII,IAAA,GAAG,EACCnB,IAAI,CAACmB,MAAL,aACSC,GADT,wBAC0BpB,IAAI,CAACmB,MAD/B,gFALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAUKvC,WAAW,CACRoB,IAAI,CAACqB,IADG,CAVhB,CALJ,EAmBI,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAC,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKrB,IAAI,CAACqB,IADV,CAnBJ,CADJ,CA3BJ,EAoDI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKrB,IAAI,CAACsB,KADV,CApDJ,EAuDI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKtB,IAAI,CAACuB,GADV,CAvDJ,EA0DI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKvB,IAAI,CAACwB,QAAL,oBADL,CA1DJ,EA+DI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AACI,IAAA,SAAS,EACLrC,OAAO,CAACsC,eAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKI,oBAAC,YAAD;AACI,IAAA,SAAS,EACLtC,OAAO,CAACuC,MAFhB;AAII,IAAA,KAAK,EACDC,YAAY,CACR3B,IAAI,CAAC0B,MADG,CALpB;AASI,IAAA,IAAI,EAAC,IATT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALJ,EAgBK1B,IAAI,CAAC0B,MAAL,KAAgB,CAAhB,GACK,WADL,GAEK1B,IAAI,CAAC0B,MAAL,KAAgB,CAAhB,GACA,SADA,GAEA,YApBV,CADJ,CA/DJ,EAuFI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK/C,MAAM,CAACqB,IAAI,CAAC4B,SAAN,CAAN,CAAuBC,MAAvB,CAA8B,YAA9B,CADL,CAvFJ,CANP,CADL,CA1BJ,CATR,CADJ,CADJ,CALJ,EAmJI,oBAAC,WAAD;AAAa,IAAA,SAAS,EAAE1C,OAAO,CAAC2C,OAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,eAAD;AACI,IAAA,SAAS,EAAC,KADd;AAEI,IAAA,KAAK,EAAE5C,KAAK,CAACuB,MAFjB;AAGI,IAAA,YAAY,EAAEC,gBAHlB;AAII,IAAA,mBAAmB,EAAEC,uBAJzB;AAKI,IAAA,IAAI,EAAElB,IALV;AAMI,IAAA,WAAW,EAAEF,WANjB;AAOI,IAAA,kBAAkB,EAAE,EAPxB;AAQI,IAAA,mBAAmB,EAAE;AACjB,oBAAc;AADG,KARzB;AAWI,IAAA,mBAAmB,EAAE;AACjB,oBAAc;AADG,KAXzB;AAcI,IAAA,gBAAgB,EAAC,EAdrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAnJJ,CADJ;AAwKH,CAnND;;AAoNA,eAAezB,UAAU,CAACgB,MAAD,CAAV,CAAmBC,cAAnB,CAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport clsx from 'clsx';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { withStyles } from '@material-ui/styles';\r\nimport {\r\n    Card,\r\n    CardActions,\r\n    CardContent,\r\n    Avatar,\r\n    Checkbox,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableHead,\r\n    TableRow,\r\n    Typography,\r\n    TablePagination\r\n} from '@material-ui/core';\r\nimport moment from 'moment';\r\nimport { getInitials } from 'helpers';\r\nimport { ToolbarTable } from './components';\r\nimport styles from './styles';\r\n\r\nconst PresencesTable = props => {\r\n    const { className, users, classes, deleteUsers } = props;\r\n    const [selectedUsers, setSelectedUsers] = useState([]);\r\n    const [rowsPerPage, setRowsPerPage] = useState(5);\r\n    const [page, setPage] = useState(0);\r\n\r\n    const handleSelectAll = event => {\r\n        let selectedUsers;\r\n        if (event.target.checked) {\r\n            selectedUsers = users.map(user => user._id);\r\n        } else {\r\n            selectedUsers = [];\r\n        }\r\n        setSelectedUsers(selectedUsers);\r\n    };\r\n    const handleSelectOne = (event, id) => {\r\n        const selectedIndex = selectedUsers.indexOf(id);\r\n        let newSelectedUsers = [];\r\n\r\n        if (selectedIndex === -1) {\r\n            newSelectedUsers = newSelectedUsers.concat(selectedUsers, id);\r\n        } else if (selectedIndex === 0) {\r\n            newSelectedUsers = newSelectedUsers.concat(selectedUsers.slice(1));\r\n        } else if (selectedIndex === selectedUsers.length - 1) {\r\n            newSelectedUsers = newSelectedUsers.concat(\r\n                selectedUsers.slice(0, -1)\r\n            );\r\n        } else if (selectedIndex > 0) {\r\n            newSelectedUsers = newSelectedUsers.concat(\r\n                selectedUsers.slice(0, selectedIndex),\r\n                selectedUsers.slice(selectedIndex + 1)\r\n            );\r\n        }\r\n        setSelectedUsers(newSelectedUsers);\r\n    };\r\n    const handlePageChange = (event, page) => {\r\n        setPage(page);\r\n    };\r\n    const handleRowsPerPageChange = event => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n\r\n    return (\r\n        <Card className={clsx(classes.root, className)}>\r\n            <ToolbarTable\r\n                selectedUsers={selectedUsers}\r\n                deleteUsers={deleteUsers}\r\n            />\r\n            <CardContent className={classes.content}>\r\n                <PerfectScrollbar>\r\n                    <div className={classes.inner}>\r\n                        {users.length === 0 ? (\r\n                            <Typography\r\n                                variant=\"h5\"\r\n                                style={{ textAlign: 'center' }}\r\n                            >\r\n                                User not found\r\n                            </Typography>\r\n                        ) : (\r\n                            <Table>\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell padding=\"checkbox\">\r\n                                            <Checkbox\r\n                                                checked={\r\n                                                    selectedUsers.length ===\r\n                                                    users.length\r\n                                                }\r\n                                                color=\"primary\"\r\n                                                indeterminate={\r\n                                                    selectedUsers.length > 0 &&\r\n                                                    selectedUsers.length <\r\n                                                        users.length\r\n                                                }\r\n                                                onChange={handleSelectAll}\r\n                                            />\r\n                                        </TableCell>\r\n                                        <TableCell>Name</TableCell>\r\n                                        <TableCell>Email</TableCell>\r\n                                        <TableCell>Phone</TableCell>\r\n                                        <TableCell>Gender</TableCell>\r\n                                        <TableCell>Status</TableCell>\r\n                                        <TableCell>Registration date</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {users\r\n                                        .slice(\r\n                                            page * rowsPerPage,\r\n                                            page * rowsPerPage + rowsPerPage\r\n                                        )\r\n                                        .map(user => (\r\n                                            <TableRow\r\n                                                className={classes.tableRow}\r\n                                                hover\r\n                                                key={user._id}\r\n                                                selected={\r\n                                                    selectedUsers.indexOf(\r\n                                                        user._id\r\n                                                    ) !== -1\r\n                                                }\r\n                                            >\r\n                                                <TableCell padding=\"checkbox\">\r\n                                                    <Checkbox\r\n                                                        checked={\r\n                                                            selectedUsers.indexOf(\r\n                                                                user._id\r\n                                                            ) !== -1\r\n                                                        }\r\n                                                        color=\"primary\"\r\n                                                        onChange={event =>\r\n                                                            handleSelectOne(\r\n                                                                event,\r\n                                                                user._id\r\n                                                            )\r\n                                                        }\r\n                                                        value=\"true\"\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <div\r\n                                                        className={\r\n                                                            classes.nameContainer\r\n                                                        }\r\n                                                    >\r\n                                                        <Avatar\r\n                                                            className={\r\n                                                                classes.avatar\r\n                                                            }\r\n                                                            src={\r\n                                                                user.avatar\r\n                                                                    ? `${URI}/getAvatar/${user.avatar}`\r\n                                                                    : `//www.gravatar.com/avatar/f8aef9003205946523250a062b54bbb6?s=200&r=pg&d=mm`\r\n                                                            }\r\n                                                        >\r\n                                                            {getInitials(\r\n                                                                user.name\r\n                                                            )}\r\n                                                        </Avatar>\r\n                                                        <Typography variant=\"body1\">\r\n                                                            {user.name}\r\n                                                        </Typography>\r\n                                                    </div>\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    {user.email}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    {user.sdt}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    {user.gioitinh\r\n                                                        ? `Nam`\r\n                                                        : `Nữ`}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <div\r\n                                                        className={\r\n                                                            classes.statusContainer\r\n                                                        }\r\n                                                    >\r\n                                                        <StatusBullet\r\n                                                            className={\r\n                                                                classes.status\r\n                                                            }\r\n                                                            color={\r\n                                                                statusColors[\r\n                                                                    user.status\r\n                                                                ]\r\n                                                            }\r\n                                                            size=\"sm\"\r\n                                                        />\r\n                                                        {user.status === 1\r\n                                                            ? 'Completed'\r\n                                                            : user.status === 2\r\n                                                            ? 'Missing'\r\n                                                            : 'Incomplete'}\r\n                                                    </div>\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    {moment(user.createdAt).format('DD/MM/YYYY')}\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                        ))}\r\n                                </TableBody>\r\n                            </Table>\r\n                        )}\r\n                    </div>\r\n                </PerfectScrollbar>\r\n            </CardContent>\r\n            <CardActions className={classes.actions}>\r\n                <TablePagination\r\n                    component=\"div\"\r\n                    count={users.length}\r\n                    onChangePage={handlePageChange}\r\n                    onChangeRowsPerPage={handleRowsPerPageChange}\r\n                    page={page}\r\n                    rowsPerPage={rowsPerPage}\r\n                    rowsPerPageOptions={[]}\r\n                    backIconButtonProps={{\r\n                        'aria-label': 'previous page'\r\n                    }}\r\n                    nextIconButtonProps={{\r\n                        'aria-label': 'next page'\r\n                    }}\r\n                    labelRowsPerPage=\"\"\r\n                />\r\n            </CardActions>\r\n        </Card>\r\n    );\r\n};\r\nexport default withStyles(styles)(PresencesTable);\r\n"]},"metadata":{},"sourceType":"module"}