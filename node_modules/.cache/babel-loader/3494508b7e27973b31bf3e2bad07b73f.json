{"ast":null,"code":"import _slicedToArray from \"E:\\\\react-material\\\\front-end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"E:\\\\react-material\\\\front-end\\\\src\\\\views\\\\UserList\\\\components\\\\UsersTable\\\\UsersTable.js\";\nimport React, { useState } from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { withStyles } from '@material-ui/styles';\nimport { Card, CardActions, CardContent, Avatar, Checkbox, Table, TableBody, TableCell, TableHead, TableRow, Typography, TablePagination } from '@material-ui/core';\nimport { getInitials } from 'helpers';\nimport { ToolbarTable } from './components';\nimport styles from './styles';\n\nconst UsersTable = props => {\n  const className = props.className,\n        users = props.users,\n        classes = props.classes;\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        selectedUsers = _useState2[0],\n        setSelectedUsers = _useState2[1];\n\n  const _useState3 = useState(1),\n        _useState4 = _slicedToArray(_useState3, 2),\n        rowsPerPage = _useState4[0],\n        setRowsPerPage = _useState4[1];\n\n  const _useState5 = useState(0),\n        _useState6 = _slicedToArray(_useState5, 2),\n        page = _useState6[0],\n        setPage = _useState6[1];\n\n  const handleSelectAll = event => {\n    const users = props.users;\n    let selectedUsers;\n\n    if (event.target.checked) {\n      selectedUsers = users.map(user => user.id);\n    } else {\n      selectedUsers = [];\n    }\n\n    console.log(selectedUsers);\n    setSelectedUsers(selectedUsers);\n  };\n\n  const handleSelectOne = (event, id) => {\n    const selectedIndex = selectedUsers.indexOf(id);\n    let newSelectedUsers = [];\n\n    if (selectedIndex === -1) {\n      newSelectedUsers = newSelectedUsers.concat(selectedUsers, id);\n    } else if (selectedIndex === 0) {\n      newSelectedUsers = newSelectedUsers.concat(selectedUsers.slice(1));\n    } else if (selectedIndex === selectedUsers.length - 1) {\n      newSelectedUsers = newSelectedUsers.concat(selectedUsers.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelectedUsers = newSelectedUsers.concat(selectedUsers.slice(0, selectedIndex), selectedUsers.slice(selectedIndex + 1));\n    }\n\n    console.log(newSelectedUsers);\n    setSelectedUsers(newSelectedUsers);\n  };\n\n  const handlePageChange = (event, page) => {\n    setPage(page);\n  };\n\n  const handleRowsPerPageChange = event => {\n    setRowsPerPage(event.target.value);\n  };\n\n  return React.createElement(Card, {\n    className: clsx(classes.root, className),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(CardContent, {\n    className: classes.content,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(PerfectScrollbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(ToolbarTable, {\n    numSelected: selectedUsers.length,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: classes.inner,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(Table, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(TableHead, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(TableRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(TableCell, {\n    padding: \"checkbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(Checkbox, {\n    checked: selectedUsers.length === users.length,\n    color: \"primary\",\n    indeterminate: selectedUsers.length > 0 && selectedUsers.length < users.length,\n    onChange: handleSelectAll,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  })), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, \"Name\"), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, \"M\\xE3 user\"), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, \"Email\"), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, \"Phone\"), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, \"Registration date\"))), React.createElement(TableBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, users.slice(0, rowsPerPage).map(user => React.createElement(TableRow, {\n    className: classes.tableRow,\n    hover: true,\n    key: user._id,\n    selected: selectedUsers.indexOf(user._id) !== -1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, React.createElement(TableCell, {\n    padding: \"checkbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, React.createElement(Checkbox, {\n    checked: selectedUsers.indexOf(user._id) !== -1,\n    color: \"primary\",\n    onChange: event => handleSelectOne(event, user._id),\n    value: \"true\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  })), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.nameContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, React.createElement(Avatar, {\n    className: classes.avatar,\n    src: user.avatar ? user.avatar : \"//www.gravatar.com/avatar/f8aef9003205946523250a062b54bbb6?s=200&r=pg&d=mm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, getInitials(\"\".concat(user.firstName).concat(user.lastName))), React.createElement(Typography, {\n    variant: \"body1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, \"\".concat(user.firstName, \" \").concat(user.lastName)))), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, user.maGV), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, user.email), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, user.sdt), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, moment(user.createdAt).format('DD/MM/YYYY'))))))))), React.createElement(CardActions, {\n    className: classes.actions,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.mobile,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, React.createElement(TablePagination, {\n    component: \"div\",\n    count: users.length,\n    onChangePage: handlePageChange,\n    onChangeRowsPerPage: handleRowsPerPageChange,\n    page: page,\n    rowsPerPage: rowsPerPage,\n    rowsPerPageOptions: [1, 5, 10, 25],\n    backIconButtonProps: {\n      'aria-label': 'previous page'\n    },\n    nextIconButtonProps: {\n      'aria-label': 'next page'\n    },\n    labelRowsPerPage: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }))));\n};\n\nUsersTable.propTypes = {\n  className: PropTypes.string,\n  users: PropTypes.array.isRequired\n};\nexport default withStyles(styles)(UsersTable);","map":{"version":3,"sources":["E:\\react-material\\front-end\\src\\views\\UserList\\components\\UsersTable\\UsersTable.js"],"names":["React","useState","clsx","PropTypes","moment","PerfectScrollbar","withStyles","Card","CardActions","CardContent","Avatar","Checkbox","Table","TableBody","TableCell","TableHead","TableRow","Typography","TablePagination","getInitials","ToolbarTable","styles","UsersTable","props","className","users","classes","selectedUsers","setSelectedUsers","rowsPerPage","setRowsPerPage","page","setPage","handleSelectAll","event","target","checked","map","user","id","console","log","handleSelectOne","selectedIndex","indexOf","newSelectedUsers","concat","slice","length","handlePageChange","handleRowsPerPageChange","value","root","content","inner","tableRow","_id","nameContainer","avatar","firstName","lastName","maGV","email","sdt","createdAt","format","actions","mobile","propTypes","string","array","isRequired"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { withStyles } from '@material-ui/styles';\nimport {\n    Card,\n    CardActions,\n    CardContent,\n    Avatar,\n    Checkbox,\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableRow,\n    Typography,\n    TablePagination\n} from '@material-ui/core';\n\nimport { getInitials } from 'helpers';\nimport { ToolbarTable } from './components';\nimport styles from './styles';\n\nconst UsersTable = props => {\n    const { className, users, classes } = props;\n\n    const [selectedUsers, setSelectedUsers] = useState([]);\n    const [rowsPerPage, setRowsPerPage] = useState(1);\n    const [page, setPage] = useState(0);\n\n    const handleSelectAll = event => {\n        const { users } = props;\n\n        let selectedUsers;\n\n        if (event.target.checked) {\n            selectedUsers = users.map(user => user.id);\n        } else {\n            selectedUsers = [];\n        }\n        console.log(selectedUsers);\n        setSelectedUsers(selectedUsers);\n    };\n\n    const handleSelectOne = (event, id) => {\n        const selectedIndex = selectedUsers.indexOf(id);\n        let newSelectedUsers = [];\n\n        if (selectedIndex === -1) {\n            newSelectedUsers = newSelectedUsers.concat(selectedUsers, id);\n        } else if (selectedIndex === 0) {\n            newSelectedUsers = newSelectedUsers.concat(selectedUsers.slice(1));\n        } else if (selectedIndex === selectedUsers.length - 1) {\n            newSelectedUsers = newSelectedUsers.concat(\n                selectedUsers.slice(0, -1)\n            );\n        } else if (selectedIndex > 0) {\n            newSelectedUsers = newSelectedUsers.concat(\n                selectedUsers.slice(0, selectedIndex),\n                selectedUsers.slice(selectedIndex + 1)\n            );\n        }\n        console.log(newSelectedUsers);\n        setSelectedUsers(newSelectedUsers);\n    };\n\n    const handlePageChange = (event, page) => {\n        setPage(page);\n    };\n\n    const handleRowsPerPageChange = event => {\n        setRowsPerPage(event.target.value);\n    };\n\n    return (\n        <Card className={clsx(classes.root, className)}>\n            <CardContent className={classes.content}>\n                <PerfectScrollbar>\n                    <ToolbarTable numSelected={selectedUsers.length} />\n                    <div className={classes.inner}>\n                        <Table>\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell padding=\"checkbox\">\n                                        <Checkbox\n                                            checked={\n                                                selectedUsers.length ===\n                                                users.length\n                                            }\n                                            color=\"primary\"\n                                            indeterminate={\n                                                selectedUsers.length > 0 &&\n                                                selectedUsers.length <\n                                                    users.length\n                                            }\n                                            onChange={handleSelectAll}\n                                        />\n                                    </TableCell>\n                                    <TableCell>Name</TableCell>\n                                    <TableCell>Mã user</TableCell>\n                                    <TableCell>Email</TableCell>\n                                    <TableCell>Phone</TableCell>\n                                    <TableCell>Registration date</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {users.slice(0, rowsPerPage).map(user => (\n                                    <TableRow\n                                        className={classes.tableRow}\n                                        hover\n                                        key={user._id}\n                                        selected={\n                                            selectedUsers.indexOf(user._id) !==\n                                            -1\n                                        }\n                                    >\n                                        <TableCell padding=\"checkbox\">\n                                            <Checkbox\n                                                checked={\n                                                    selectedUsers.indexOf(\n                                                        user._id\n                                                    ) !== -1\n                                                }\n                                                color=\"primary\"\n                                                onChange={event =>\n                                                    handleSelectOne(\n                                                        event,\n                                                        user._id\n                                                    )\n                                                }\n                                                value=\"true\"\n                                            />\n                                        </TableCell>\n                                        <TableCell>\n                                            <div\n                                                className={\n                                                    classes.nameContainer\n                                                }\n                                            >\n                                                <Avatar\n                                                    className={classes.avatar}\n                                                    src={user.avatar ? user.avatar : `//www.gravatar.com/avatar/f8aef9003205946523250a062b54bbb6?s=200&r=pg&d=mm`}\n                                                >\n                                                    {getInitials(`${user.firstName}${user.lastName}`)}\n                                                </Avatar>\n                                                <Typography variant=\"body1\">\n                                                    {`${user.firstName} ${user.lastName}`}\n                                                </Typography>\n                                            </div>\n                                        </TableCell>\n                                        <TableCell>{user.maGV}</TableCell>\n                                        <TableCell>{user.email}</TableCell>\n                                        <TableCell>{user.sdt}</TableCell>\n                                        <TableCell>\n                                            {moment(user.createdAt).format(\n                                                'DD/MM/YYYY'\n                                            )}\n                                        </TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </div>\n                </PerfectScrollbar>\n            </CardContent>\n            <CardActions className={classes.actions}>\n                <div className={classes.mobile}>\n                    <TablePagination\n                        component=\"div\"\n                        count={users.length}\n                        onChangePage={handlePageChange}\n                        onChangeRowsPerPage={handleRowsPerPageChange}\n                        page={page}\n                        rowsPerPage={rowsPerPage}\n                        rowsPerPageOptions={[1, 5, 10, 25]}\n                        backIconButtonProps={{\n                            'aria-label': 'previous page'\n                        }}\n                        nextIconButtonProps={{\n                            'aria-label': 'next page'\n                        }}\n                        labelRowsPerPage=\"\"\n                    />\n                </div>\n            </CardActions>\n        </Card>\n    );\n};\n\nUsersTable.propTypes = {\n    className: PropTypes.string,\n    users: PropTypes.array.isRequired\n};\n\nexport default withStyles(styles)(UsersTable);\n"]},"metadata":{},"sourceType":"module"}