{"ast":null,"code":"import _objectSpread from \"E:\\\\react-material\\\\front-end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"E:\\\\react-material\\\\front-end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"E:\\\\react-material\\\\front-end\\\\src\\\\views\\\\Settings\\\\components\\\\Password\\\\Password.js\";\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { withStyles } from '@material-ui/styles';\nimport { Card, CardHeader, CardContent, CardActions, Divider, Button, TextField } from '@material-ui/core';\nimport { LoadingButton } from 'components';\nimport styles from './styles';\n\nconst Password = props => {\n  const className = props.className,\n        classes = props.classes,\n        updatePassword = props.updatePassword,\n        errors = props.errors,\n        account = props.account;\n\n  const _useState = useState({\n    password: '',\n    password_confirm: ''\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        values = _useState2[0],\n        setValues = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        loadingButton = _useState4[0],\n        setLoadingButton = _useState4[1];\n\n  useEffect(() => {\n    setLoadingButton(false);\n  }, [errors]);\n\n  const handleChange = event => {\n    setValues(_objectSpread({}, values, {\n      [event.target.name]: event.target.value\n    }));\n  };\n\n  const handleClick = () => {\n    setLoadingButton(true);\n    updatePassword(account._id, values);\n  };\n\n  return React.createElement(Card, {\n    className: clsx(classes.root, className),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, React.createElement(CardHeader, {\n    subheader: \"Update password\",\n    title: \"Password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }), React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }), React.createElement(CardContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    fullWidth: true,\n    label: \"Password\",\n    name: \"password\",\n    onChange: handleChange,\n    type: \"password\",\n    variant: \"outlined\",\n    error: errors.password ? true : false,\n    helperText: errors.password ? errors.password : null,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }), React.createElement(TextField, {\n    fullWidth: true,\n    label: \"Confirm password\",\n    name: \"password_confirm\",\n    onChange: handleChange,\n    style: {\n      marginTop: '1rem'\n    },\n    type: \"password\",\n    variant: \"outlined\",\n    error: errors.password_confirm ? true : false,\n    helperText: errors.password_confirm ? errors.password_confirm : null,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  })), React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }), React.createElement(CardActions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(Button, {\n    type: \"submit\",\n    color: \"primary\",\n    variant: \"outlined\",\n    onClick: handleClick,\n    disabled: loadingButton,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, loadingButton && React.createElement(LoadingButton, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }), \"Update\"))));\n};\n\nPassword.propTypes = {\n  className: PropTypes.string\n};\nexport default withStyles(styles)(Password);","map":{"version":3,"sources":["E:\\react-material\\front-end\\src\\views\\Settings\\components\\Password\\Password.js"],"names":["React","useState","useEffect","PropTypes","clsx","withStyles","Card","CardHeader","CardContent","CardActions","Divider","Button","TextField","LoadingButton","styles","Password","props","className","classes","updatePassword","errors","account","password","password_confirm","values","setValues","loadingButton","setLoadingButton","handleChange","event","target","name","value","handleClick","_id","root","marginTop","propTypes","string"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { withStyles } from '@material-ui/styles';\nimport {\n    Card,\n    CardHeader,\n    CardContent,\n    CardActions,\n    Divider,\n    Button,\n    TextField\n} from '@material-ui/core';\nimport { LoadingButton } from 'components';\nimport styles from './styles';\n\nconst Password = props => {\n    const { className, classes, updatePassword, errors, account } = props;\n\n    const [values, setValues] = useState({\n        password: '',\n        password_confirm: ''\n    });\n    const [loadingButton, setLoadingButton] = useState(false);\n    useEffect(() => {\n        setLoadingButton(false);\n    }, [errors]);\n\n    const handleChange = event => {\n        setValues({\n            ...values,\n            [event.target.name]: event.target.value\n        });\n    };\n    const handleClick = () => {\n        setLoadingButton(true);\n        updatePassword(account._id, values);\n    }\n    return (\n        <Card className={clsx(classes.root, className)}>\n            <form>\n                <CardHeader subheader=\"Update password\" title=\"Password\" />\n                <Divider />\n                <CardContent>\n                    <TextField\n                        fullWidth\n                        label=\"Password\"\n                        name=\"password\"\n                        onChange={handleChange}\n                        type=\"password\"\n                        variant=\"outlined\"\n                        error={errors.password ? true : false}\n                        helperText = {\n                            errors.password ? errors.password : null\n                        }\n                    />\n                    <TextField\n                        fullWidth\n                        label=\"Confirm password\"\n                        name=\"password_confirm\"\n                        onChange={handleChange}\n                        style={{ marginTop: '1rem' }}\n                        type=\"password\"\n                        variant=\"outlined\"\n                        error={errors.password_confirm ? true : false}\n                        helperText = {\n                            errors.password_confirm ? errors.password_confirm : null\n                        }\n                    />\n                </CardContent>\n                <Divider />\n                <CardActions>\n                    <Button \n                        type=\"submit\"\n                        color=\"primary\" \n                        variant=\"outlined\"\n                        onClick={handleClick}\n                        disabled={loadingButton}\n                    >\n                        {loadingButton && <LoadingButton />}\n                        Update\n                    </Button>\n                </CardActions>\n            </form>\n        </Card>\n    );\n};\n\nPassword.propTypes = {\n    className: PropTypes.string\n};\n\nexport default withStyles(styles)(Password);\n"]},"metadata":{},"sourceType":"module"}